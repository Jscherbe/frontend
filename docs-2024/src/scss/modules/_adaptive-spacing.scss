// Creates padding between items (vertical/horizontal layout)
@use "sass:map";
@use "ulu";

$config: (
  "sizes" : (
    "small" : (
      "default" : 2rem,
      "medium" : 4rem
    ),
    "large" : (
      "default" : 4rem,
      "medium" : 8rem
    )
  ),
  outputMargin: false,
  outputPadding: true,
  outputX: true,
  outputY: true,
  selectorX: "sides",
  selectorY: "ends"
);

@mixin set($changes) {
  $config: map.merge($config, $changes) !global;
}
@function get($name) {
  @return ulu.utils-require-map-get($config, $name, "adaptive-spacing [config]");
}

@mixin styles {
  $prefixMargin: ulu.selector-class("adaptive-margin");
  $prefixPadding: ulu.selector-class("adaptive-padding");
  $hasMargin: map.get($config, "outputMargin");
  $hasPadding: map.get($config, "outputPadding");
  
  @each $name, $breakpoints in map.get($config, "sizes") {
    $sizePrefixMargin: "#{ $prefixMargin }-#{ $name }";
    $sizePrefixPadding: "#{ $prefixPadding }-#{ $name }";
    
    @each $key, $value in $breakpoints {
      @if $key == "default" {
        @if $hasMargin {
          @include classes-for-type($sizePrefixMargin, "margin", $value);
        }
        @if $hasPadding {
          @include classes-for-type($sizePrefixPadding, "padding", $value);
        }
      } @else {
        @include ulu.breakpoint-min($key) {
          @if $hasMargin {
            @include classes-for-type($sizePrefixMargin, "margin", $value);
          }
          @if $hasPadding {
            @include classes-for-type($sizePrefixPadding, "padding", $value);
          }
        }
      }
    }
  }
}

@mixin classes-for-type($prefix, $prop, $value) {
  #{ $prefix } {
    #{ $prop }: $value;
  }
  @if (map.get($config, "outputX")) {
    #{ $prefix }-#{ map.get($config, "selectorX")} {
      #{ $prop }-left: $value;
      #{ $prop }-right: $value;
    }
    #{ $prefix }-left {
      #{ $prop }-left: $value;
    }
    #{ $prefix }-right {
      #{ $prop }-right: $value;
    }
  }
  @if (map.get($config, "outputY")) {
    #{ $prefix }-#{ map.get($config, "selectorY")} {
      #{ $prop }-top: $value;
      #{ $prop }-bottom: $value;
    }
    #{ $prefix }-top {
      #{ $prop }-top: $value;
    }
    #{ $prefix }-bottom {
      #{ $prop }-bottom: $value;
    }
  }
}

