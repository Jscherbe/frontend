@use "ulu";
@use "sass:map";
@use "sass:math";

/// Config options

$config: (
  "size" : 48px,
  "spoke-width" : 3px,
  "spoke-height" : 12px,
  "color" : blue,
  "border-radius" : 2px,
  "duration" :  1.2s
) !default;

/// Map of other sizes (use as modifiers), same properties as config/defaults
$styles: (
) !default;

/// Change modules $config
/// @param {Map} $changes Map of changes
/// @example scss - General example, replace module-name with module's name
///   @include module-name.set(( "property" : value ));

@mixin set($changes) {
  $config: map.merge($config, $changes) !global;
}

/// Set the optional other sizes 
@mixin set-styles($changes, $deep: false, $overwrite: false) {
  $styles: ulu.utils-map-merge-or-overwrite($styles, $changes, $deep, $overwrite) !global;
}


/// Get a config option
/// @param {Map} $name Name of property
///   @include module-name.get("property");

@function get($name) {
  @return ulu.utils-require-map-get($config, $name, 'spoke spinner [config]');
}

/// @example html Example markup
/// <div class="site-spinner">
///   <div class="site-spinner__spinner">
///     <div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div>
///   </div>
/// </div>
/// @link https://loading.io/css/

@mixin styles {

  $size: get("size");
  $sizeHalf: math.div($size, 2);

  $spoke-width: get("spoke-width");
  $spoke-widthHalf: math.div($spoke-width, 2);

  .spoke-spinner {
    position: relative;
    vertical-align: middle; // When used as inline-block
  }
  .spoke-spinner__spinner {
    color: official;
    display: inline-block;
    position: relative;
    width: $size;
    height: $size;
  }
  .spoke-spinner__spinner div {
    transform-origin: $sizeHalf $sizeHalf;
    animation: SpokeSpinner get("duration") linear infinite;
  }
  .spoke-spinner__spinner div:after {
    content: " ";
    display: block;
    position: absolute;
    top: 0;
    left: $sizeHalf - $spoke-widthHalf;
    width: $spoke-width;
    height: get("spoke-height");
    border-radius: get("border-radius");
    background: get("color");
  }
  .spoke-spinner__spinner div:nth-child(1) {
    transform: rotate(0deg);
    animation-delay: -1.1s;
  }
  .spoke-spinner__spinner div:nth-child(2) {
    transform: rotate(30deg);
    animation-delay: -1s;
  }
  .spoke-spinner__spinner div:nth-child(3) {
    transform: rotate(60deg);
    animation-delay: -0.9s;
  }
  .spoke-spinner__spinner div:nth-child(4) {
    transform: rotate(90deg);
    animation-delay: -0.8s;
  }
  .spoke-spinner__spinner div:nth-child(5) {
    transform: rotate(120deg);
    animation-delay: -0.7s;
  }
  .spoke-spinner__spinner div:nth-child(6) {
    transform: rotate(150deg);
    animation-delay: -0.6s;
  }
  .spoke-spinner__spinner div:nth-child(7) {
    transform: rotate(180deg);
    animation-delay: -0.5s;
  }
  .spoke-spinner__spinner div:nth-child(8) {
    transform: rotate(210deg);
    animation-delay: -0.4s;
  }
  .spoke-spinner__spinner div:nth-child(9) {
    transform: rotate(240deg);
    animation-delay: -0.3s;
  }
  .spoke-spinner__spinner div:nth-child(10) {
    transform: rotate(270deg);
    animation-delay: -0.2s;
  }
  .spoke-spinner__spinner div:nth-child(11) {
    transform: rotate(300deg);
    animation-delay: -0.1s;
  }
  .spoke-spinner__spinner div:nth-child(12) {
    transform: rotate(330deg);
    animation-delay: 0s;
  }

  @include -print-other-styles();

  @keyframes SpokeSpinner {
    0% {
      opacity: 1;
    }
    100% {
      opacity: 0;
    }
  }
}

@mixin -print-other-styles() {
  // Map of config props needed for a new style, omitting props like color that aren't required
  $required: (
    "size" : get("size"),
    "spoke-width" : get("spoke-width"),
    "spoke-height" : get("spoke-height"),
  );

  @each $name, $style in $styles {
    $merged: map.merge($required, $style);

    $size: map.get($merged, "size");
    $sizeHalf: math.div($size, 2);

    $spoke-width: map.get($merged, "spoke-width");
    $spoke-widthHalf: math.div($spoke-width, 2);

    .spoke-spinner--#{ $name } {
      .spoke-spinner__spinner {
        width: $size;
        height: $size;
      }
      .spoke-spinner__spinner div {
        transform-origin: $sizeHalf $sizeHalf;
        animation-duration: map.get($merged, "duration");
      }
      .spoke-spinner__spinner div:after {
        left: $sizeHalf - $spoke-widthHalf;
        width: $spoke-width;
        height: map.get($merged, "spoke-height");
        border-radius: map.get($merged, "border-radius");
        background: map.get($merged, "color");
      }
    }
  }
}