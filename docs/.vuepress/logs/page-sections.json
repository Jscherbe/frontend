{
  "variables": [
    {
      "data": {
        "description": "Test\n",
        "commentRange": {
          "start": 10,
          "end": 11
        },
        "context": {
          "type": "variable",
          "name": "test",
          "value": "true",
          "scope": "default",
          "line": {
            "start": 12,
            "end": 12
          }
        },
        "type": "Boolean",
        "group": [
          "utils"
        ],
        "access": "public",
        "file": {
          "path": "_utils.scss",
          "name": "_utils.scss"
        }
      },
      "groupName": "utils",
      "id": "variable-test",
      "uid": "utils-variable-test",
      "title": "$test",
      "groupPath": "/sass/utils/",
      "path": "/sass/utils/#variable-test"
    },
    {
      "data": {
        "description": "Module Settings\n",
        "commentRange": {
          "start": 14,
          "end": 17
        },
        "context": {
          "type": "variable",
          "name": "config",
          "value": "(\n  \"debug-maps\": true,\n  \"file-header-comments\": true\n)",
          "scope": "default",
          "line": {
            "start": 19,
            "end": 22
          }
        },
        "type": "Map",
        "property": [
          {
            "type": "Boolean",
            "name": "$config.debug-maps",
            "description": "Debugs include map print outs"
          },
          {
            "type": "Boolean",
            "name": "$config.file-header-comments",
            "description": "Remove comment headers if you'd like"
          }
        ],
        "access": "public",
        "file": {
          "path": "_utils.scss",
          "name": "_utils.scss"
        }
      },
      "groupName": "utils",
      "id": "variable-config",
      "uid": "utils-variable-config",
      "title": "$config",
      "groupPath": "/sass/utils/",
      "path": "/sass/utils/#variable-config"
    }
  ],
  "mixins": [
    {
      "data": {
        "description": "Change modules $config\n",
        "commentRange": {
          "start": 24,
          "end": 27
        },
        "context": {
          "type": "mixin",
          "name": "set",
          "code": "\n  $config: map.merge($config, $changes) !global;\n",
          "line": {
            "start": 28,
            "end": 30
          }
        },
        "parameter": [
          {
            "type": "Map",
            "name": "changes",
            "description": "Map of changes"
          }
        ],
        "example": [
          {
            "type": "scss",
            "code": "@include module-name.set(( \"property\" : value ));",
            "description": "General example, replace module-name with module's name"
          }
        ],
        "access": "public",
        "require": [
          {
            "type": "variable",
            "name": "config"
          },
          {
            "type": "variable",
            "name": "config"
          }
        ],
        "file": {
          "path": "_utils.scss",
          "name": "_utils.scss"
        }
      },
      "groupName": "utils",
      "id": "mixin-set",
      "uid": "utils-mixin-set",
      "title": "set()",
      "groupPath": "/sass/utils/",
      "path": "/sass/utils/#mixin-set"
    },
    {
      "data": {
        "description": "Ensure a value is present in the list, throw an error if not found\n",
        "commentRange": {
          "start": 60,
          "end": 63
        },
        "context": {
          "type": "mixin",
          "name": "require-list-has",
          "code": "\n  $index: list.index($list, $value) != null;\n  @if ($index == null) {\n    @error 'ULU: Unable to find item \"#{ $value }\" in #{ $context } list.';\n  }\n",
          "line": {
            "start": 65,
            "end": 70
          }
        },
        "parameter": [
          {
            "type": "List",
            "name": "list",
            "description": "The map to get the value from"
          },
          {
            "type": "String",
            "name": "value",
            "description": "The value to search for in the list"
          },
          {
            "type": "String",
            "name": "context",
            "description": "The context of using this function for debugging help"
          }
        ],
        "access": "public",
        "require": [],
        "throw": [
          "ULU: Unable to find item "
        ],
        "file": {
          "path": "_utils.scss",
          "name": "_utils.scss"
        },
        "usedBy": [
          {
            "description": "Require that the list only is only made up of allowed items\n",
            "context": {
              "type": "mixin",
              "name": "require-list-contains",
              "code": "\n  @each $item in $list {\n    @include require-list-has($allowed, $item, $context);\n  }\n",
              "line": {
                "start": 76,
                "end": 80
              }
            }
          }
        ]
      },
      "groupName": "utils",
      "id": "mixin-require-list-has",
      "uid": "utils-mixin-require-list-has",
      "title": "require-list-has()",
      "groupPath": "/sass/utils/",
      "path": "/sass/utils/#mixin-require-list-has"
    },
    {
      "data": {
        "description": "Require that the list only is only made up of allowed items\n",
        "commentRange": {
          "start": 72,
          "end": 74
        },
        "parameter": [
          {
            "type": "List",
            "name": "allowed",
            "description": "The list of allowed items"
          },
          {
            "type": "String",
            "name": "list",
            "description": "The list to test allowed against"
          }
        ],
        "access": "public",
        "require": [
          {
            "type": "mixin",
            "name": "require-list-has"
          }
        ],
        "file": {
          "path": "_utils.scss",
          "name": "_utils.scss"
        }
      },
      "groupName": "utils",
      "id": "mixin-require-list-contains",
      "uid": "utils-mixin-require-list-contains",
      "title": "require-list-contains()",
      "groupPath": "/sass/utils/",
      "path": "/sass/utils/#mixin-require-list-contains"
    },
    {
      "data": {
        "description": "Returns true if we should include something (used for output checking)\n",
        "commentRange": {
          "start": 91,
          "end": 93
        },
        "context": {
          "type": "mixin",
          "name": "file-header",
          "code": "\n  @if (\"file-header-comments\") {\n/* \n=============================================================================\n#{ $context }:#{ $name }\n============================================================================= \n*/\n  }\n",
          "line": {
            "start": 95,
            "end": 103
          }
        },
        "parameter": [
          {
            "type": "List",
            "name": "context",
            "description": "The root area of the framework this file comes from"
          },
          {
            "type": "List",
            "name": "name",
            "description": "The name of the specific area/file (optional)"
          }
        ],
        "access": "public",
        "require": [],
        "file": {
          "path": "_utils.scss",
          "name": "_utils.scss"
        }
      },
      "groupName": "utils",
      "id": "mixin-file-header",
      "uid": "utils-mixin-file-header",
      "title": "file-header()",
      "groupPath": "/sass/utils/",
      "path": "/sass/utils/#mixin-file-header"
    }
  ],
  "functions": [
    {
      "data": {
        "description": "Get a config option\n",
        "commentRange": {
          "start": 32,
          "end": 35
        },
        "context": {
          "type": "function",
          "name": "get",
          "code": "\n  @return require-map-get($config, $name, 'utils');\n",
          "line": {
            "start": 37,
            "end": 39
          }
        },
        "parameter": [
          {
            "type": "Map",
            "name": "name",
            "description": "Name of property"
          }
        ],
        "example": [
          {
            "type": "scss",
            "code": "@include module-name.get(\"property\");",
            "description": "General example, replace module-name with module's name"
          }
        ],
        "access": "public",
        "require": [
          {
            "type": "function",
            "name": "require-map-get"
          },
          {
            "type": "variable",
            "name": "config"
          }
        ],
        "file": {
          "path": "_utils.scss",
          "name": "_utils.scss"
        }
      },
      "groupName": "utils",
      "id": "function-get",
      "uid": "utils-function-get",
      "title": "get()",
      "groupPath": "/sass/utils/",
      "path": "/sass/utils/#function-get"
    },
    {
      "data": {
        "description": "Get a required value from a map, throw an error if not found\n- Remeber that that maps cannot intentionally use null (use false instead, if trying to avoid output if unconfigured)\n",
        "commentRange": {
          "start": 41,
          "end": 46
        },
        "context": {
          "type": "function",
          "name": "require-map-get",
          "code": "\n  $value: map.get($map, $key);\n  @if ($value != null) {\n    @return $value;\n  } @else {\n    @if (get(\"debug-maps\")) {\n      @debug $map;\n    }\n    @error 'ULU: Unable to find  \"#{ $key }\" in #{ $context } map.';\n  }\n",
          "line": {
            "start": 48,
            "end": 58
          }
        },
        "parameter": [
          {
            "type": "Map",
            "name": "map",
            "description": "The map to get the value from"
          },
          {
            "type": "String",
            "name": "key",
            "description": "The key in the map to get value from"
          },
          {
            "type": "String",
            "name": "context",
            "description": "The context of using this function for debugging help"
          }
        ],
        "return": {
          "type": "*",
          "description": "The value from the map"
        },
        "access": "public",
        "require": [
          {
            "type": "function",
            "name": "get"
          },
          {
            "type": "function",
            "name": "get"
          }
        ],
        "throw": [
          "ULU: Unable to find  "
        ],
        "file": {
          "path": "_utils.scss",
          "name": "_utils.scss"
        },
        "usedBy": [
          {
            "description": "Get a config option\n",
            "context": {
              "type": "function",
              "name": "get",
              "code": "\n  @return utils.require-map-get($config, $name, \"element [config]\");\n",
              "line": {
                "start": 36,
                "end": 38
              }
            }
          },
          {
            "description": "Get a config option\n",
            "context": {
              "type": "function",
              "name": "get",
              "code": "\n  @return utils.require-map-get($config, $name, 'breakpoint [config]');\n",
              "line": {
                "start": 34,
                "end": 36
              }
            }
          },
          {
            "description": "Create a media query that matches the min-width for a given size\n",
            "context": {
              "type": "mixin",
              "name": "min",
              "code": "\n  // Adding the small fraction to prevent overlap\n  $min: utils.require-map-get($sizes, $size, \"breakpoints\"); \n  @media screen and (min-width: $min) {\n    @content;\n  }\n",
              "line": {
                "start": 72,
                "end": 78
              }
            }
          },
          {
            "description": "Create a media query that matches the max-width for a given size\n",
            "context": {
              "type": "mixin",
              "name": "max",
              "code": "\n  // Adding the small fraction to prevent overlap\n  $max: utils.require-map-get($sizes, $size) - get(\"gap\"); \n  @media screen and (max-width: $max) {\n    @content;\n  }\n",
              "line": {
                "start": 87,
                "end": 93
              }
            }
          },
          {
            "description": "Create a media query that matches the min-width and max-width sizes\n",
            "context": {
              "type": "mixin",
              "name": "min-max",
              "code": "\n  // Adding the small fraction to prevent overlap\n  $min: utils.require-map-get($sizes, $size-min, \"breakpoints\"); \n  $max: utils.require-map-get($sizes, $size-max, \"breakpoints\") - get(\"gap\"); \n  @media screen and (min-width: $min) and (max-width: $max) {\n    @content;\n  }\n",
              "line": {
                "start": 102,
                "end": 109
              }
            }
          },
          {
            "description": "Create a media query that matches the min-width and max-width sizes\n"
          },
          {
            "description": "Get a config option\n",
            "context": {
              "type": "function",
              "name": "get",
              "code": "\n  $value: utils.require-map-get($config, $name, \"button [config]\");\n  @return utils.function-fallback($name, $value, $-fallbacks);\n",
              "line": {
                "start": 105,
                "end": 109
              }
            }
          },
          {
            "description": "Get a config option\n",
            "context": {
              "type": "function",
              "name": "get",
              "code": "\n  @return utils.require-map-get($config, $name, \"calculate [config]\");\n",
              "line": {
                "start": 28,
                "end": 30
              }
            }
          },
          {
            "description": "Get a color from the palette by name\n",
            "context": {
              "type": "function",
              "name": "get",
              "code": "\n  // Allow non lookup if the value is already a color (helps with code flow)\n  @if (meta.type-of($name) == \"color\") {\n    @return $name;\n  }\n  @return utils.require-map-get($palette, $name, 'color');\n",
              "line": {
                "start": 72,
                "end": 78
              }
            }
          },
          {
            "description": "Get a context by name\n",
            "context": {
              "type": "function",
              "name": "get-context",
              "code": "\n  @return utils.require-map-get($contexts, $name, 'context');\n",
              "line": {
                "start": 112,
                "end": 114
              }
            }
          },
          {
            "description": "Get a config option\n",
            "context": {
              "type": "function",
              "name": "get",
              "code": "\n  @return utils.require-map-get($config, $name, \"rule [config]\");\n",
              "line": {
                "start": 35,
                "end": 37
              }
            }
          },
          {
            "description": "Get a config option\n",
            "context": {
              "type": "function",
              "name": "get",
              "code": "\n  @return utils.require-map-get($config, $name, \"element [config]\");\n",
              "line": {
                "start": 95,
                "end": 97
              }
            }
          },
          {
            "description": "Get a rule style\n",
            "context": {
              "type": "function",
              "name": "get-rule-style",
              "code": "\n  @return utils.require-map-get($rule-styles, $name, \"element [rule style]\");\n",
              "line": {
                "start": 116,
                "end": 118
              }
            }
          },
          {
            "description": "Sets rule margin\n",
            "context": {
              "type": "function",
              "name": "get-rule-margin",
              "code": "\n  @return utils.require-map-get($rule-margins, $name, \"element [rule style]\");\n",
              "line": {
                "start": 123,
                "end": 125
              }
            }
          },
          {
            "description": "Get a config option\n",
            "context": {
              "type": "function",
              "name": "get",
              "code": "\n  @return utils.require-map-get($config, $name, \"grid [config]\");\n",
              "line": {
                "start": 69,
                "end": 71
              }
            }
          },
          {
            "description": "Creates grid css (variation of original data-grid)\n",
            "context": {
              "type": "mixin",
              "name": "create",
              "code": "\n  $attribute-item: \"#{ $attribute }-item\";\n  $select-grid: '[#{ $attribute }*=\"columns: #{ $columns }\"]';\n  $select-item: '[#{ $attribute-item }]';\n  $select-rule-col: \":before\";\n  $select-rule-row: \":after\";\n  // These through off syntax highlighting when inside interpolation\n  $position-class-column-first: get(\"position-class-column-first\");\n  $position-class-column-last: get(\"position-class-column-last\");\n  $position-class-row-first: get(\"position-class-row-first\");\n  $position-class-row-last: get(\"position-class-row-last\");\n\n  #{ $select-grid } {\n    @include layout.clearfix(); // For legacy browsers\n\n    // Ensure empty elements still take up space in layout\n    > #{ $select-item } {\n      min-height: 1px; \n      width: 100%;\n    }\n    // This is for value of true and also covers all options below\n    &#{'[#{ $attribute }*=\"gutters-row:\"]'} { \n      > #{ $select-item } {\n        padding-top:  $gutter;\n        padding-bottom: $gutter;\n      }\n    }\n    &#{'[#{ $attribute }*=\"gutters-row: top\"]'} { \n      > #{ $select-item } {\n        &.#{ $position-class-row-last } {\n          padding-bottom: 0;\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"gutters-row: bottom\"]'} { \n      > #{ $select-item } {\n        &.#{ $position-class-row-first } {\n          padding-top: 0;\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"gutters-row: fit\"]'} { \n      margin-top: -$gutter;\n      margin-bottom: -$gutter;\n    }\n    // Rules: Row\n    &#{'[#{ $attribute }*=\"rules-row:\"]'} { \n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          position: absolute;\n          left: 0;\n          right: 0;\n          height: $rule-size;\n          background: color.get($rule-color);\n        }\n      }\n    }\n    // Rules: Applies to both column and row\n    &#{'[#{ $attribute }*=\"rules\"]'} { \n      > #{ $select-item } {\n        position: relative;\n      }\n    }\n    // Rules: Column\n    &#{'[#{ $attribute }*=\"rules-column:\"]'} { \n      > #{ $select-item } {\n        &#{ $select-rule-col } {\n          position: absolute;\n          top: 0;\n          bottom: 0;\n          width: $rule-size;\n          background: color.get($rule-color);\n        }\n      }\n    }\n    // Options for the left or right\n    @include -create-rule-col-position(\n      $position: \"left\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-col: $select-rule-col, \n      $end-class: $position-class-column-first\n    );\n    @include -create-rule-col-position(\n      $position: \"right\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-col: $select-rule-col, \n      $end-class: $position-class-column-last\n    );\n    // Override first or last column removing the rule using matching specificity\n    &#{'[#{ $attribute }*=\"rules-column:\"][#{ $attribute }*=\"rules-column-ends: true\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-col } {\n          content: '';\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"rules-column-align: gutter\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-col } {\n          top: $gutter;\n          bottom: $gutter;\n        }\n      }\n    }\n    // Options for the left or right\n    @include -create-rule-row-position(\n      $position: \"top\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-row: $select-rule-row, \n      $between: false\n    );\n    @include -create-rule-row-position(\n      $position: \"bottom\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-row: $select-rule-row, \n      $between: false\n    );\n\n    &#{'[#{ $attribute }*=\"rules-row: between\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          bottom: math.floor(math.div($rule-size, 2)) * -1;\n        }\n        // For removing the rule per row (via equal heights for now)\n        &.#{ $position-class-row-last } {\n          &#{ $select-rule-row } {\n            content: none;\n          }\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"rules-row-align: gutter\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          left: $gutter;\n          right: $gutter;\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"rules-row-persist: true\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          content: '';\n        }\n      }\n    }\n  }\n\n  @include breakpoint.min($breakpoint) {\n    // Select the attribute with matching column count\n    #{ $select-grid } {\n      // Defaults for grid an item\n      display: flex;\n      flex-flow: row wrap;\n      align-items: stretch;\n      margin-left: -$gutter;\n      margin-right: -$gutter;\n\n      > #{ $select-item } {\n        float: left; // Fallback\n        padding-left: $gutter;\n        padding-right: $gutter;\n      }\n      // Alignment options\n      &#{'[#{ $attribute }*=\"align: center\"]'} { \n        align-items: center;  \n      }\n      &#{'[#{ $attribute }*=\"align: end\"]'} { \n        align-items: flex-end;\n      }\n      &#{'[#{ $attribute }*=\"align: start\"]'} { \n        align-items: flex-start; \n      }\n      // Alignment of the children when using stretch\n      // - There is no stetch-start (that's defualt);\n      // - There is no stetch-middle (that's covered by stretch-);\n      &#{'[#{ $attribute }*=\"align: stretch-\"]'} { \n        // set the child to display as a single flex item\n        > #{ $select-item } {\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n        }\n      }\n      &#{'[#{ $attribute }*=\"align: stretch-end\"]'} { \n        > #{ $select-item } {\n          justify-content: flex-end;\n        }\n      }\n      // Other options\n      &#{'[#{ $attribute }*=\"gutters: false\"]'} { \n        margin-left: 0;\n        margin-right: 0;\n        > #{ $select-item } {\n          padding-left: 0;\n          padding-right: 0;\n        }\n      }\n      // Activate Rules\n      &#{'[#{ $attribute }*=\"rules-column:\"]'} {\n        > #{ $select-item } {\n          &#{ $select-rule-col } {\n            content: '';\n          }\n        }\n      }\n      &#{'[#{ $attribute }*=\"rules-row:\"]'} {\n        > #{ $select-item } {\n          &#{ $select-rule-row } {\n            content: '';\n          }\n        }\n      }\n      // Generated props for item\n      @include -create-column-widths(\n        $columns: $columns,\n        $attribute-item: $attribute-item,\n        $suffix: ''\n      );\n      @include -create-column-offsets(\n        $columns: $columns,\n        $attribute-item: $attribute-item,\n        $suffix: ''\n      );\n    }\n  }\n\n  @if $extra-breakpoints {\n    @each $name, $options in $extra-breakpoints {\n      $g: map.get($options, \"gutter\");\n      @include -create-extra-breakpoint(\n        $name: $name, \n        $breakpoint: map.get($options, \"breakpoint\"),\n        $gutter: if($g, $g, $gutter),\n        $columns: $columns,\n        $attribute-item: $attribute-item,\n        $select-grid: $select-grid,\n        $select-item: $select-item\n      );\n    }\n  }\n  @if $extra-rule-styles {\n    @each $name, $options in $extra-rule-styles {\n      $color: utils.require-map-get($options, \"color\", \"grid [extra rule style]\");\n      $size: utils.require-map-get($options, \"size\", \"grid [extra rule style]\");\n      #{ $select-grid } {\n\n        &#{'[#{_attr}*=\"rules-column-style: #{ $name }\"]'} {\n          > #{ $select-item } {\n            &#{ $select-rule-col } {\n              background-color: color.get($color);\n              width: $size;\n            }\n          }\n          @include -create-rule-col-position(\n            $position: \"left\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-col: $select-rule-col, \n            $end-class: false\n          );\n          @include -create-rule-col-position(\n            $position: \"right\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-col: $select-rule-col, \n            $end-class: false\n          );\n        }\n        &#{'[#{_attr}*=\"rules-row-style: #{ $name }\"]'} {\n          > #{ $select-item } {\n            &#{ $select-rule-row } {\n              background-color: $color;\n              height: $size;\n            }\n          }\n          @include -create-rule-row-position(\n            $position: \"top\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-row: $select-rule-row, \n            $between: false\n          );\n          @include -create-rule-row-position(\n            $position: \"bottom\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-row: $select-rule-row, \n            $between: false\n          );\n          @include -create-rule-row-position(\n            $position: \"bottom\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-row: $select-rule-row, \n            $between: true\n          );\n        }\n      }\n    }\n  }\n",
              "line": {
                "start": 83,
                "end": 407
              }
            }
          },
          {
            "description": "Creates grid css (variation of original data-grid)\n"
          },
          {
            "description": "Get a config option\n",
            "context": {
              "type": "function",
              "name": "get",
              "code": "\n  @return utils.require-map-get($config, $name, \"units [config]\");\n",
              "line": {
                "start": 32,
                "end": 34
              }
            }
          },
          {
            "description": "Get a config option\n",
            "context": {
              "type": "function",
              "name": "get",
              "code": "\n  @return utils.require-map-get($config, $name, \"layout [config]\");\n",
              "line": {
                "start": 39,
                "end": 41
              }
            }
          },
          {
            "description": "Get an aliase's path\n",
            "context": {
              "type": "function",
              "name": "get-alias",
              "code": "\n  @return utils.require-map-get($aliases, $name, '[path alias]');\n",
              "line": {
                "start": 28,
                "end": 30
              }
            }
          },
          {
            "description": "Get a config option\n",
            "context": {
              "type": "function",
              "name": "get",
              "code": "\n  @return utils.require-map-get($config, $name, \"selector [config]\");\n",
              "line": {
                "start": 34,
                "end": 36
              }
            }
          },
          {
            "description": "Get a config option\n",
            "context": {
              "type": "function",
              "name": "get",
              "code": "\n  @return utils.require-map-get($config, $name, 'typography [config]');\n",
              "line": {
                "start": 67,
                "end": 69
              }
            }
          },
          {
            "description": "Get a size's map\n",
            "context": {
              "type": "function",
              "name": "get-size",
              "code": "\n  @return utils.require-map-get($sizes, $name, 'typography [size]');\n",
              "line": {
                "start": 187,
                "end": 189
              }
            }
          },
          {
            "description": "Get a unit by name (preset) or number (multiplier of base)\n",
            "context": {
              "type": "function",
              "name": "get",
              "code": "\n  @if (meta.type-of($value) == string) {\n    @return utils.require-map-get($config, $value, 'unit [config]');\n  }\n  @return get(\"default\") * $value;\n",
              "line": {
                "start": 42,
                "end": 47
              }
            }
          },
          {
            "description": "Get a config option\n"
          }
        ]
      },
      "groupName": "utils",
      "id": "function-require-map-get",
      "uid": "utils-function-require-map-get",
      "title": "require-map-get()",
      "groupPath": "/sass/utils/",
      "path": "/sass/utils/#function-require-map-get"
    },
    {
      "data": {
        "description": "Returns true if we should include something (map of booleans)\n",
        "commentRange": {
          "start": 82,
          "end": 84
        },
        "context": {
          "type": "function",
          "name": "included",
          "code": "\n  $value: map.get($includes, $name);\n  @return $value == true;\n",
          "line": {
            "start": 86,
            "end": 89
          }
        },
        "parameter": [
          {
            "type": "String",
            "name": "name",
            "description": "Name of item to see if it's included"
          },
          {
            "type": "Map",
            "name": "includes",
            "description": "Map of includes"
          }
        ],
        "access": "public",
        "require": [
          {
            "type": "function",
            "name": "get"
          }
        ],
        "file": {
          "path": "_utils.scss",
          "name": "_utils.scss"
        }
      },
      "groupName": "utils",
      "id": "function-included",
      "uid": "utils-function-included",
      "title": "included()",
      "groupPath": "/sass/utils/",
      "path": "/sass/utils/#function-included"
    },
    {
      "data": {
        "description": "",
        "commentRange": {
          "start": 106,
          "end": 108
        },
        "context": {
          "type": "function",
          "name": "if-type",
          "code": "\n  @if meta.type-of($value) == $type {\n    @return $value;\n  } @else {\n    @return $fallback;\n  }\n",
          "line": {
            "start": 110,
            "end": 116
          }
        },
        "parameter": [
          {
            "type": "String",
            "name": "type",
            "description": "type of value it should be"
          },
          {
            "type": "String",
            "name": "value",
            "description": "the value to provide if it is that type"
          },
          {
            "type": "String",
            "name": "fallback",
            "description": "the fallback value"
          }
        ],
        "access": "public",
        "require": [],
        "file": {
          "path": "_utils.scss",
          "name": "_utils.scss"
        }
      },
      "groupName": "utils",
      "id": "function-if-type",
      "uid": "utils-function-if-type",
      "title": "if-type()",
      "groupPath": "/sass/utils/",
      "path": "/sass/utils/#function-if-type"
    },
    {
      "data": {
        "description": "",
        "commentRange": {
          "start": 119,
          "end": 120
        },
        "context": {
          "type": "function",
          "name": "number-info",
          "code": "\n  $is-number: meta.type-of($number) != 'number';\n  $is-unitless: math.is-unitless($number);\n  @if ($is-unitless or not $is-number) {\n    @return (\n      \"unit\": null,\n      \"value\": $number \n    );\n  } @else {\n    @return (\n      \"unit\" : math.unit($value), \n      \"value\": math.div($number, ($number * 0 + 1))\n    );\n  }\n",
          "line": {
            "start": 122,
            "end": 136
          }
        },
        "parameter": [
          {
            "type": "String",
            "name": "number",
            "description": "Number to get meta info for"
          }
        ],
        "return": {
          "type": "Map",
          "description": "With properties (unit, value)"
        },
        "access": "public",
        "require": [],
        "file": {
          "path": "_utils.scss",
          "name": "_utils.scss"
        }
      },
      "groupName": "utils",
      "id": "function-number-info",
      "uid": "utils-function-number-info",
      "title": "number-info()",
      "groupPath": "/sass/utils/",
      "path": "/sass/utils/#function-number-info"
    },
    {
      "data": {
        "description": "Repeatable pattern in core\n",
        "commentRange": {
          "start": 138,
          "end": 138
        },
        "context": {
          "type": "function",
          "name": "map-merge-or-overwrite",
          "code": "\n  @if $deep {\n    @return map.deep-merge($original, $changes);\n  } @else if $overwrite {\n    @return $changes;\n  } @else {\n    @return map.merge($original, $changes);\n  }\n",
          "line": {
            "start": 140,
            "end": 148
          }
        },
        "access": "public",
        "require": [],
        "file": {
          "path": "_utils.scss",
          "name": "_utils.scss"
        },
        "usedBy": [
          {
            "description": "Set color contexts\n",
            "context": {
              "type": "mixin",
              "name": "set-contexts",
              "code": "\n  $contexts: utils.map-merge-or-overwrite($contexts, $changes, $deep, $overwrite) !global;\n",
              "line": {
                "start": 104,
                "end": 106
              }
            }
          },
          {
            "description": "Update the typography presets map\n",
            "context": {
              "type": "mixin",
              "name": "set-sizes",
              "code": "\n  $sizes: utils.map-merge-or-overwrite($sizes, $changes, $deep, $overwrite) !global;\n",
              "line": {
                "start": 179,
                "end": 181
              }
            }
          }
        ]
      },
      "groupName": "utils",
      "id": "function-map-merge-or-overwrite",
      "uid": "utils-function-map-merge-or-overwrite",
      "title": "map-merge-or-overwrite()",
      "groupPath": "/sass/utils/",
      "path": "/sass/utils/#function-map-merge-or-overwrite"
    },
    {
      "data": {
        "description": "Helps in providing a dynamic fallback for modules whose defaults should come from another\n",
        "commentRange": {
          "start": 150,
          "end": 154
        },
        "context": {
          "type": "function",
          "name": "function-fallback",
          "code": "\n  // If there was already a value return it else resolve through passed function\n  @if ($value == true)  {\n    $fn: map.get($lookup, $prop);\n    @if ($fn) {\n      @return meta.call($fn, $prop);\n    } \n  }\n  @return $value;\n",
          "line": {
            "start": 156,
            "end": 165
          }
        },
        "parameter": [
          {
            "type": "String",
            "name": "prop",
            "description": "Property trying to get fallback for"
          },
          {
            "type": "*",
            "name": "value",
            "description": "The value that may need the fallback"
          },
          {
            "type": "Map",
            "name": "lookup",
            "description": "Map of properties to functions (use sass:meta > meta.get-function to populate)"
          }
        ],
        "return": {
          "type": "*",
          "description": "The user's original value, or if the value is true get the default value from the provided function"
        },
        "access": "public",
        "require": [
          {
            "type": "function",
            "name": "get"
          }
        ],
        "file": {
          "path": "_utils.scss",
          "name": "_utils.scss"
        },
        "usedBy": [
          {
            "description": "Get a config option\n"
          }
        ]
      },
      "groupName": "utils",
      "id": "function-function-fallback",
      "uid": "utils-function-function-fallback",
      "title": "function-fallback()",
      "groupPath": "/sass/utils/",
      "path": "/sass/utils/#function-function-fallback"
    }
  ],
  "placeholders": []
}