{
  "variables": [
    {
      "description": "Test\n",
      "commentRange": {
        "start": 10,
        "end": 11
      },
      "context": {
        "type": "variable",
        "name": "test",
        "value": "true",
        "scope": "default",
        "line": {
          "start": 12,
          "end": 12
        }
      },
      "type": "Boolean",
      "group": [
        "utils"
      ],
      "access": "public",
      "file": {
        "path": "_utils.scss",
        "name": "_utils.scss"
      },
      "_uid": "utils--variable--test"
    },
    {
      "description": "Module Settings\n",
      "commentRange": {
        "start": 14,
        "end": 17
      },
      "context": {
        "type": "variable",
        "name": "config",
        "value": "(\n  \"debug-maps\": true,\n  \"file-header-comments\": true\n)",
        "scope": "default",
        "line": {
          "start": 19,
          "end": 22
        }
      },
      "type": "Map",
      "property": [
        {
          "type": "Boolean",
          "name": "$config.debug-maps",
          "description": "Debugs include map print outs"
        },
        {
          "type": "Boolean",
          "name": "$config.file-header-comments",
          "description": "Remove comment headers if you'd like"
        }
      ],
      "group": [
        "utils"
      ],
      "access": "public",
      "file": {
        "path": "_utils.scss",
        "name": "_utils.scss"
      },
      "_uid": "utils--variable--config"
    }
  ],
  "mixins": [
    {
      "description": "Change modules $config\n",
      "commentRange": {
        "start": 24,
        "end": 27
      },
      "context": {
        "type": "mixin",
        "name": "set",
        "code": "\n  $config: map.merge($config, $changes) !global;\n",
        "line": {
          "start": 28,
          "end": 30
        }
      },
      "parameter": [
        {
          "type": "Map",
          "name": "changes",
          "description": "Map of changes"
        }
      ],
      "example": [
        {
          "type": "scss",
          "code": "@include module-name.set(( \"property\" : value ));",
          "description": "General example, replace module-name with module's name"
        }
      ],
      "group": [
        "utils"
      ],
      "access": "public",
      "require": [
        {
          "type": "variable",
          "name": "config",
          "autofill": true,
          "item": "base--variable--config"
        },
        {
          "type": "variable",
          "name": "config",
          "autofill": true,
          "item": "base--variable--config"
        }
      ],
      "file": {
        "path": "_utils.scss",
        "name": "_utils.scss"
      },
      "_uid": "utils--mixin--set"
    },
    {
      "description": "Ensure a value is present in the list, throw an error if not found\n",
      "commentRange": {
        "start": 60,
        "end": 63
      },
      "context": {
        "type": "mixin",
        "name": "require-list-has",
        "code": "\n  $index: list.index($list, $value) != null;\n  @if ($index == null) {\n    @error 'ULU: Unable to find item \"#{ $value }\" in #{ $context } list.';\n  }\n",
        "line": {
          "start": 65,
          "end": 70
        }
      },
      "parameter": [
        {
          "type": "List",
          "name": "list",
          "description": "The map to get the value from"
        },
        {
          "type": "String",
          "name": "value",
          "description": "The value to search for in the list"
        },
        {
          "type": "String",
          "name": "context",
          "description": "The context of using this function for debugging help"
        }
      ],
      "group": [
        "utils"
      ],
      "access": "public",
      "require": [],
      "throw": [
        "ULU: Unable to find item "
      ],
      "file": {
        "path": "_utils.scss",
        "name": "_utils.scss"
      },
      "usedBy": [
        "utils--mixin--require-list-contains"
      ],
      "_uid": "utils--mixin--require-list-has"
    },
    {
      "description": "Require that the list only is only made up of allowed items\n",
      "commentRange": {
        "start": 72,
        "end": 74
      },
      "context": {
        "type": "mixin",
        "name": "require-list-contains",
        "code": "\n  @each $item in $list {\n    @include require-list-has($allowed, $item, $context);\n  }\n",
        "line": {
          "start": 76,
          "end": 80
        }
      },
      "parameter": [
        {
          "type": "List",
          "name": "allowed",
          "description": "The list of allowed items"
        },
        {
          "type": "String",
          "name": "list",
          "description": "The list to test allowed against"
        }
      ],
      "group": [
        "utils"
      ],
      "access": "public",
      "require": [
        {
          "type": "mixin",
          "name": "require-list-has",
          "autofill": true,
          "item": "utils--mixin--require-list-has"
        }
      ],
      "file": {
        "path": "_utils.scss",
        "name": "_utils.scss"
      },
      "_uid": "utils--mixin--require-list-contains"
    },
    {
      "description": "Returns true if we should include something (used for output checking)\n",
      "commentRange": {
        "start": 91,
        "end": 93
      },
      "context": {
        "type": "mixin",
        "name": "file-header",
        "code": "\n  @if (\"file-header-comments\") {\n/* \n=============================================================================\n#{ $context }:#{ $name }\n============================================================================= \n*/\n  }\n",
        "line": {
          "start": 95,
          "end": 103
        }
      },
      "parameter": [
        {
          "type": "List",
          "name": "context",
          "description": "The root area of the framework this file comes from"
        },
        {
          "type": "List",
          "name": "name",
          "description": "The name of the specific area/file (optional)"
        }
      ],
      "group": [
        "utils"
      ],
      "access": "public",
      "require": [],
      "file": {
        "path": "_utils.scss",
        "name": "_utils.scss"
      },
      "_uid": "utils--mixin--file-header"
    }
  ],
  "functions": [
    {
      "description": "Get a config option\n",
      "commentRange": {
        "start": 32,
        "end": 35
      },
      "context": {
        "type": "function",
        "name": "get",
        "code": "\n  @return require-map-get($config, $name, 'utils');\n",
        "line": {
          "start": 37,
          "end": 39
        }
      },
      "parameter": [
        {
          "type": "Map",
          "name": "name",
          "description": "Name of property"
        }
      ],
      "example": [
        {
          "type": "scss",
          "code": "@include module-name.get(\"property\");",
          "description": "General example, replace module-name with module's name"
        }
      ],
      "group": [
        "utils"
      ],
      "access": "public",
      "require": [
        {
          "type": "function",
          "name": "require-map-get",
          "autofill": true,
          "item": "utils--function--require-map-get"
        },
        {
          "type": "variable",
          "name": "config",
          "autofill": true,
          "item": "base--variable--config"
        }
      ],
      "file": {
        "path": "_utils.scss",
        "name": "_utils.scss"
      },
      "_uid": "utils--function--get"
    },
    {
      "description": "Get a required value from a map, throw an error if not found\n- Remeber that that maps cannot intentionally use null (use false instead, if trying to avoid output if unconfigured)\n",
      "commentRange": {
        "start": 41,
        "end": 46
      },
      "context": {
        "type": "function",
        "name": "require-map-get",
        "code": "\n  $value: map.get($map, $key);\n  @if ($value != null) {\n    @return $value;\n  } @else {\n    @if (get(\"debug-maps\")) {\n      @debug $map;\n    }\n    @error 'ULU: Unable to find  \"#{ $key }\" in #{ $context } map.';\n  }\n",
        "line": {
          "start": 48,
          "end": 58
        }
      },
      "parameter": [
        {
          "type": "Map",
          "name": "map",
          "description": "The map to get the value from"
        },
        {
          "type": "String",
          "name": "key",
          "description": "The key in the map to get value from"
        },
        {
          "type": "String",
          "name": "context",
          "description": "The context of using this function for debugging help"
        }
      ],
      "return": {
        "type": "*",
        "description": "The value from the map"
      },
      "group": [
        "utils"
      ],
      "access": "public",
      "require": [
        {
          "type": "function",
          "name": "get",
          "autofill": true,
          "item": "base--function--get"
        },
        {
          "type": "function",
          "name": "get",
          "autofill": true,
          "item": "base--function--get"
        }
      ],
      "throw": [
        "ULU: Unable to find  "
      ],
      "file": {
        "path": "_utils.scss",
        "name": "_utils.scss"
      },
      "usedBy": [
        "base--function--get",
        "breakpoint--function--get",
        "breakpoint--mixin--min",
        "breakpoint--mixin--max",
        "breakpoint--mixin--min-max",
        "breakpoint--mixin--min-max",
        "button--function--get",
        "calculate--function--get",
        "color--function--get",
        "color--function--get-context",
        "components--function--get",
        "element--function--get",
        "element--function--get-rule-style",
        "element--function--get-rule-margin",
        "grid--function--get",
        "grid--mixin--create",
        "grid--mixin--create",
        "helpers--function--get",
        "layout--function--get",
        "path--function--get-alias",
        "selector--function--get",
        "typography--function--get",
        "typography--function--get-size",
        "units--function--get",
        "utils--function--get"
      ],
      "_uid": "utils--function--require-map-get"
    },
    {
      "description": "Returns true if we should include something (map of booleans)\n",
      "commentRange": {
        "start": 82,
        "end": 84
      },
      "context": {
        "type": "function",
        "name": "included",
        "code": "\n  $value: map.get($includes, $name);\n  @return $value == true;\n",
        "line": {
          "start": 86,
          "end": 89
        }
      },
      "parameter": [
        {
          "type": "String",
          "name": "name",
          "description": "Name of item to see if it's included"
        },
        {
          "type": "Map",
          "name": "includes",
          "description": "Map of includes"
        }
      ],
      "group": [
        "utils"
      ],
      "access": "public",
      "require": [
        {
          "type": "function",
          "name": "get",
          "autofill": true,
          "item": "base--function--get"
        }
      ],
      "file": {
        "path": "_utils.scss",
        "name": "_utils.scss"
      },
      "_uid": "utils--function--included"
    },
    {
      "description": "",
      "commentRange": {
        "start": 106,
        "end": 108
      },
      "context": {
        "type": "function",
        "name": "if-type",
        "code": "\n  @if meta.type-of($value) == $type {\n    @return $value;\n  } @else {\n    @return $fallback;\n  }\n",
        "line": {
          "start": 110,
          "end": 116
        }
      },
      "parameter": [
        {
          "type": "String",
          "name": "type",
          "description": "type of value it should be"
        },
        {
          "type": "String",
          "name": "value",
          "description": "the value to provide if it is that type"
        },
        {
          "type": "String",
          "name": "fallback",
          "description": "the fallback value"
        }
      ],
      "group": [
        "utils"
      ],
      "access": "public",
      "require": [],
      "file": {
        "path": "_utils.scss",
        "name": "_utils.scss"
      },
      "_uid": "utils--function--if-type"
    },
    {
      "description": "",
      "commentRange": {
        "start": 119,
        "end": 120
      },
      "context": {
        "type": "function",
        "name": "number-info",
        "code": "\n  $is-number: meta.type-of($number) != 'number';\n  $is-unitless: math.is-unitless($number);\n  @if ($is-unitless or not $is-number) {\n    @return (\n      \"unit\": null,\n      \"value\": $number \n    );\n  } @else {\n    @return (\n      \"unit\" : math.unit($value), \n      \"value\": math.div($number, ($number * 0 + 1))\n    );\n  }\n",
        "line": {
          "start": 122,
          "end": 136
        }
      },
      "parameter": [
        {
          "type": "String",
          "name": "number",
          "description": "Number to get meta info for"
        }
      ],
      "return": {
        "type": "Map",
        "description": "With properties (unit, value)"
      },
      "group": [
        "utils"
      ],
      "access": "public",
      "require": [],
      "file": {
        "path": "_utils.scss",
        "name": "_utils.scss"
      },
      "_uid": "utils--function--number-info"
    },
    {
      "description": "Repeatable pattern in core\n",
      "commentRange": {
        "start": 138,
        "end": 138
      },
      "context": {
        "type": "function",
        "name": "map-merge-or-overwrite",
        "code": "\n  @if $deep {\n    @return map.deep-merge($original, $changes);\n  } @else if $overwrite {\n    @return $changes;\n  } @else {\n    @return map.merge($original, $changes);\n  }\n",
        "line": {
          "start": 140,
          "end": 148
        }
      },
      "group": [
        "utils"
      ],
      "access": "public",
      "require": [],
      "file": {
        "path": "_utils.scss",
        "name": "_utils.scss"
      },
      "usedBy": [
        "color--mixin--set-contexts",
        "typography--mixin--set-sizes"
      ],
      "_uid": "utils--function--map-merge-or-overwrite"
    },
    {
      "description": "Helps in providing a dynamic fallback for modules whose defaults should come from another\n",
      "commentRange": {
        "start": 150,
        "end": 154
      },
      "context": {
        "type": "function",
        "name": "function-fallback",
        "code": "\n  // If there was already a value return it else resolve through passed function\n  @if ($value == true)  {\n    $fn: map.get($lookup, $prop);\n    @if ($fn) {\n      @return meta.call($fn, $prop);\n    } \n  }\n  @return $value;\n",
        "line": {
          "start": 156,
          "end": 165
        }
      },
      "parameter": [
        {
          "type": "String",
          "name": "prop",
          "description": "Property trying to get fallback for"
        },
        {
          "type": "*",
          "name": "value",
          "description": "The value that may need the fallback"
        },
        {
          "type": "Map",
          "name": "lookup",
          "description": "Map of properties to functions (use sass:meta > meta.get-function to populate)"
        }
      ],
      "return": {
        "type": "*",
        "description": "The user's original value, or if the value is true get the default value from the provided function"
      },
      "group": [
        "utils"
      ],
      "access": "public",
      "require": [
        {
          "type": "function",
          "name": "get",
          "autofill": true,
          "item": "base--function--get"
        }
      ],
      "file": {
        "path": "_utils.scss",
        "name": "_utils.scss"
      },
      "usedBy": [
        "button--function--get"
      ],
      "_uid": "utils--function--function-fallback"
    }
  ],
  "placeholders": []
}