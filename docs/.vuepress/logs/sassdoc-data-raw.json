[
  {
    "description": "This item will have:\n`@group API` and `@author Kitty Giraudel`\ninherited from the poster.\n",
    "commentRange": {
      "start": 8,
      "end": 10
    },
    "context": {
      "type": "function",
      "name": "dummy-function",
      "code": "\n  // ...\n",
      "line": {
        "start": 11,
        "end": 13
      }
    },
    "group": [
      "api"
    ],
    "author": [
      "Kitty Giraudel"
    ],
    "access": "public",
    "file": {
      "path": "sassdoc_test_poster.scss",
      "name": "sassdoc_test_poster.scss"
    }
  },
  {
    "description": "This item overrides the `@author` annotation\nfrom the poster; it's not merged with it.\n",
    "commentRange": {
      "start": 15,
      "end": 17
    },
    "context": {
      "type": "mixin",
      "name": "dummy-mixin",
      "code": "\n  // ...\n",
      "line": {
        "start": 18,
        "end": 20
      }
    },
    "author": [
      "Fabrice Weinberg"
    ],
    "group": [
      "api"
    ],
    "access": "public",
    "file": {
      "path": "sassdoc_test_poster.scss",
      "name": "sassdoc_test_poster.scss"
    }
  },
  {
    "description": "Prints color-context styles as base classes (top of stylesheet)\n",
    "commentRange": {
      "start": 8,
      "end": 8
    },
    "context": {
      "type": "mixin",
      "name": "styles",
      "code": "\n  @include utils.file-header('base', 'color');\n  @include color.all-context-styles(\"base-class\");\n",
      "line": {
        "start": 10,
        "end": 13
      }
    },
    "group": [
      "base"
    ],
    "access": "public",
    "require": [],
    "file": {
      "path": "base/_color.scss",
      "name": "_color.scss"
    }
  },
  {
    "description": "Module Settings\n",
    "commentRange": {
      "start": 15,
      "end": 17
    },
    "context": {
      "type": "variable",
      "name": "config",
      "value": "(\n  \"links-state-styling\" : false\n)",
      "scope": "default",
      "line": {
        "start": 19,
        "end": 21
      }
    },
    "type": "Map",
    "property": [
      {
        "type": "Number",
        "name": "$config.links-state-styling",
        "description": "Just color/defaults vs hover/visited/active"
      }
    ],
    "group": [
      "base"
    ],
    "access": "public",
    "file": {
      "path": "base/_elements.scss",
      "name": "_elements.scss"
    },
    "usedBy": [
      {
        "description": "Change modules $config\n",
        "context": {
          "type": "mixin",
          "name": "set",
          "code": "\n  $config: map.merge($config, $changes) !global;\n",
          "line": {
            "start": 27,
            "end": 29
          }
        }
      },
      {
        "description": "Change modules $config\n",
        "context": {
          "type": "mixin",
          "name": "set",
          "code": "\n  $config: map.merge($config, $changes) !global;\n",
          "line": {
            "start": 27,
            "end": 29
          }
        }
      },
      {
        "description": "Get a config option\n",
        "context": {
          "type": "function",
          "name": "get",
          "code": "\n  @return utils.require-map-get($config, $name, \"element [config]\");\n",
          "line": {
            "start": 36,
            "end": 38
          }
        }
      },
      {
        "description": "Change modules $config\n",
        "context": {
          "type": "mixin",
          "name": "set",
          "code": "\n  $config: map.merge($config, $changes) !global;\n",
          "line": {
            "start": 26,
            "end": 28
          }
        }
      },
      {
        "description": "Change modules $config\n",
        "context": {
          "type": "mixin",
          "name": "set",
          "code": "\n  $config: map.merge($config, $changes) !global;\n",
          "line": {
            "start": 26,
            "end": 28
          }
        }
      },
      {
        "description": "Get a config option\n",
        "context": {
          "type": "function",
          "name": "get",
          "code": "\n  @return utils.require-map-get($config, $name, 'breakpoint [config]');\n",
          "line": {
            "start": 34,
            "end": 36
          }
        }
      },
      {
        "description": "Change modules $config\n",
        "context": {
          "type": "mixin",
          "name": "set",
          "code": "\n  $config: map.merge($config, $changes) !global;\n",
          "line": {
            "start": 96,
            "end": 98
          }
        }
      },
      {
        "description": "Change modules $config\n",
        "context": {
          "type": "mixin",
          "name": "set",
          "code": "\n  $config: map.merge($config, $changes) !global;\n",
          "line": {
            "start": 96,
            "end": 98
          }
        }
      },
      {
        "description": "Get a config option\n",
        "context": {
          "type": "function",
          "name": "get",
          "code": "\n  $value: utils.require-map-get($config, $name, \"button [config]\");\n  @return utils.function-fallback($name, $value, $-fallbacks);\n",
          "line": {
            "start": 105,
            "end": 109
          }
        }
      },
      {
        "description": "Change modules $config\n",
        "context": {
          "type": "mixin",
          "name": "set",
          "code": "\n  $config: map.merge($config, $changes) !global;\n",
          "line": {
            "start": 20,
            "end": 22
          }
        }
      },
      {
        "description": "Change modules $config\n",
        "context": {
          "type": "mixin",
          "name": "set",
          "code": "\n  $config: map.merge($config, $changes) !global;\n",
          "line": {
            "start": 20,
            "end": 22
          }
        }
      },
      {
        "description": "Get a config option\n",
        "context": {
          "type": "function",
          "name": "get",
          "code": "\n  @return utils.require-map-get($config, $name, \"calculate [config]\");\n",
          "line": {
            "start": 28,
            "end": 30
          }
        }
      },
      {
        "description": "Change modules $config\n",
        "context": {
          "type": "mixin",
          "name": "set",
          "code": "\n  $config: map.merge($config, $changes) !global;\n",
          "line": {
            "start": 26,
            "end": 28
          }
        }
      },
      {
        "description": "Change modules $config\n",
        "context": {
          "type": "mixin",
          "name": "set",
          "code": "\n  $config: map.merge($config, $changes) !global;\n",
          "line": {
            "start": 26,
            "end": 28
          }
        }
      },
      {
        "description": "Get a config option\n",
        "context": {
          "type": "function",
          "name": "get",
          "code": "\n  @return utils.require-map-get($config, $name, \"rule [config]\");\n",
          "line": {
            "start": 35,
            "end": 37
          }
        }
      },
      {
        "description": "Change modules $config\n",
        "context": {
          "type": "mixin",
          "name": "set",
          "code": "\n  $config: map.merge($config, $changes) !global;\n",
          "line": {
            "start": 87,
            "end": 89
          }
        }
      },
      {
        "description": "Change modules $config\n",
        "context": {
          "type": "mixin",
          "name": "set",
          "code": "\n  $config: map.merge($config, $changes) !global;\n",
          "line": {
            "start": 87,
            "end": 89
          }
        }
      },
      {
        "description": "Get a config option\n",
        "context": {
          "type": "function",
          "name": "get",
          "code": "\n  @return utils.require-map-get($config, $name, \"element [config]\");\n",
          "line": {
            "start": 95,
            "end": 97
          }
        }
      },
      {
        "description": "Change modules $config\n",
        "context": {
          "type": "mixin",
          "name": "set",
          "code": "\n  $config: map.merge($config, $changes) !global;\n",
          "line": {
            "start": 61,
            "end": 63
          }
        }
      },
      {
        "description": "Change modules $config\n",
        "context": {
          "type": "mixin",
          "name": "set",
          "code": "\n  $config: map.merge($config, $changes) !global;\n",
          "line": {
            "start": 61,
            "end": 63
          }
        }
      },
      {
        "description": "Get a config option\n",
        "context": {
          "type": "function",
          "name": "get",
          "code": "\n  @return utils.require-map-get($config, $name, \"grid [config]\");\n",
          "line": {
            "start": 69,
            "end": 71
          }
        }
      },
      {
        "description": "Change modules $config\n",
        "context": {
          "type": "mixin",
          "name": "set",
          "code": "\n  $config: map.merge($config, $changes) !global;\n",
          "line": {
            "start": 23,
            "end": 25
          }
        }
      },
      {
        "description": "Change modules $config\n",
        "context": {
          "type": "mixin",
          "name": "set",
          "code": "\n  $config: map.merge($config, $changes) !global;\n",
          "line": {
            "start": 23,
            "end": 25
          }
        }
      },
      {
        "description": "Get a config option\n",
        "context": {
          "type": "function",
          "name": "get",
          "code": "\n  @return utils.require-map-get($config, $name, \"units [config]\");\n",
          "line": {
            "start": 32,
            "end": 34
          }
        }
      },
      {
        "description": "Creates the unit classes with all variations (from unit presets)\n- This can be used by itself if not outputing .styles() or if you wanted to change the default prefixes\n",
        "context": {
          "type": "mixin",
          "name": "create-property-classes",
          "code": "\n  // On all sides\n  #{ $prefix } {\n    #{ $property } : units.get(1);\n  }\n  @each $name, $value in units.$config {\n    #{ $prefix }-#{ $name } {\n      #{ $property }: units.get($name);\n    }\n  }\n  // Individual sides\n  @each $side in get(\"sides\") {\n    $full-prop: #{ $property }-#{ $side };\n    #{ $prefix }-#{ $side } {\n      #{ $full-prop }: units.get(1);\n    }\n    @each $name, $value in units.$config {\n      #{ $prefix }-#{ $side }-#{ $name } {\n        #{ $full-prop }: units.get($name);\n      }\n    }\n  }\n",
          "line": {
            "start": 46,
            "end": 68
          }
        }
      },
      {
        "description": "Creates the unit classes with all variations (from unit presets)\n- This can be used by itself if not outputing .styles() or if you wanted to change the default prefixes\n",
        "context": {
          "type": "mixin",
          "name": "create-property-classes",
          "code": "\n  // On all sides\n  #{ $prefix } {\n    #{ $property } : units.get(1);\n  }\n  @each $name, $value in units.$config {\n    #{ $prefix }-#{ $name } {\n      #{ $property }: units.get($name);\n    }\n  }\n  // Individual sides\n  @each $side in get(\"sides\") {\n    $full-prop: #{ $property }-#{ $side };\n    #{ $prefix }-#{ $side } {\n      #{ $full-prop }: units.get(1);\n    }\n    @each $name, $value in units.$config {\n      #{ $prefix }-#{ $side }-#{ $name } {\n        #{ $full-prop }: units.get($name);\n      }\n    }\n  }\n",
          "line": {
            "start": 46,
            "end": 68
          }
        }
      },
      {
        "description": "Change modules $config\n",
        "context": {
          "type": "mixin",
          "name": "set",
          "code": "\n  $config: map.merge($config, $changes) !global;\n",
          "line": {
            "start": 31,
            "end": 33
          }
        }
      },
      {
        "description": "Change modules $config\n",
        "context": {
          "type": "mixin",
          "name": "set",
          "code": "\n  $config: map.merge($config, $changes) !global;\n",
          "line": {
            "start": 31,
            "end": 33
          }
        }
      },
      {
        "description": "Get a config option\n",
        "context": {
          "type": "function",
          "name": "get",
          "code": "\n  @return utils.require-map-get($config, $name, \"layout [config]\");\n",
          "line": {
            "start": 39,
            "end": 41
          }
        }
      },
      {
        "description": "Change modules $config\n",
        "context": {
          "type": "mixin",
          "name": "set",
          "code": "\n  $config: map.merge($config, $changes) !global;\n",
          "line": {
            "start": 25,
            "end": 27
          }
        }
      },
      {
        "description": "Change modules $config\n",
        "context": {
          "type": "mixin",
          "name": "set",
          "code": "\n  $config: map.merge($config, $changes) !global;\n",
          "line": {
            "start": 25,
            "end": 27
          }
        }
      },
      {
        "description": "Get a config option\n",
        "context": {
          "type": "function",
          "name": "get",
          "code": "\n  @return utils.require-map-get($config, $name, \"selector [config]\");\n",
          "line": {
            "start": 34,
            "end": 36
          }
        }
      },
      {
        "description": "Change modules $config\n",
        "context": {
          "type": "mixin",
          "name": "set",
          "code": "\n  $config: map.merge($config, $changes) !global;\n",
          "line": {
            "start": 59,
            "end": 61
          }
        }
      },
      {
        "description": "Change modules $config\n",
        "context": {
          "type": "mixin",
          "name": "set",
          "code": "\n  $config: map.merge($config, $changes) !global;\n",
          "line": {
            "start": 59,
            "end": 61
          }
        }
      },
      {
        "description": "Get a config option\n",
        "context": {
          "type": "function",
          "name": "get",
          "code": "\n  @return utils.require-map-get($config, $name, 'typography [config]');\n",
          "line": {
            "start": 67,
            "end": 69
          }
        }
      },
      {
        "description": "Update the units preset map\n",
        "context": {
          "type": "mixin",
          "name": "set",
          "code": "\n  $config: map.merge($config, $changes) !global;\n",
          "line": {
            "start": 34,
            "end": 36
          }
        }
      },
      {
        "description": "Update the units preset map\n",
        "context": {
          "type": "mixin",
          "name": "set",
          "code": "\n  $config: map.merge($config, $changes) !global;\n",
          "line": {
            "start": 34,
            "end": 36
          }
        }
      },
      {
        "description": "Get a unit by name (preset) or number (multiplier of base)\n",
        "context": {
          "type": "function",
          "name": "get",
          "code": "\n  @if (meta.type-of($value) == string) {\n    @return utils.require-map-get($config, $value, 'unit [config]');\n  }\n  @return get(\"default\") * $value;\n",
          "line": {
            "start": 42,
            "end": 47
          }
        }
      },
      {
        "description": "Change modules $config\n",
        "context": {
          "type": "mixin",
          "name": "set",
          "code": "\n  $config: map.merge($config, $changes) !global;\n",
          "line": {
            "start": 28,
            "end": 30
          }
        }
      },
      {
        "description": "Change modules $config\n",
        "context": {
          "type": "mixin",
          "name": "set",
          "code": "\n  $config: map.merge($config, $changes) !global;\n",
          "line": {
            "start": 28,
            "end": 30
          }
        }
      },
      {
        "description": "Get a config option\n",
        "context": {
          "type": "function",
          "name": "get",
          "code": "\n  @return require-map-get($config, $name, 'utils');\n",
          "line": {
            "start": 37,
            "end": 39
          }
        }
      }
    ]
  },
  {
    "description": "Change modules $config\n",
    "commentRange": {
      "start": 23,
      "end": 26
    },
    "context": {
      "type": "mixin",
      "name": "set",
      "code": "\n  $config: map.merge($config, $changes) !global;\n",
      "line": {
        "start": 27,
        "end": 29
      }
    },
    "parameter": [
      {
        "type": "Map",
        "name": "changes",
        "description": "Map of changes"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "@include module-name.set(( \"property\" : value ));",
        "description": "General example, replace module-name with module's name"
      }
    ],
    "group": [
      "base"
    ],
    "access": "public",
    "require": [
      {
        "type": "variable",
        "name": "config"
      },
      {
        "type": "variable",
        "name": "config"
      }
    ],
    "file": {
      "path": "base/_elements.scss",
      "name": "_elements.scss"
    }
  },
  {
    "description": "Get a config option\n",
    "commentRange": {
      "start": 31,
      "end": 34
    },
    "context": {
      "type": "function",
      "name": "get",
      "code": "\n  @return utils.require-map-get($config, $name, \"element [config]\");\n",
      "line": {
        "start": 36,
        "end": 38
      }
    },
    "parameter": [
      {
        "type": "Map",
        "name": "name",
        "description": "Name of property"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "@include module-name.get(\"property\");",
        "description": "General example, replace module-name with module's name"
      }
    ],
    "group": [
      "base"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "require-map-get"
      },
      {
        "type": "variable",
        "name": "config"
      }
    ],
    "file": {
      "path": "base/_elements.scss",
      "name": "_elements.scss"
    },
    "usedBy": [
      {
        "description": "Prints elements base styles\n",
        "context": {
          "type": "mixin",
          "name": "base-elements-styles",
          "code": "\n\n  @include utils.file-header('base', 'elements');\n\n  *,\n  ::before,\n  ::after {\n    box-sizing: border-box;\n  }\n  html {\n    -webkit-text-size-adjust: 100%;\n    @media (prefers-reduced-motion: no-preference) {\n      scroll-behavior: smooth;\n    }\n  }\n  body {\n    color: color.get('type');\n    background-color: white;\n    font-family: typography.get(\"font-family\");\n    margin: 0;\n    // Note we are using relative units here instead of setting a \n    // pixel base like we use to on the HTML\n    // This will allow the user preference in font size\n    // Useful for accessibility\n    @include typography.size(\"base\");\n    @include breakpoint.embed-for-scripts();\n  }\n  h1, \n  h2, \n  h3, \n  h4, \n  h5, \n  h6, \n  ul, \n  ol, \n  li,\n  pre, \n  code,\n  p { \n    margin: 0;\n    padding: 0;\n    font-size: inherit;\n    font-family: inherit;\n    border-width: 0;\n    border-style: solid;\n    font-weight: inherit;\n  }\n  p {\n    $margin-top: typography.get(\"margin-top\");\n    margin-top: if($margin-top, $margin-top, 0);\n    margin-bottom: typography.get(\"margin-bottom\"); \n  }\n  sub, sup {\n    font-size: 75%;\n    line-height: 0;\n    position: relative;\n    vertical-align: baseline;\n  }\n  small { \n    @include typography.size(\"small\", (\"line-height\" : typography.get(\"line-height-dense\"))); \n  }\n  sub { \n    bottom: -0.25em; \n  }\n  sup { \n    top: -0.5em; \n  }\n  b, \n  strong { \n    font-weight: bold; \n  }\n  code,\n  kbd,\n  samp,\n  pre {\n    font-family: typography.get(\"font-family-monospace\");\n  }\n  hr {\n    height: 0;\n    border: 0;\n    box-sizing: content-box;\n    overflow: visible;\n    margin: element.get(\"margin\") 0;\n    border-bottom: element.get-rule-style();\n  }\n  iframe {\n    border: 0;\n    outline: 0;\n  }\n  figure {\n    margin: 0;\n  }\n  img {\n    display: block;\n    width: auto;\n    height: auto;\n    max-width: 100%;\n    border-style: none;\n  }\n  // Not styling ordered lists because they are used in navigation and other UI components\n  ul { \n    list-style: none; \n  }\n  // Style ordered lists since we don't use them much in the UI components\n  ol {\n    @include element.styles-ordered-list();\n  }\n  \n  a {\n    @if (get(\"links-state-styling\")) {\n      @include element.link();\n    } @else {\n      @include element.link-defaults();\n    }\n  }\n  // button,\n  // [type=\"button\"],\n  // [type=\"reset\"],\n  // [type=\"submit\"] {\n  //   @include button.reset();\n  // }\n  // For accessible tabs\n  [role=\"tab\"] {\n    cursor: pointer;\n  }\n  dt { \n    font-weight: bold;\n  }\n  [hidden], \n  template {\n    display: none;\n  }\n  blockquote {\n    margin: 0;\n  }\n",
          "line": {
            "start": 45,
            "end": 180
          }
        }
      },
      {
        "description": "Prints elements base styles\n",
        "context": {
          "type": "mixin",
          "name": "base-elements-styles",
          "code": "\n\n  @include utils.file-header('base', 'elements');\n\n  *,\n  ::before,\n  ::after {\n    box-sizing: border-box;\n  }\n  html {\n    -webkit-text-size-adjust: 100%;\n    @media (prefers-reduced-motion: no-preference) {\n      scroll-behavior: smooth;\n    }\n  }\n  body {\n    color: color.get('type');\n    background-color: white;\n    font-family: typography.get(\"font-family\");\n    margin: 0;\n    // Note we are using relative units here instead of setting a \n    // pixel base like we use to on the HTML\n    // This will allow the user preference in font size\n    // Useful for accessibility\n    @include typography.size(\"base\");\n    @include breakpoint.embed-for-scripts();\n  }\n  h1, \n  h2, \n  h3, \n  h4, \n  h5, \n  h6, \n  ul, \n  ol, \n  li,\n  pre, \n  code,\n  p { \n    margin: 0;\n    padding: 0;\n    font-size: inherit;\n    font-family: inherit;\n    border-width: 0;\n    border-style: solid;\n    font-weight: inherit;\n  }\n  p {\n    $margin-top: typography.get(\"margin-top\");\n    margin-top: if($margin-top, $margin-top, 0);\n    margin-bottom: typography.get(\"margin-bottom\"); \n  }\n  sub, sup {\n    font-size: 75%;\n    line-height: 0;\n    position: relative;\n    vertical-align: baseline;\n  }\n  small { \n    @include typography.size(\"small\", (\"line-height\" : typography.get(\"line-height-dense\"))); \n  }\n  sub { \n    bottom: -0.25em; \n  }\n  sup { \n    top: -0.5em; \n  }\n  b, \n  strong { \n    font-weight: bold; \n  }\n  code,\n  kbd,\n  samp,\n  pre {\n    font-family: typography.get(\"font-family-monospace\");\n  }\n  hr {\n    height: 0;\n    border: 0;\n    box-sizing: content-box;\n    overflow: visible;\n    margin: element.get(\"margin\") 0;\n    border-bottom: element.get-rule-style();\n  }\n  iframe {\n    border: 0;\n    outline: 0;\n  }\n  figure {\n    margin: 0;\n  }\n  img {\n    display: block;\n    width: auto;\n    height: auto;\n    max-width: 100%;\n    border-style: none;\n  }\n  // Not styling ordered lists because they are used in navigation and other UI components\n  ul { \n    list-style: none; \n  }\n  // Style ordered lists since we don't use them much in the UI components\n  ol {\n    @include element.styles-ordered-list();\n  }\n  \n  a {\n    @if (get(\"links-state-styling\")) {\n      @include element.link();\n    } @else {\n      @include element.link-defaults();\n    }\n  }\n  // button,\n  // [type=\"button\"],\n  // [type=\"reset\"],\n  // [type=\"submit\"] {\n  //   @include button.reset();\n  // }\n  // For accessible tabs\n  [role=\"tab\"] {\n    cursor: pointer;\n  }\n  dt { \n    font-weight: bold;\n  }\n  [hidden], \n  template {\n    display: none;\n  }\n  blockquote {\n    margin: 0;\n  }\n",
          "line": {
            "start": 45,
            "end": 180
          }
        }
      },
      {
        "description": "Prints elements base styles\n",
        "context": {
          "type": "mixin",
          "name": "base-elements-styles",
          "code": "\n\n  @include utils.file-header('base', 'elements');\n\n  *,\n  ::before,\n  ::after {\n    box-sizing: border-box;\n  }\n  html {\n    -webkit-text-size-adjust: 100%;\n    @media (prefers-reduced-motion: no-preference) {\n      scroll-behavior: smooth;\n    }\n  }\n  body {\n    color: color.get('type');\n    background-color: white;\n    font-family: typography.get(\"font-family\");\n    margin: 0;\n    // Note we are using relative units here instead of setting a \n    // pixel base like we use to on the HTML\n    // This will allow the user preference in font size\n    // Useful for accessibility\n    @include typography.size(\"base\");\n    @include breakpoint.embed-for-scripts();\n  }\n  h1, \n  h2, \n  h3, \n  h4, \n  h5, \n  h6, \n  ul, \n  ol, \n  li,\n  pre, \n  code,\n  p { \n    margin: 0;\n    padding: 0;\n    font-size: inherit;\n    font-family: inherit;\n    border-width: 0;\n    border-style: solid;\n    font-weight: inherit;\n  }\n  p {\n    $margin-top: typography.get(\"margin-top\");\n    margin-top: if($margin-top, $margin-top, 0);\n    margin-bottom: typography.get(\"margin-bottom\"); \n  }\n  sub, sup {\n    font-size: 75%;\n    line-height: 0;\n    position: relative;\n    vertical-align: baseline;\n  }\n  small { \n    @include typography.size(\"small\", (\"line-height\" : typography.get(\"line-height-dense\"))); \n  }\n  sub { \n    bottom: -0.25em; \n  }\n  sup { \n    top: -0.5em; \n  }\n  b, \n  strong { \n    font-weight: bold; \n  }\n  code,\n  kbd,\n  samp,\n  pre {\n    font-family: typography.get(\"font-family-monospace\");\n  }\n  hr {\n    height: 0;\n    border: 0;\n    box-sizing: content-box;\n    overflow: visible;\n    margin: element.get(\"margin\") 0;\n    border-bottom: element.get-rule-style();\n  }\n  iframe {\n    border: 0;\n    outline: 0;\n  }\n  figure {\n    margin: 0;\n  }\n  img {\n    display: block;\n    width: auto;\n    height: auto;\n    max-width: 100%;\n    border-style: none;\n  }\n  // Not styling ordered lists because they are used in navigation and other UI components\n  ul { \n    list-style: none; \n  }\n  // Style ordered lists since we don't use them much in the UI components\n  ol {\n    @include element.styles-ordered-list();\n  }\n  \n  a {\n    @if (get(\"links-state-styling\")) {\n      @include element.link();\n    } @else {\n      @include element.link-defaults();\n    }\n  }\n  // button,\n  // [type=\"button\"],\n  // [type=\"reset\"],\n  // [type=\"submit\"] {\n  //   @include button.reset();\n  // }\n  // For accessible tabs\n  [role=\"tab\"] {\n    cursor: pointer;\n  }\n  dt { \n    font-weight: bold;\n  }\n  [hidden], \n  template {\n    display: none;\n  }\n  blockquote {\n    margin: 0;\n  }\n",
          "line": {
            "start": 45,
            "end": 180
          }
        }
      },
      {
        "description": "Prints elements base styles\n",
        "context": {
          "type": "mixin",
          "name": "base-elements-styles",
          "code": "\n\n  @include utils.file-header('base', 'elements');\n\n  *,\n  ::before,\n  ::after {\n    box-sizing: border-box;\n  }\n  html {\n    -webkit-text-size-adjust: 100%;\n    @media (prefers-reduced-motion: no-preference) {\n      scroll-behavior: smooth;\n    }\n  }\n  body {\n    color: color.get('type');\n    background-color: white;\n    font-family: typography.get(\"font-family\");\n    margin: 0;\n    // Note we are using relative units here instead of setting a \n    // pixel base like we use to on the HTML\n    // This will allow the user preference in font size\n    // Useful for accessibility\n    @include typography.size(\"base\");\n    @include breakpoint.embed-for-scripts();\n  }\n  h1, \n  h2, \n  h3, \n  h4, \n  h5, \n  h6, \n  ul, \n  ol, \n  li,\n  pre, \n  code,\n  p { \n    margin: 0;\n    padding: 0;\n    font-size: inherit;\n    font-family: inherit;\n    border-width: 0;\n    border-style: solid;\n    font-weight: inherit;\n  }\n  p {\n    $margin-top: typography.get(\"margin-top\");\n    margin-top: if($margin-top, $margin-top, 0);\n    margin-bottom: typography.get(\"margin-bottom\"); \n  }\n  sub, sup {\n    font-size: 75%;\n    line-height: 0;\n    position: relative;\n    vertical-align: baseline;\n  }\n  small { \n    @include typography.size(\"small\", (\"line-height\" : typography.get(\"line-height-dense\"))); \n  }\n  sub { \n    bottom: -0.25em; \n  }\n  sup { \n    top: -0.5em; \n  }\n  b, \n  strong { \n    font-weight: bold; \n  }\n  code,\n  kbd,\n  samp,\n  pre {\n    font-family: typography.get(\"font-family-monospace\");\n  }\n  hr {\n    height: 0;\n    border: 0;\n    box-sizing: content-box;\n    overflow: visible;\n    margin: element.get(\"margin\") 0;\n    border-bottom: element.get-rule-style();\n  }\n  iframe {\n    border: 0;\n    outline: 0;\n  }\n  figure {\n    margin: 0;\n  }\n  img {\n    display: block;\n    width: auto;\n    height: auto;\n    max-width: 100%;\n    border-style: none;\n  }\n  // Not styling ordered lists because they are used in navigation and other UI components\n  ul { \n    list-style: none; \n  }\n  // Style ordered lists since we don't use them much in the UI components\n  ol {\n    @include element.styles-ordered-list();\n  }\n  \n  a {\n    @if (get(\"links-state-styling\")) {\n      @include element.link();\n    } @else {\n      @include element.link-defaults();\n    }\n  }\n  // button,\n  // [type=\"button\"],\n  // [type=\"reset\"],\n  // [type=\"submit\"] {\n  //   @include button.reset();\n  // }\n  // For accessible tabs\n  [role=\"tab\"] {\n    cursor: pointer;\n  }\n  dt { \n    font-weight: bold;\n  }\n  [hidden], \n  template {\n    display: none;\n  }\n  blockquote {\n    margin: 0;\n  }\n",
          "line": {
            "start": 45,
            "end": 180
          }
        }
      },
      {
        "description": "Prints elements base styles\n",
        "context": {
          "type": "mixin",
          "name": "base-elements-styles",
          "code": "\n\n  @include utils.file-header('base', 'elements');\n\n  *,\n  ::before,\n  ::after {\n    box-sizing: border-box;\n  }\n  html {\n    -webkit-text-size-adjust: 100%;\n    @media (prefers-reduced-motion: no-preference) {\n      scroll-behavior: smooth;\n    }\n  }\n  body {\n    color: color.get('type');\n    background-color: white;\n    font-family: typography.get(\"font-family\");\n    margin: 0;\n    // Note we are using relative units here instead of setting a \n    // pixel base like we use to on the HTML\n    // This will allow the user preference in font size\n    // Useful for accessibility\n    @include typography.size(\"base\");\n    @include breakpoint.embed-for-scripts();\n  }\n  h1, \n  h2, \n  h3, \n  h4, \n  h5, \n  h6, \n  ul, \n  ol, \n  li,\n  pre, \n  code,\n  p { \n    margin: 0;\n    padding: 0;\n    font-size: inherit;\n    font-family: inherit;\n    border-width: 0;\n    border-style: solid;\n    font-weight: inherit;\n  }\n  p {\n    $margin-top: typography.get(\"margin-top\");\n    margin-top: if($margin-top, $margin-top, 0);\n    margin-bottom: typography.get(\"margin-bottom\"); \n  }\n  sub, sup {\n    font-size: 75%;\n    line-height: 0;\n    position: relative;\n    vertical-align: baseline;\n  }\n  small { \n    @include typography.size(\"small\", (\"line-height\" : typography.get(\"line-height-dense\"))); \n  }\n  sub { \n    bottom: -0.25em; \n  }\n  sup { \n    top: -0.5em; \n  }\n  b, \n  strong { \n    font-weight: bold; \n  }\n  code,\n  kbd,\n  samp,\n  pre {\n    font-family: typography.get(\"font-family-monospace\");\n  }\n  hr {\n    height: 0;\n    border: 0;\n    box-sizing: content-box;\n    overflow: visible;\n    margin: element.get(\"margin\") 0;\n    border-bottom: element.get-rule-style();\n  }\n  iframe {\n    border: 0;\n    outline: 0;\n  }\n  figure {\n    margin: 0;\n  }\n  img {\n    display: block;\n    width: auto;\n    height: auto;\n    max-width: 100%;\n    border-style: none;\n  }\n  // Not styling ordered lists because they are used in navigation and other UI components\n  ul { \n    list-style: none; \n  }\n  // Style ordered lists since we don't use them much in the UI components\n  ol {\n    @include element.styles-ordered-list();\n  }\n  \n  a {\n    @if (get(\"links-state-styling\")) {\n      @include element.link();\n    } @else {\n      @include element.link-defaults();\n    }\n  }\n  // button,\n  // [type=\"button\"],\n  // [type=\"reset\"],\n  // [type=\"submit\"] {\n  //   @include button.reset();\n  // }\n  // For accessible tabs\n  [role=\"tab\"] {\n    cursor: pointer;\n  }\n  dt { \n    font-weight: bold;\n  }\n  [hidden], \n  template {\n    display: none;\n  }\n  blockquote {\n    margin: 0;\n  }\n",
          "line": {
            "start": 45,
            "end": 180
          }
        }
      },
      {
        "description": "Prints elements base styles\n",
        "context": {
          "type": "mixin",
          "name": "base-elements-styles",
          "code": "\n\n  @include utils.file-header('base', 'elements');\n\n  *,\n  ::before,\n  ::after {\n    box-sizing: border-box;\n  }\n  html {\n    -webkit-text-size-adjust: 100%;\n    @media (prefers-reduced-motion: no-preference) {\n      scroll-behavior: smooth;\n    }\n  }\n  body {\n    color: color.get('type');\n    background-color: white;\n    font-family: typography.get(\"font-family\");\n    margin: 0;\n    // Note we are using relative units here instead of setting a \n    // pixel base like we use to on the HTML\n    // This will allow the user preference in font size\n    // Useful for accessibility\n    @include typography.size(\"base\");\n    @include breakpoint.embed-for-scripts();\n  }\n  h1, \n  h2, \n  h3, \n  h4, \n  h5, \n  h6, \n  ul, \n  ol, \n  li,\n  pre, \n  code,\n  p { \n    margin: 0;\n    padding: 0;\n    font-size: inherit;\n    font-family: inherit;\n    border-width: 0;\n    border-style: solid;\n    font-weight: inherit;\n  }\n  p {\n    $margin-top: typography.get(\"margin-top\");\n    margin-top: if($margin-top, $margin-top, 0);\n    margin-bottom: typography.get(\"margin-bottom\"); \n  }\n  sub, sup {\n    font-size: 75%;\n    line-height: 0;\n    position: relative;\n    vertical-align: baseline;\n  }\n  small { \n    @include typography.size(\"small\", (\"line-height\" : typography.get(\"line-height-dense\"))); \n  }\n  sub { \n    bottom: -0.25em; \n  }\n  sup { \n    top: -0.5em; \n  }\n  b, \n  strong { \n    font-weight: bold; \n  }\n  code,\n  kbd,\n  samp,\n  pre {\n    font-family: typography.get(\"font-family-monospace\");\n  }\n  hr {\n    height: 0;\n    border: 0;\n    box-sizing: content-box;\n    overflow: visible;\n    margin: element.get(\"margin\") 0;\n    border-bottom: element.get-rule-style();\n  }\n  iframe {\n    border: 0;\n    outline: 0;\n  }\n  figure {\n    margin: 0;\n  }\n  img {\n    display: block;\n    width: auto;\n    height: auto;\n    max-width: 100%;\n    border-style: none;\n  }\n  // Not styling ordered lists because they are used in navigation and other UI components\n  ul { \n    list-style: none; \n  }\n  // Style ordered lists since we don't use them much in the UI components\n  ol {\n    @include element.styles-ordered-list();\n  }\n  \n  a {\n    @if (get(\"links-state-styling\")) {\n      @include element.link();\n    } @else {\n      @include element.link-defaults();\n    }\n  }\n  // button,\n  // [type=\"button\"],\n  // [type=\"reset\"],\n  // [type=\"submit\"] {\n  //   @include button.reset();\n  // }\n  // For accessible tabs\n  [role=\"tab\"] {\n    cursor: pointer;\n  }\n  dt { \n    font-weight: bold;\n  }\n  [hidden], \n  template {\n    display: none;\n  }\n  blockquote {\n    margin: 0;\n  }\n",
          "line": {
            "start": 45,
            "end": 180
          }
        }
      },
      {
        "description": "Prints elements base styles\n",
        "context": {
          "type": "mixin",
          "name": "base-elements-styles",
          "code": "\n\n  @include utils.file-header('base', 'elements');\n\n  *,\n  ::before,\n  ::after {\n    box-sizing: border-box;\n  }\n  html {\n    -webkit-text-size-adjust: 100%;\n    @media (prefers-reduced-motion: no-preference) {\n      scroll-behavior: smooth;\n    }\n  }\n  body {\n    color: color.get('type');\n    background-color: white;\n    font-family: typography.get(\"font-family\");\n    margin: 0;\n    // Note we are using relative units here instead of setting a \n    // pixel base like we use to on the HTML\n    // This will allow the user preference in font size\n    // Useful for accessibility\n    @include typography.size(\"base\");\n    @include breakpoint.embed-for-scripts();\n  }\n  h1, \n  h2, \n  h3, \n  h4, \n  h5, \n  h6, \n  ul, \n  ol, \n  li,\n  pre, \n  code,\n  p { \n    margin: 0;\n    padding: 0;\n    font-size: inherit;\n    font-family: inherit;\n    border-width: 0;\n    border-style: solid;\n    font-weight: inherit;\n  }\n  p {\n    $margin-top: typography.get(\"margin-top\");\n    margin-top: if($margin-top, $margin-top, 0);\n    margin-bottom: typography.get(\"margin-bottom\"); \n  }\n  sub, sup {\n    font-size: 75%;\n    line-height: 0;\n    position: relative;\n    vertical-align: baseline;\n  }\n  small { \n    @include typography.size(\"small\", (\"line-height\" : typography.get(\"line-height-dense\"))); \n  }\n  sub { \n    bottom: -0.25em; \n  }\n  sup { \n    top: -0.5em; \n  }\n  b, \n  strong { \n    font-weight: bold; \n  }\n  code,\n  kbd,\n  samp,\n  pre {\n    font-family: typography.get(\"font-family-monospace\");\n  }\n  hr {\n    height: 0;\n    border: 0;\n    box-sizing: content-box;\n    overflow: visible;\n    margin: element.get(\"margin\") 0;\n    border-bottom: element.get-rule-style();\n  }\n  iframe {\n    border: 0;\n    outline: 0;\n  }\n  figure {\n    margin: 0;\n  }\n  img {\n    display: block;\n    width: auto;\n    height: auto;\n    max-width: 100%;\n    border-style: none;\n  }\n  // Not styling ordered lists because they are used in navigation and other UI components\n  ul { \n    list-style: none; \n  }\n  // Style ordered lists since we don't use them much in the UI components\n  ol {\n    @include element.styles-ordered-list();\n  }\n  \n  a {\n    @if (get(\"links-state-styling\")) {\n      @include element.link();\n    } @else {\n      @include element.link-defaults();\n    }\n  }\n  // button,\n  // [type=\"button\"],\n  // [type=\"reset\"],\n  // [type=\"submit\"] {\n  //   @include button.reset();\n  // }\n  // For accessible tabs\n  [role=\"tab\"] {\n    cursor: pointer;\n  }\n  dt { \n    font-weight: bold;\n  }\n  [hidden], \n  template {\n    display: none;\n  }\n  blockquote {\n    margin: 0;\n  }\n",
          "line": {
            "start": 45,
            "end": 180
          }
        }
      },
      {
        "description": "Prints elements base styles\n",
        "context": {
          "type": "mixin",
          "name": "base-elements-styles",
          "code": "\n\n  @include utils.file-header('base', 'elements');\n\n  *,\n  ::before,\n  ::after {\n    box-sizing: border-box;\n  }\n  html {\n    -webkit-text-size-adjust: 100%;\n    @media (prefers-reduced-motion: no-preference) {\n      scroll-behavior: smooth;\n    }\n  }\n  body {\n    color: color.get('type');\n    background-color: white;\n    font-family: typography.get(\"font-family\");\n    margin: 0;\n    // Note we are using relative units here instead of setting a \n    // pixel base like we use to on the HTML\n    // This will allow the user preference in font size\n    // Useful for accessibility\n    @include typography.size(\"base\");\n    @include breakpoint.embed-for-scripts();\n  }\n  h1, \n  h2, \n  h3, \n  h4, \n  h5, \n  h6, \n  ul, \n  ol, \n  li,\n  pre, \n  code,\n  p { \n    margin: 0;\n    padding: 0;\n    font-size: inherit;\n    font-family: inherit;\n    border-width: 0;\n    border-style: solid;\n    font-weight: inherit;\n  }\n  p {\n    $margin-top: typography.get(\"margin-top\");\n    margin-top: if($margin-top, $margin-top, 0);\n    margin-bottom: typography.get(\"margin-bottom\"); \n  }\n  sub, sup {\n    font-size: 75%;\n    line-height: 0;\n    position: relative;\n    vertical-align: baseline;\n  }\n  small { \n    @include typography.size(\"small\", (\"line-height\" : typography.get(\"line-height-dense\"))); \n  }\n  sub { \n    bottom: -0.25em; \n  }\n  sup { \n    top: -0.5em; \n  }\n  b, \n  strong { \n    font-weight: bold; \n  }\n  code,\n  kbd,\n  samp,\n  pre {\n    font-family: typography.get(\"font-family-monospace\");\n  }\n  hr {\n    height: 0;\n    border: 0;\n    box-sizing: content-box;\n    overflow: visible;\n    margin: element.get(\"margin\") 0;\n    border-bottom: element.get-rule-style();\n  }\n  iframe {\n    border: 0;\n    outline: 0;\n  }\n  figure {\n    margin: 0;\n  }\n  img {\n    display: block;\n    width: auto;\n    height: auto;\n    max-width: 100%;\n    border-style: none;\n  }\n  // Not styling ordered lists because they are used in navigation and other UI components\n  ul { \n    list-style: none; \n  }\n  // Style ordered lists since we don't use them much in the UI components\n  ol {\n    @include element.styles-ordered-list();\n  }\n  \n  a {\n    @if (get(\"links-state-styling\")) {\n      @include element.link();\n    } @else {\n      @include element.link-defaults();\n    }\n  }\n  // button,\n  // [type=\"button\"],\n  // [type=\"reset\"],\n  // [type=\"submit\"] {\n  //   @include button.reset();\n  // }\n  // For accessible tabs\n  [role=\"tab\"] {\n    cursor: pointer;\n  }\n  dt { \n    font-weight: bold;\n  }\n  [hidden], \n  template {\n    display: none;\n  }\n  blockquote {\n    margin: 0;\n  }\n",
          "line": {
            "start": 45,
            "end": 180
          }
        }
      },
      {
        "description": "Prints all Base styles\n",
        "context": {
          "type": "mixin",
          "name": "base-styles",
          "code": "\n  @include utils.file-header(\"base\");\n  @if $includes {\n    @include utils.require-list-contains($-all-includes, $includes);\n    $-all-includes: map.merge($-all-includes, $includes) !global;\n  }\n  @if (map.get($-all-includes, \"normalize\")) {\n    @include normalize.styles;\n  }\n  @if (map.get($-all-includes, \"elements\")) {\n    @include elements.styles;\n  }\n  @if (map.get($-all-includes, \"keyframes\")) {\n    @include keyframes.styles;\n  }\n  @if (map.get( $-all-includes, \"typography\")) {\n    @include typography.styles;\n  }\n  @if (map.get($-all-includes, \"color\")) {\n    @include color.styles;\n  }\n  @if (map.get($-all-includes, \"layout\")) {\n    @include layout.styles;\n  }\n",
          "line": {
            "start": 37,
            "end": 61
          }
        }
      },
      {
        "description": "Prints all Base styles\n",
        "context": {
          "type": "mixin",
          "name": "base-styles",
          "code": "\n  @include utils.file-header(\"base\");\n  @if $includes {\n    @include utils.require-list-contains($-all-includes, $includes);\n    $-all-includes: map.merge($-all-includes, $includes) !global;\n  }\n  @if (map.get($-all-includes, \"normalize\")) {\n    @include normalize.styles;\n  }\n  @if (map.get($-all-includes, \"elements\")) {\n    @include elements.styles;\n  }\n  @if (map.get($-all-includes, \"keyframes\")) {\n    @include keyframes.styles;\n  }\n  @if (map.get( $-all-includes, \"typography\")) {\n    @include typography.styles;\n  }\n  @if (map.get($-all-includes, \"color\")) {\n    @include color.styles;\n  }\n  @if (map.get($-all-includes, \"layout\")) {\n    @include layout.styles;\n  }\n",
          "line": {
            "start": 37,
            "end": 61
          }
        }
      },
      {
        "description": "Prints all Base styles\n",
        "context": {
          "type": "mixin",
          "name": "base-styles",
          "code": "\n  @include utils.file-header(\"base\");\n  @if $includes {\n    @include utils.require-list-contains($-all-includes, $includes);\n    $-all-includes: map.merge($-all-includes, $includes) !global;\n  }\n  @if (map.get($-all-includes, \"normalize\")) {\n    @include normalize.styles;\n  }\n  @if (map.get($-all-includes, \"elements\")) {\n    @include elements.styles;\n  }\n  @if (map.get($-all-includes, \"keyframes\")) {\n    @include keyframes.styles;\n  }\n  @if (map.get( $-all-includes, \"typography\")) {\n    @include typography.styles;\n  }\n  @if (map.get($-all-includes, \"color\")) {\n    @include color.styles;\n  }\n  @if (map.get($-all-includes, \"layout\")) {\n    @include layout.styles;\n  }\n",
          "line": {
            "start": 37,
            "end": 61
          }
        }
      },
      {
        "description": "Prints all Base styles\n",
        "context": {
          "type": "mixin",
          "name": "base-styles",
          "code": "\n  @include utils.file-header(\"base\");\n  @if $includes {\n    @include utils.require-list-contains($-all-includes, $includes);\n    $-all-includes: map.merge($-all-includes, $includes) !global;\n  }\n  @if (map.get($-all-includes, \"normalize\")) {\n    @include normalize.styles;\n  }\n  @if (map.get($-all-includes, \"elements\")) {\n    @include elements.styles;\n  }\n  @if (map.get($-all-includes, \"keyframes\")) {\n    @include keyframes.styles;\n  }\n  @if (map.get( $-all-includes, \"typography\")) {\n    @include typography.styles;\n  }\n  @if (map.get($-all-includes, \"color\")) {\n    @include color.styles;\n  }\n  @if (map.get($-all-includes, \"layout\")) {\n    @include layout.styles;\n  }\n",
          "line": {
            "start": 37,
            "end": 61
          }
        }
      },
      {
        "description": "Prints all Base styles\n",
        "context": {
          "type": "mixin",
          "name": "base-styles",
          "code": "\n  @include utils.file-header(\"base\");\n  @if $includes {\n    @include utils.require-list-contains($-all-includes, $includes);\n    $-all-includes: map.merge($-all-includes, $includes) !global;\n  }\n  @if (map.get($-all-includes, \"normalize\")) {\n    @include normalize.styles;\n  }\n  @if (map.get($-all-includes, \"elements\")) {\n    @include elements.styles;\n  }\n  @if (map.get($-all-includes, \"keyframes\")) {\n    @include keyframes.styles;\n  }\n  @if (map.get( $-all-includes, \"typography\")) {\n    @include typography.styles;\n  }\n  @if (map.get($-all-includes, \"color\")) {\n    @include color.styles;\n  }\n  @if (map.get($-all-includes, \"layout\")) {\n    @include layout.styles;\n  }\n",
          "line": {
            "start": 37,
            "end": 61
          }
        }
      },
      {
        "description": "Prints all Base styles\n",
        "context": {
          "type": "mixin",
          "name": "base-styles",
          "code": "\n  @include utils.file-header(\"base\");\n  @if $includes {\n    @include utils.require-list-contains($-all-includes, $includes);\n    $-all-includes: map.merge($-all-includes, $includes) !global;\n  }\n  @if (map.get($-all-includes, \"normalize\")) {\n    @include normalize.styles;\n  }\n  @if (map.get($-all-includes, \"elements\")) {\n    @include elements.styles;\n  }\n  @if (map.get($-all-includes, \"keyframes\")) {\n    @include keyframes.styles;\n  }\n  @if (map.get( $-all-includes, \"typography\")) {\n    @include typography.styles;\n  }\n  @if (map.get($-all-includes, \"color\")) {\n    @include color.styles;\n  }\n  @if (map.get($-all-includes, \"layout\")) {\n    @include layout.styles;\n  }\n",
          "line": {
            "start": 37,
            "end": 61
          }
        }
      },
      {
        "description": "Prints elements base styles\n",
        "context": {
          "type": "mixin",
          "name": "base-typography-styles",
          "code": "\n\n  @include utils.file-header('base', 'typography');\n\n  $prefix: selector.class(\"type\");\n\n  // Print base typographic sizes\n  @each $size, $values in typography.$sizes {\n    @if (map.get($values, \"base-class\")) {\n      @if (map.get($values, \"base-class-prefixed\")) {\n        #{ $prefix }-#{$size} {\n          @include typography.size($size);\n        }\n      } @else {\n        .#{$size} {\n          @include typography.size($size);\n        }\n      }\n    }\n  }\n",
          "line": {
            "start": 22,
            "end": 42
          }
        }
      },
      {
        "description": "Prints elements base styles\n",
        "context": {
          "type": "mixin",
          "name": "base-typography-styles",
          "code": "\n\n  @include utils.file-header('base', 'typography');\n\n  $prefix: selector.class(\"type\");\n\n  // Print base typographic sizes\n  @each $size, $values in typography.$sizes {\n    @if (map.get($values, \"base-class\")) {\n      @if (map.get($values, \"base-class-prefixed\")) {\n        #{ $prefix }-#{$size} {\n          @include typography.size($size);\n        }\n      } @else {\n        .#{$size} {\n          @include typography.size($size);\n        }\n      }\n    }\n  }\n",
          "line": {
            "start": 22,
            "end": 42
          }
        }
      },
      {
        "description": "Create a media query that matches the max-width for a given size\n",
        "context": {
          "type": "mixin",
          "name": "max",
          "code": "\n  // Adding the small fraction to prevent overlap\n  $max: utils.require-map-get($sizes, $size) - get(\"gap\"); \n  @media screen and (max-width: $max) {\n    @content;\n  }\n",
          "line": {
            "start": 87,
            "end": 93
          }
        }
      },
      {
        "description": "Create a media query that matches the min-width and max-width sizes\n",
        "context": {
          "type": "mixin",
          "name": "min-max",
          "code": "\n  // Adding the small fraction to prevent overlap\n  $min: utils.require-map-get($sizes, $size-min, \"breakpoints\"); \n  $max: utils.require-map-get($sizes, $size-max, \"breakpoints\") - get(\"gap\"); \n  @media screen and (min-width: $min) and (max-width: $max) {\n    @content;\n  }\n",
          "line": {
            "start": 102,
            "end": 109
          }
        }
      },
      {
        "description": "Attaches breakpoints to an element psuedo content for access via script\nUse with ulu/js/breakpoints. Breakpoints always min-width (upwards)\n",
        "context": {
          "type": "mixin",
          "name": "embed-for-scripts",
          "code": "\n  &:before {\n    display: none;\n    content: get(\"null-name\");\n    @each $size, $breakpoint in $sizes {\n      @include min($size) {\n        content: $size;\n      }\n    }\n  }\n",
          "line": {
            "start": 129,
            "end": 139
          }
        }
      },
      {
        "description": "Get a context's value'\n",
        "context": {
          "type": "function",
          "name": "get-context-value",
          "code": "\n  $context: get-context($name);\n  $value: map.get($context, $prop);\n  // Get from pallete by name\n  @if (meta.type-of($value) == \"string\") {\n    $value: get($value);\n  }\n  @return $value;\n",
          "line": {
            "start": 121,
            "end": 129
          }
        }
      },
      {
        "description": "Get a context's value'\n",
        "context": {
          "type": "function",
          "name": "get-context-value",
          "code": "\n  $context: get-context($name);\n  $value: map.get($context, $prop);\n  // Get from pallete by name\n  @if (meta.type-of($value) == \"string\") {\n    $value: get($value);\n  }\n  @return $value;\n",
          "line": {
            "start": 121,
            "end": 129
          }
        }
      },
      {
        "description": "Prints contexts styles\n",
        "context": {
          "type": "mixin",
          "name": "context-styles",
          "code": "\n  $context: get-context($name);\n  background-color: get-context-value($name, \"background-color\");\n  background: map.get($context, \"background\"); // Allow gradients/images\n  background-image: map.get($context, \"background-image\"); // Allow gradients/images\n  color: get-context-value($name, \"color\");\n",
          "line": {
            "start": 134,
            "end": 140
          }
        }
      },
      {
        "description": "Prints contexts styles\n",
        "context": {
          "type": "mixin",
          "name": "context-styles",
          "code": "\n  $context: get-context($name);\n  background-color: get-context-value($name, \"background-color\");\n  background: map.get($context, \"background\"); // Allow gradients/images\n  background-image: map.get($context, \"background-image\"); // Allow gradients/images\n  color: get-context-value($name, \"color\");\n",
          "line": {
            "start": 134,
            "end": 140
          }
        }
      },
      {
        "description": "Lighten a color using the default white by a percentage\n",
        "context": {
          "type": "function",
          "name": "tint",
          "code": "\n  @return mix(get(\"white\"), get($color), $percentage);\n",
          "line": {
            "start": 149,
            "end": 151
          }
        }
      },
      {
        "description": "Lighten a color using the default white by a percentage\n",
        "context": {
          "type": "function",
          "name": "tint",
          "code": "\n  @return mix(get(\"white\"), get($color), $percentage);\n",
          "line": {
            "start": 149,
            "end": 151
          }
        }
      },
      {
        "description": "Darken a color with the default black by a percentage\n",
        "context": {
          "type": "function",
          "name": "shade",
          "code": "\n  @return mix(get(\"black\"), get($color), $percentage);\n",
          "line": {
            "start": 160,
            "end": 162
          }
        }
      },
      {
        "description": "Darken a color with the default black by a percentage\n",
        "context": {
          "type": "function",
          "name": "shade",
          "code": "\n  @return mix(get(\"black\"), get($color), $percentage);\n",
          "line": {
            "start": 160,
            "end": 162
          }
        }
      },
      {
        "description": "Prints all context styles \n",
        "context": {
          "type": "mixin",
          "name": "all-context-styles",
          "code": "\n  $prefix: selector.class(\"color-context\");\n  @each $name, $context in $contexts {\n    @if (not $with-prop or map.get($context, $with-prop)) {\n      #{ $prefix }-#{ $name } {\n        @include context-styles($name);\n      }\n    }\n  }\n",
          "line": {
            "start": 172,
            "end": 181
          }
        }
      },
      {
        "description": "Outputs all color classes\n",
        "context": {
          "type": "mixin",
          "name": "all-color-class-styles",
          "code": "\n  $prefix: selector.class(\"color\");\n  @each $name, $output in $color-classes {\n    @if ($output) {\n      #{ $prefix }-#{ $name } {\n        color: get($name);\n      }\n    }\n  }\n",
          "line": {
            "start": 188,
            "end": 197
          }
        }
      },
      {
        "description": "Prints button component styles\n",
        "context": {
          "type": "mixin",
          "name": "component-button-styles",
          "code": "\n  @include utils.file-header('component', 'button');\n\n  $prefix: selector.class(\"button\");\n  $icon-selector: \"#{ $prefix }--icon\";\n\n  #{ $prefix } {\n    @include button.default();\n  }\n  \n  @each $size, $values in button.$sizes {\n    #{ $prefix }--#{$size} {\n      @include button.size($size);\n    }\n  }\n\n  @each $style, $values in button.$styles {\n    #{ $prefix }--#{$style} {\n      @include button.style($style);\n    }\n  }\n\n  #{ $icon-selector } {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    min-width: 0;\n    max-width: none;\n    border-radius: button.get(\"icon-border-radius\");\n    font-size: button.get(\"icon-font-size\");\n    width: button.get(\"icon-size\");\n    height: button.get(\"icon-size\");\n    padding: 0 !important;\n  }\n\n  @each $size, $values in button.$sizes {\n    $icon-size: map.get($values, \"icon-size\");\n    $icon-font-size: map.get($values, \"icon-font-size\");\n    @if ($icon-size or $icon-font-size) {\n      #{ $prefix }--#{$size}#{ $icon-selector } {\n        width: $icon-size;\n        height: $icon-size;\n        font-size: $icon-font-size;\n      }\n    }\n  }\n",
          "line": {
            "start": 18,
            "end": 64
          }
        }
      },
      {
        "description": "Prints button component styles\n",
        "context": {
          "type": "mixin",
          "name": "component-button-styles",
          "code": "\n  @include utils.file-header('component', 'button');\n\n  $prefix: selector.class(\"button\");\n  $icon-selector: \"#{ $prefix }--icon\";\n\n  #{ $prefix } {\n    @include button.default();\n  }\n  \n  @each $size, $values in button.$sizes {\n    #{ $prefix }--#{$size} {\n      @include button.size($size);\n    }\n  }\n\n  @each $style, $values in button.$styles {\n    #{ $prefix }--#{$style} {\n      @include button.style($style);\n    }\n  }\n\n  #{ $icon-selector } {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    min-width: 0;\n    max-width: none;\n    border-radius: button.get(\"icon-border-radius\");\n    font-size: button.get(\"icon-font-size\");\n    width: button.get(\"icon-size\");\n    height: button.get(\"icon-size\");\n    padding: 0 !important;\n  }\n\n  @each $size, $values in button.$sizes {\n    $icon-size: map.get($values, \"icon-size\");\n    $icon-font-size: map.get($values, \"icon-font-size\");\n    @if ($icon-size or $icon-font-size) {\n      #{ $prefix }--#{$size}#{ $icon-selector } {\n        width: $icon-size;\n        height: $icon-size;\n        font-size: $icon-font-size;\n      }\n    }\n  }\n",
          "line": {
            "start": 18,
            "end": 64
          }
        }
      },
      {
        "description": "Prints button component styles\n",
        "context": {
          "type": "mixin",
          "name": "component-button-styles",
          "code": "\n  @include utils.file-header('component', 'button');\n\n  $prefix: selector.class(\"button\");\n  $icon-selector: \"#{ $prefix }--icon\";\n\n  #{ $prefix } {\n    @include button.default();\n  }\n  \n  @each $size, $values in button.$sizes {\n    #{ $prefix }--#{$size} {\n      @include button.size($size);\n    }\n  }\n\n  @each $style, $values in button.$styles {\n    #{ $prefix }--#{$style} {\n      @include button.style($style);\n    }\n  }\n\n  #{ $icon-selector } {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    min-width: 0;\n    max-width: none;\n    border-radius: button.get(\"icon-border-radius\");\n    font-size: button.get(\"icon-font-size\");\n    width: button.get(\"icon-size\");\n    height: button.get(\"icon-size\");\n    padding: 0 !important;\n  }\n\n  @each $size, $values in button.$sizes {\n    $icon-size: map.get($values, \"icon-size\");\n    $icon-font-size: map.get($values, \"icon-font-size\");\n    @if ($icon-size or $icon-font-size) {\n      #{ $prefix }--#{$size}#{ $icon-selector } {\n        width: $icon-size;\n        height: $icon-size;\n        font-size: $icon-font-size;\n      }\n    }\n  }\n",
          "line": {
            "start": 18,
            "end": 64
          }
        }
      },
      {
        "description": "Prints button component styles\n",
        "context": {
          "type": "mixin",
          "name": "component-button-styles",
          "code": "\n  @include utils.file-header('component', 'button');\n\n  $prefix: selector.class(\"button\");\n  $icon-selector: \"#{ $prefix }--icon\";\n\n  #{ $prefix } {\n    @include button.default();\n  }\n  \n  @each $size, $values in button.$sizes {\n    #{ $prefix }--#{$size} {\n      @include button.size($size);\n    }\n  }\n\n  @each $style, $values in button.$styles {\n    #{ $prefix }--#{$style} {\n      @include button.style($style);\n    }\n  }\n\n  #{ $icon-selector } {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    min-width: 0;\n    max-width: none;\n    border-radius: button.get(\"icon-border-radius\");\n    font-size: button.get(\"icon-font-size\");\n    width: button.get(\"icon-size\");\n    height: button.get(\"icon-size\");\n    padding: 0 !important;\n  }\n\n  @each $size, $values in button.$sizes {\n    $icon-size: map.get($values, \"icon-size\");\n    $icon-font-size: map.get($values, \"icon-font-size\");\n    @if ($icon-size or $icon-font-size) {\n      #{ $prefix }--#{$size}#{ $icon-selector } {\n        width: $icon-size;\n        height: $icon-size;\n        font-size: $icon-font-size;\n      }\n    }\n  }\n",
          "line": {
            "start": 18,
            "end": 64
          }
        }
      },
      {
        "description": "Prints button component styles\n",
        "context": {
          "type": "mixin",
          "name": "component-button-styles",
          "code": "\n  @include utils.file-header('component', 'button');\n\n  $prefix: selector.class(\"button\");\n  $icon-selector: \"#{ $prefix }--icon\";\n\n  #{ $prefix } {\n    @include button.default();\n  }\n  \n  @each $size, $values in button.$sizes {\n    #{ $prefix }--#{$size} {\n      @include button.size($size);\n    }\n  }\n\n  @each $style, $values in button.$styles {\n    #{ $prefix }--#{$style} {\n      @include button.style($style);\n    }\n  }\n\n  #{ $icon-selector } {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    min-width: 0;\n    max-width: none;\n    border-radius: button.get(\"icon-border-radius\");\n    font-size: button.get(\"icon-font-size\");\n    width: button.get(\"icon-size\");\n    height: button.get(\"icon-size\");\n    padding: 0 !important;\n  }\n\n  @each $size, $values in button.$sizes {\n    $icon-size: map.get($values, \"icon-size\");\n    $icon-font-size: map.get($values, \"icon-font-size\");\n    @if ($icon-size or $icon-font-size) {\n      #{ $prefix }--#{$size}#{ $icon-selector } {\n        width: $icon-size;\n        height: $icon-size;\n        font-size: $icon-font-size;\n      }\n    }\n  }\n",
          "line": {
            "start": 18,
            "end": 64
          }
        }
      },
      {
        "description": "Prints button component styles\n",
        "context": {
          "type": "mixin",
          "name": "component-button-styles",
          "code": "\n  @include utils.file-header('component', 'button');\n\n  $prefix: selector.class(\"button\");\n  $icon-selector: \"#{ $prefix }--icon\";\n\n  #{ $prefix } {\n    @include button.default();\n  }\n  \n  @each $size, $values in button.$sizes {\n    #{ $prefix }--#{$size} {\n      @include button.size($size);\n    }\n  }\n\n  @each $style, $values in button.$styles {\n    #{ $prefix }--#{$style} {\n      @include button.style($style);\n    }\n  }\n\n  #{ $icon-selector } {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    min-width: 0;\n    max-width: none;\n    border-radius: button.get(\"icon-border-radius\");\n    font-size: button.get(\"icon-font-size\");\n    width: button.get(\"icon-size\");\n    height: button.get(\"icon-size\");\n    padding: 0 !important;\n  }\n\n  @each $size, $values in button.$sizes {\n    $icon-size: map.get($values, \"icon-size\");\n    $icon-font-size: map.get($values, \"icon-font-size\");\n    @if ($icon-size or $icon-font-size) {\n      #{ $prefix }--#{$size}#{ $icon-selector } {\n        width: $icon-size;\n        height: $icon-size;\n        font-size: $icon-font-size;\n      }\n    }\n  }\n",
          "line": {
            "start": 18,
            "end": 64
          }
        }
      },
      {
        "description": "Prints all Components styles\n",
        "context": {
          "type": "mixin",
          "name": "component-styles",
          "code": "\n  @include utils.file-header(\"components\");\n  @if $includes {\n    @include utils.require-list-contains($-all-includes, $includes);\n    $-all-includes: map.merge($-all-includes, $includes) !global;\n  }\n  @if (map.get($-all-includes, \"links\")) {\n    @include links.styles;\n  }\n  @if (map.get($-all-includes, \"button\")) {\n    @include button.styles;\n  }\n  @if (map.get($-all-includes, \"rule\")) {\n    @include rule.styles;\n  }\n  @if (map.get($-all-includes, \"list-lines\")) {\n    @include list-lines.styles;\n  }\n  @if (map.get($-all-includes, \"list-bullet\")) {\n    @include list-bullet.styles;\n  }\n",
          "line": {
            "start": 33,
            "end": 54
          }
        }
      },
      {
        "description": "Prints all Components styles\n",
        "context": {
          "type": "mixin",
          "name": "component-styles",
          "code": "\n  @include utils.file-header(\"components\");\n  @if $includes {\n    @include utils.require-list-contains($-all-includes, $includes);\n    $-all-includes: map.merge($-all-includes, $includes) !global;\n  }\n  @if (map.get($-all-includes, \"links\")) {\n    @include links.styles;\n  }\n  @if (map.get($-all-includes, \"button\")) {\n    @include button.styles;\n  }\n  @if (map.get($-all-includes, \"rule\")) {\n    @include rule.styles;\n  }\n  @if (map.get($-all-includes, \"list-lines\")) {\n    @include list-lines.styles;\n  }\n  @if (map.get($-all-includes, \"list-bullet\")) {\n    @include list-bullet.styles;\n  }\n",
          "line": {
            "start": 33,
            "end": 54
          }
        }
      },
      {
        "description": "Prints all Components styles\n",
        "context": {
          "type": "mixin",
          "name": "component-styles",
          "code": "\n  @include utils.file-header(\"components\");\n  @if $includes {\n    @include utils.require-list-contains($-all-includes, $includes);\n    $-all-includes: map.merge($-all-includes, $includes) !global;\n  }\n  @if (map.get($-all-includes, \"links\")) {\n    @include links.styles;\n  }\n  @if (map.get($-all-includes, \"button\")) {\n    @include button.styles;\n  }\n  @if (map.get($-all-includes, \"rule\")) {\n    @include rule.styles;\n  }\n  @if (map.get($-all-includes, \"list-lines\")) {\n    @include list-lines.styles;\n  }\n  @if (map.get($-all-includes, \"list-bullet\")) {\n    @include list-bullet.styles;\n  }\n",
          "line": {
            "start": 33,
            "end": 54
          }
        }
      },
      {
        "description": "Prints all Components styles\n",
        "context": {
          "type": "mixin",
          "name": "component-styles",
          "code": "\n  @include utils.file-header(\"components\");\n  @if $includes {\n    @include utils.require-list-contains($-all-includes, $includes);\n    $-all-includes: map.merge($-all-includes, $includes) !global;\n  }\n  @if (map.get($-all-includes, \"links\")) {\n    @include links.styles;\n  }\n  @if (map.get($-all-includes, \"button\")) {\n    @include button.styles;\n  }\n  @if (map.get($-all-includes, \"rule\")) {\n    @include rule.styles;\n  }\n  @if (map.get($-all-includes, \"list-lines\")) {\n    @include list-lines.styles;\n  }\n  @if (map.get($-all-includes, \"list-bullet\")) {\n    @include list-bullet.styles;\n  }\n",
          "line": {
            "start": 33,
            "end": 54
          }
        }
      },
      {
        "description": "Prints all Components styles\n",
        "context": {
          "type": "mixin",
          "name": "component-styles",
          "code": "\n  @include utils.file-header(\"components\");\n  @if $includes {\n    @include utils.require-list-contains($-all-includes, $includes);\n    $-all-includes: map.merge($-all-includes, $includes) !global;\n  }\n  @if (map.get($-all-includes, \"links\")) {\n    @include links.styles;\n  }\n  @if (map.get($-all-includes, \"button\")) {\n    @include button.styles;\n  }\n  @if (map.get($-all-includes, \"rule\")) {\n    @include rule.styles;\n  }\n  @if (map.get($-all-includes, \"list-lines\")) {\n    @include list-lines.styles;\n  }\n  @if (map.get($-all-includes, \"list-bullet\")) {\n    @include list-bullet.styles;\n  }\n",
          "line": {
            "start": 33,
            "end": 54
          }
        }
      },
      {
        "description": "Output styles\n",
        "context": {
          "type": "mixin",
          "name": "styles",
          "code": "\n  $prefix: selector.class(\"list-bullet\");\n  #{ $prefix } {\n    @include element.styles-unordered-list();\n    li {\n      &::marker {\n        color: color.get(\"bullet\");\n      }\n    }\n  }\n",
          "line": {
            "start": 11,
            "end": 21
          }
        }
      },
      {
        "description": "Output styles\n",
        "context": {
          "type": "mixin",
          "name": "styles",
          "code": "\n  $border: element.get-rule-style(\"light\") !default;\n  .list-lines {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n    border-top: $border;\n    >li {\n      border-bottom: $border;\n      padding: 1em 0;\n      >*:last-child {\n        margin-bottom: 0;\n      }\n      &:last-child {\n        border-bottom-width: 0;\n      }\n    }\n  }\n  .list-lines--dense {\n    >li {\n      padding: 0.5em 0;\n      line-height: typography.get(\"line-height-dense\");\n    }\n  }\n",
          "line": {
            "start": 11,
            "end": 35
          }
        }
      },
      {
        "description": "Output styles\n",
        "context": {
          "type": "mixin",
          "name": "styles",
          "code": "\n\n  $class: selector.class(\"rule\");\n  \n  #{ $class } {\n    @include element.rule();\n  }\n  // Output user's styles presets\n  @each $name, $value in element.$rule-styles {\n    #{ $class }--#{ $name } {\n      @include element.rule-style($name);\n    }\n  }\n  // Output user's margin presets\n  @each $name, $value in element.$rule-margins {\n    #{ $class }--margin-#{ $name } {\n      @include element.rule-margin($name);\n    }\n  }\n\n  // Meant to be user by tself without content\n  $short-width: get(\"short-width\");\n  @if ($short-width) {\n    #{ $class }--short {\n      width: $short-width;\n      max-width: 100%;\n      border-bottom-width: get(\"short-border-width\");\n    }\n  }\n",
          "line": {
            "start": 41,
            "end": 70
          }
        }
      },
      {
        "description": "Output styles\n",
        "context": {
          "type": "mixin",
          "name": "styles",
          "code": "\n\n  $class: selector.class(\"rule\");\n  \n  #{ $class } {\n    @include element.rule();\n  }\n  // Output user's styles presets\n  @each $name, $value in element.$rule-styles {\n    #{ $class }--#{ $name } {\n      @include element.rule-style($name);\n    }\n  }\n  // Output user's margin presets\n  @each $name, $value in element.$rule-margins {\n    #{ $class }--margin-#{ $name } {\n      @include element.rule-margin($name);\n    }\n  }\n\n  // Meant to be user by tself without content\n  $short-width: get(\"short-width\");\n  @if ($short-width) {\n    #{ $class }--short {\n      width: $short-width;\n      max-width: 100%;\n      border-bottom-width: get(\"short-border-width\");\n    }\n  }\n",
          "line": {
            "start": 41,
            "end": 70
          }
        }
      },
      {
        "description": "Print link styles\n",
        "context": {
          "type": "mixin",
          "name": "link",
          "code": "\n  color: color.get(\"link\");\n  text-decoration: get(\"link-text-decoration\");\n  text-decoration-style: get(\"link-text-decoration-style\");\n  text-decoration-color: get(\"link-text-decoration-color\");\n  text-decoration-thickness: get(\"link-text-decoration-thickness\");\n  &:hover {\n    color: color.get(\"link:hover\");\n    text-decoration-style: get(\"link-text-decoration-style-hover\");\n    text-decoration-color: get(\"link-text-decoration-color-hover\");\n  }\n  @if ($visited) {\n    &:visited {\n      color: color.get(\"link:visited\");\n    }\n  }\n  @if ($active) {\n    &:active {\n      color: color.get(\"link:active\");\n    }\n  }\n",
          "line": {
            "start": 150,
            "end": 171
          }
        }
      },
      {
        "description": "Print link styles\n",
        "context": {
          "type": "mixin",
          "name": "link",
          "code": "\n  color: color.get(\"link\");\n  text-decoration: get(\"link-text-decoration\");\n  text-decoration-style: get(\"link-text-decoration-style\");\n  text-decoration-color: get(\"link-text-decoration-color\");\n  text-decoration-thickness: get(\"link-text-decoration-thickness\");\n  &:hover {\n    color: color.get(\"link:hover\");\n    text-decoration-style: get(\"link-text-decoration-style-hover\");\n    text-decoration-color: get(\"link-text-decoration-color-hover\");\n  }\n  @if ($visited) {\n    &:visited {\n      color: color.get(\"link:visited\");\n    }\n  }\n  @if ($active) {\n    &:active {\n      color: color.get(\"link:active\");\n    }\n  }\n",
          "line": {
            "start": 150,
            "end": 171
          }
        }
      },
      {
        "description": "Print link styles\n",
        "context": {
          "type": "mixin",
          "name": "link",
          "code": "\n  color: color.get(\"link\");\n  text-decoration: get(\"link-text-decoration\");\n  text-decoration-style: get(\"link-text-decoration-style\");\n  text-decoration-color: get(\"link-text-decoration-color\");\n  text-decoration-thickness: get(\"link-text-decoration-thickness\");\n  &:hover {\n    color: color.get(\"link:hover\");\n    text-decoration-style: get(\"link-text-decoration-style-hover\");\n    text-decoration-color: get(\"link-text-decoration-color-hover\");\n  }\n  @if ($visited) {\n    &:visited {\n      color: color.get(\"link:visited\");\n    }\n  }\n  @if ($active) {\n    &:active {\n      color: color.get(\"link:active\");\n    }\n  }\n",
          "line": {
            "start": 150,
            "end": 171
          }
        }
      },
      {
        "description": "Print link styles\n",
        "context": {
          "type": "mixin",
          "name": "link",
          "code": "\n  color: color.get(\"link\");\n  text-decoration: get(\"link-text-decoration\");\n  text-decoration-style: get(\"link-text-decoration-style\");\n  text-decoration-color: get(\"link-text-decoration-color\");\n  text-decoration-thickness: get(\"link-text-decoration-thickness\");\n  &:hover {\n    color: color.get(\"link:hover\");\n    text-decoration-style: get(\"link-text-decoration-style-hover\");\n    text-decoration-color: get(\"link-text-decoration-color-hover\");\n  }\n  @if ($visited) {\n    &:visited {\n      color: color.get(\"link:visited\");\n    }\n  }\n  @if ($active) {\n    &:active {\n      color: color.get(\"link:active\");\n    }\n  }\n",
          "line": {
            "start": 150,
            "end": 171
          }
        }
      },
      {
        "description": "Print link styles\n",
        "context": {
          "type": "mixin",
          "name": "link",
          "code": "\n  color: color.get(\"link\");\n  text-decoration: get(\"link-text-decoration\");\n  text-decoration-style: get(\"link-text-decoration-style\");\n  text-decoration-color: get(\"link-text-decoration-color\");\n  text-decoration-thickness: get(\"link-text-decoration-thickness\");\n  &:hover {\n    color: color.get(\"link:hover\");\n    text-decoration-style: get(\"link-text-decoration-style-hover\");\n    text-decoration-color: get(\"link-text-decoration-color-hover\");\n  }\n  @if ($visited) {\n    &:visited {\n      color: color.get(\"link:visited\");\n    }\n  }\n  @if ($active) {\n    &:active {\n      color: color.get(\"link:active\");\n    }\n  }\n",
          "line": {
            "start": 150,
            "end": 171
          }
        }
      },
      {
        "description": "Print link styles\n",
        "context": {
          "type": "mixin",
          "name": "link",
          "code": "\n  color: color.get(\"link\");\n  text-decoration: get(\"link-text-decoration\");\n  text-decoration-style: get(\"link-text-decoration-style\");\n  text-decoration-color: get(\"link-text-decoration-color\");\n  text-decoration-thickness: get(\"link-text-decoration-thickness\");\n  &:hover {\n    color: color.get(\"link:hover\");\n    text-decoration-style: get(\"link-text-decoration-style-hover\");\n    text-decoration-color: get(\"link-text-decoration-color-hover\");\n  }\n  @if ($visited) {\n    &:visited {\n      color: color.get(\"link:visited\");\n    }\n  }\n  @if ($active) {\n    &:active {\n      color: color.get(\"link:active\");\n    }\n  }\n",
          "line": {
            "start": 150,
            "end": 171
          }
        }
      },
      {
        "description": "Print link styles\n",
        "context": {
          "type": "mixin",
          "name": "link",
          "code": "\n  color: color.get(\"link\");\n  text-decoration: get(\"link-text-decoration\");\n  text-decoration-style: get(\"link-text-decoration-style\");\n  text-decoration-color: get(\"link-text-decoration-color\");\n  text-decoration-thickness: get(\"link-text-decoration-thickness\");\n  &:hover {\n    color: color.get(\"link:hover\");\n    text-decoration-style: get(\"link-text-decoration-style-hover\");\n    text-decoration-color: get(\"link-text-decoration-color-hover\");\n  }\n  @if ($visited) {\n    &:visited {\n      color: color.get(\"link:visited\");\n    }\n  }\n  @if ($active) {\n    &:active {\n      color: color.get(\"link:active\");\n    }\n  }\n",
          "line": {
            "start": 150,
            "end": 171
          }
        }
      },
      {
        "description": "Print link styles\n",
        "context": {
          "type": "mixin",
          "name": "link",
          "code": "\n  color: color.get(\"link\");\n  text-decoration: get(\"link-text-decoration\");\n  text-decoration-style: get(\"link-text-decoration-style\");\n  text-decoration-color: get(\"link-text-decoration-color\");\n  text-decoration-thickness: get(\"link-text-decoration-thickness\");\n  &:hover {\n    color: color.get(\"link:hover\");\n    text-decoration-style: get(\"link-text-decoration-style-hover\");\n    text-decoration-color: get(\"link-text-decoration-color-hover\");\n  }\n  @if ($visited) {\n    &:visited {\n      color: color.get(\"link:visited\");\n    }\n  }\n  @if ($active) {\n    &:active {\n      color: color.get(\"link:active\");\n    }\n  }\n",
          "line": {
            "start": 150,
            "end": 171
          }
        }
      },
      {
        "description": "Print link styles\n",
        "context": {
          "type": "mixin",
          "name": "link",
          "code": "\n  color: color.get(\"link\");\n  text-decoration: get(\"link-text-decoration\");\n  text-decoration-style: get(\"link-text-decoration-style\");\n  text-decoration-color: get(\"link-text-decoration-color\");\n  text-decoration-thickness: get(\"link-text-decoration-thickness\");\n  &:hover {\n    color: color.get(\"link:hover\");\n    text-decoration-style: get(\"link-text-decoration-style-hover\");\n    text-decoration-color: get(\"link-text-decoration-color-hover\");\n  }\n  @if ($visited) {\n    &:visited {\n      color: color.get(\"link:visited\");\n    }\n  }\n  @if ($active) {\n    &:active {\n      color: color.get(\"link:active\");\n    }\n  }\n",
          "line": {
            "start": 150,
            "end": 171
          }
        }
      },
      {
        "description": "Print link styles\n",
        "context": {
          "type": "mixin",
          "name": "link",
          "code": "\n  color: color.get(\"link\");\n  text-decoration: get(\"link-text-decoration\");\n  text-decoration-style: get(\"link-text-decoration-style\");\n  text-decoration-color: get(\"link-text-decoration-color\");\n  text-decoration-thickness: get(\"link-text-decoration-thickness\");\n  &:hover {\n    color: color.get(\"link:hover\");\n    text-decoration-style: get(\"link-text-decoration-style-hover\");\n    text-decoration-color: get(\"link-text-decoration-color-hover\");\n  }\n  @if ($visited) {\n    &:visited {\n      color: color.get(\"link:visited\");\n    }\n  }\n  @if ($active) {\n    &:active {\n      color: color.get(\"link:active\");\n    }\n  }\n",
          "line": {
            "start": 150,
            "end": 171
          }
        }
      },
      {
        "description": "Print the defautl link styling (no hover and focus styles)\n",
        "context": {
          "type": "mixin",
          "name": "link-defaults",
          "code": "\n  color: color.get(\"link\");\n  text-decoration: get(\"link-text-decoration-default\");\n",
          "line": {
            "start": 175,
            "end": 178
          }
        }
      },
      {
        "description": "Print the defautl link styling (no hover and focus styles)\n",
        "context": {
          "type": "mixin",
          "name": "link-defaults",
          "code": "\n  color: color.get(\"link\");\n  text-decoration: get(\"link-text-decoration-default\");\n",
          "line": {
            "start": 175,
            "end": 178
          }
        }
      },
      {
        "description": "Print the ordered list items styling\n",
        "context": {
          "type": "mixin",
          "name": "styles-ordered-list",
          "code": "\n  margin-bottom: get(\"margin\");\n  list-style: get(\"ol-list-style-type\") outside;\n  li {\n    margin-bottom: get(\"margin-small\");\n    margin-left: 1em;\n  }\n  > li {\n    &::marker {\n      color: color.get($bullet-color);\n    }\n  }\n  ol {\n    margin: get(\"margin-small\") 0 0 get(\"margin-small\");\n    list-style: get(\"ol-list-style-type-2\");\n    ol { \n      list-style-type: get(\"ol-list-style-type-3\");\n    }\n  }\n",
          "line": {
            "start": 183,
            "end": 202
          }
        }
      },
      {
        "description": "Print the ordered list items styling\n",
        "context": {
          "type": "mixin",
          "name": "styles-ordered-list",
          "code": "\n  margin-bottom: get(\"margin\");\n  list-style: get(\"ol-list-style-type\") outside;\n  li {\n    margin-bottom: get(\"margin-small\");\n    margin-left: 1em;\n  }\n  > li {\n    &::marker {\n      color: color.get($bullet-color);\n    }\n  }\n  ol {\n    margin: get(\"margin-small\") 0 0 get(\"margin-small\");\n    list-style: get(\"ol-list-style-type-2\");\n    ol { \n      list-style-type: get(\"ol-list-style-type-3\");\n    }\n  }\n",
          "line": {
            "start": 183,
            "end": 202
          }
        }
      },
      {
        "description": "Print the ordered list items styling\n",
        "context": {
          "type": "mixin",
          "name": "styles-ordered-list",
          "code": "\n  margin-bottom: get(\"margin\");\n  list-style: get(\"ol-list-style-type\") outside;\n  li {\n    margin-bottom: get(\"margin-small\");\n    margin-left: 1em;\n  }\n  > li {\n    &::marker {\n      color: color.get($bullet-color);\n    }\n  }\n  ol {\n    margin: get(\"margin-small\") 0 0 get(\"margin-small\");\n    list-style: get(\"ol-list-style-type-2\");\n    ol { \n      list-style-type: get(\"ol-list-style-type-3\");\n    }\n  }\n",
          "line": {
            "start": 183,
            "end": 202
          }
        }
      },
      {
        "description": "Print the ordered list items styling\n",
        "context": {
          "type": "mixin",
          "name": "styles-ordered-list",
          "code": "\n  margin-bottom: get(\"margin\");\n  list-style: get(\"ol-list-style-type\") outside;\n  li {\n    margin-bottom: get(\"margin-small\");\n    margin-left: 1em;\n  }\n  > li {\n    &::marker {\n      color: color.get($bullet-color);\n    }\n  }\n  ol {\n    margin: get(\"margin-small\") 0 0 get(\"margin-small\");\n    list-style: get(\"ol-list-style-type-2\");\n    ol { \n      list-style-type: get(\"ol-list-style-type-3\");\n    }\n  }\n",
          "line": {
            "start": 183,
            "end": 202
          }
        }
      },
      {
        "description": "Print the ordered list items styling\n",
        "context": {
          "type": "mixin",
          "name": "styles-ordered-list",
          "code": "\n  margin-bottom: get(\"margin\");\n  list-style: get(\"ol-list-style-type\") outside;\n  li {\n    margin-bottom: get(\"margin-small\");\n    margin-left: 1em;\n  }\n  > li {\n    &::marker {\n      color: color.get($bullet-color);\n    }\n  }\n  ol {\n    margin: get(\"margin-small\") 0 0 get(\"margin-small\");\n    list-style: get(\"ol-list-style-type-2\");\n    ol { \n      list-style-type: get(\"ol-list-style-type-3\");\n    }\n  }\n",
          "line": {
            "start": 183,
            "end": 202
          }
        }
      },
      {
        "description": "Print the ordered list items styling\n",
        "context": {
          "type": "mixin",
          "name": "styles-ordered-list",
          "code": "\n  margin-bottom: get(\"margin\");\n  list-style: get(\"ol-list-style-type\") outside;\n  li {\n    margin-bottom: get(\"margin-small\");\n    margin-left: 1em;\n  }\n  > li {\n    &::marker {\n      color: color.get($bullet-color);\n    }\n  }\n  ol {\n    margin: get(\"margin-small\") 0 0 get(\"margin-small\");\n    list-style: get(\"ol-list-style-type-2\");\n    ol { \n      list-style-type: get(\"ol-list-style-type-3\");\n    }\n  }\n",
          "line": {
            "start": 183,
            "end": 202
          }
        }
      },
      {
        "description": "Print the ordered list items styling\n",
        "context": {
          "type": "mixin",
          "name": "styles-ordered-list",
          "code": "\n  margin-bottom: get(\"margin\");\n  list-style: get(\"ol-list-style-type\") outside;\n  li {\n    margin-bottom: get(\"margin-small\");\n    margin-left: 1em;\n  }\n  > li {\n    &::marker {\n      color: color.get($bullet-color);\n    }\n  }\n  ol {\n    margin: get(\"margin-small\") 0 0 get(\"margin-small\");\n    list-style: get(\"ol-list-style-type-2\");\n    ol { \n      list-style-type: get(\"ol-list-style-type-3\");\n    }\n  }\n",
          "line": {
            "start": 183,
            "end": 202
          }
        }
      },
      {
        "description": "Print the ordered list items styling\n",
        "context": {
          "type": "mixin",
          "name": "styles-ordered-list",
          "code": "\n  margin-bottom: get(\"margin\");\n  list-style: get(\"ol-list-style-type\") outside;\n  li {\n    margin-bottom: get(\"margin-small\");\n    margin-left: 1em;\n  }\n  > li {\n    &::marker {\n      color: color.get($bullet-color);\n    }\n  }\n  ol {\n    margin: get(\"margin-small\") 0 0 get(\"margin-small\");\n    list-style: get(\"ol-list-style-type-2\");\n    ol { \n      list-style-type: get(\"ol-list-style-type-3\");\n    }\n  }\n",
          "line": {
            "start": 183,
            "end": 202
          }
        }
      },
      {
        "description": "Print the unordered list items styling\n",
        "context": {
          "type": "mixin",
          "name": "styles-unordered-list",
          "code": "\n  list-style: get(\"ul-list-style-type\") outside;\n  > li {\n    margin-left: 1.5em;\n    margin-bottom: get(\"margin-small\");\n    &::marker {\n      color: color.get($bullet-color);\n    }\n  }\n  ul {\n    list-style-type: get(\"ul-list-style-type-2\");\n  }\n   ul ul {\n    list-style-type: get(\"ul-list-style-type-3\");\n  }\n",
          "line": {
            "start": 207,
            "end": 222
          }
        }
      },
      {
        "description": "Print the unordered list items styling\n",
        "context": {
          "type": "mixin",
          "name": "styles-unordered-list",
          "code": "\n  list-style: get(\"ul-list-style-type\") outside;\n  > li {\n    margin-left: 1.5em;\n    margin-bottom: get(\"margin-small\");\n    &::marker {\n      color: color.get($bullet-color);\n    }\n  }\n  ul {\n    list-style-type: get(\"ul-list-style-type-2\");\n  }\n   ul ul {\n    list-style-type: get(\"ul-list-style-type-3\");\n  }\n",
          "line": {
            "start": 207,
            "end": 222
          }
        }
      },
      {
        "description": "Print the unordered list items styling\n",
        "context": {
          "type": "mixin",
          "name": "styles-unordered-list",
          "code": "\n  list-style: get(\"ul-list-style-type\") outside;\n  > li {\n    margin-left: 1.5em;\n    margin-bottom: get(\"margin-small\");\n    &::marker {\n      color: color.get($bullet-color);\n    }\n  }\n  ul {\n    list-style-type: get(\"ul-list-style-type-2\");\n  }\n   ul ul {\n    list-style-type: get(\"ul-list-style-type-3\");\n  }\n",
          "line": {
            "start": 207,
            "end": 222
          }
        }
      },
      {
        "description": "Print the unordered list items styling\n",
        "context": {
          "type": "mixin",
          "name": "styles-unordered-list",
          "code": "\n  list-style: get(\"ul-list-style-type\") outside;\n  > li {\n    margin-left: 1.5em;\n    margin-bottom: get(\"margin-small\");\n    &::marker {\n      color: color.get($bullet-color);\n    }\n  }\n  ul {\n    list-style-type: get(\"ul-list-style-type-2\");\n  }\n   ul ul {\n    list-style-type: get(\"ul-list-style-type-3\");\n  }\n",
          "line": {
            "start": 207,
            "end": 222
          }
        }
      },
      {
        "description": "Print the unordered list items styling\n",
        "context": {
          "type": "mixin",
          "name": "styles-unordered-list",
          "code": "\n  list-style: get(\"ul-list-style-type\") outside;\n  > li {\n    margin-left: 1.5em;\n    margin-bottom: get(\"margin-small\");\n    &::marker {\n      color: color.get($bullet-color);\n    }\n  }\n  ul {\n    list-style-type: get(\"ul-list-style-type-2\");\n  }\n   ul ul {\n    list-style-type: get(\"ul-list-style-type-3\");\n  }\n",
          "line": {
            "start": 207,
            "end": 222
          }
        }
      },
      {
        "description": "Creates grid css (variation of original data-grid)\n",
        "context": {
          "type": "mixin",
          "name": "create",
          "code": "\n  $attribute-item: \"#{ $attribute }-item\";\n  $select-grid: '[#{ $attribute }*=\"columns: #{ $columns }\"]';\n  $select-item: '[#{ $attribute-item }]';\n  $select-rule-col: \":before\";\n  $select-rule-row: \":after\";\n  // These through off syntax highlighting when inside interpolation\n  $position-class-column-first: get(\"position-class-column-first\");\n  $position-class-column-last: get(\"position-class-column-last\");\n  $position-class-row-first: get(\"position-class-row-first\");\n  $position-class-row-last: get(\"position-class-row-last\");\n\n  #{ $select-grid } {\n    @include layout.clearfix(); // For legacy browsers\n\n    // Ensure empty elements still take up space in layout\n    > #{ $select-item } {\n      min-height: 1px; \n      width: 100%;\n    }\n    // This is for value of true and also covers all options below\n    &#{'[#{ $attribute }*=\"gutters-row:\"]'} { \n      > #{ $select-item } {\n        padding-top:  $gutter;\n        padding-bottom: $gutter;\n      }\n    }\n    &#{'[#{ $attribute }*=\"gutters-row: top\"]'} { \n      > #{ $select-item } {\n        &.#{ $position-class-row-last } {\n          padding-bottom: 0;\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"gutters-row: bottom\"]'} { \n      > #{ $select-item } {\n        &.#{ $position-class-row-first } {\n          padding-top: 0;\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"gutters-row: fit\"]'} { \n      margin-top: -$gutter;\n      margin-bottom: -$gutter;\n    }\n    // Rules: Row\n    &#{'[#{ $attribute }*=\"rules-row:\"]'} { \n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          position: absolute;\n          left: 0;\n          right: 0;\n          height: $rule-size;\n          background: color.get($rule-color);\n        }\n      }\n    }\n    // Rules: Applies to both column and row\n    &#{'[#{ $attribute }*=\"rules\"]'} { \n      > #{ $select-item } {\n        position: relative;\n      }\n    }\n    // Rules: Column\n    &#{'[#{ $attribute }*=\"rules-column:\"]'} { \n      > #{ $select-item } {\n        &#{ $select-rule-col } {\n          position: absolute;\n          top: 0;\n          bottom: 0;\n          width: $rule-size;\n          background: color.get($rule-color);\n        }\n      }\n    }\n    // Options for the left or right\n    @include -create-rule-col-position(\n      $position: \"left\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-col: $select-rule-col, \n      $end-class: $position-class-column-first\n    );\n    @include -create-rule-col-position(\n      $position: \"right\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-col: $select-rule-col, \n      $end-class: $position-class-column-last\n    );\n    // Override first or last column removing the rule using matching specificity\n    &#{'[#{ $attribute }*=\"rules-column:\"][#{ $attribute }*=\"rules-column-ends: true\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-col } {\n          content: '';\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"rules-column-align: gutter\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-col } {\n          top: $gutter;\n          bottom: $gutter;\n        }\n      }\n    }\n    // Options for the left or right\n    @include -create-rule-row-position(\n      $position: \"top\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-row: $select-rule-row, \n      $between: false\n    );\n    @include -create-rule-row-position(\n      $position: \"bottom\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-row: $select-rule-row, \n      $between: false\n    );\n\n    &#{'[#{ $attribute }*=\"rules-row: between\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          bottom: math.floor(math.div($rule-size, 2)) * -1;\n        }\n        // For removing the rule per row (via equal heights for now)\n        &.#{ $position-class-row-last } {\n          &#{ $select-rule-row } {\n            content: none;\n          }\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"rules-row-align: gutter\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          left: $gutter;\n          right: $gutter;\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"rules-row-persist: true\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          content: '';\n        }\n      }\n    }\n  }\n\n  @include breakpoint.min($breakpoint) {\n    // Select the attribute with matching column count\n    #{ $select-grid } {\n      // Defaults for grid an item\n      display: flex;\n      flex-flow: row wrap;\n      align-items: stretch;\n      margin-left: -$gutter;\n      margin-right: -$gutter;\n\n      > #{ $select-item } {\n        float: left; // Fallback\n        padding-left: $gutter;\n        padding-right: $gutter;\n      }\n      // Alignment options\n      &#{'[#{ $attribute }*=\"align: center\"]'} { \n        align-items: center;  \n      }\n      &#{'[#{ $attribute }*=\"align: end\"]'} { \n        align-items: flex-end;\n      }\n      &#{'[#{ $attribute }*=\"align: start\"]'} { \n        align-items: flex-start; \n      }\n      // Alignment of the children when using stretch\n      // - There is no stetch-start (that's defualt);\n      // - There is no stetch-middle (that's covered by stretch-);\n      &#{'[#{ $attribute }*=\"align: stretch-\"]'} { \n        // set the child to display as a single flex item\n        > #{ $select-item } {\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n        }\n      }\n      &#{'[#{ $attribute }*=\"align: stretch-end\"]'} { \n        > #{ $select-item } {\n          justify-content: flex-end;\n        }\n      }\n      // Other options\n      &#{'[#{ $attribute }*=\"gutters: false\"]'} { \n        margin-left: 0;\n        margin-right: 0;\n        > #{ $select-item } {\n          padding-left: 0;\n          padding-right: 0;\n        }\n      }\n      // Activate Rules\n      &#{'[#{ $attribute }*=\"rules-column:\"]'} {\n        > #{ $select-item } {\n          &#{ $select-rule-col } {\n            content: '';\n          }\n        }\n      }\n      &#{'[#{ $attribute }*=\"rules-row:\"]'} {\n        > #{ $select-item } {\n          &#{ $select-rule-row } {\n            content: '';\n          }\n        }\n      }\n      // Generated props for item\n      @include -create-column-widths(\n        $columns: $columns,\n        $attribute-item: $attribute-item,\n        $suffix: ''\n      );\n      @include -create-column-offsets(\n        $columns: $columns,\n        $attribute-item: $attribute-item,\n        $suffix: ''\n      );\n    }\n  }\n\n  @if $extra-breakpoints {\n    @each $name, $options in $extra-breakpoints {\n      $g: map.get($options, \"gutter\");\n      @include -create-extra-breakpoint(\n        $name: $name, \n        $breakpoint: map.get($options, \"breakpoint\"),\n        $gutter: if($g, $g, $gutter),\n        $columns: $columns,\n        $attribute-item: $attribute-item,\n        $select-grid: $select-grid,\n        $select-item: $select-item\n      );\n    }\n  }\n  @if $extra-rule-styles {\n    @each $name, $options in $extra-rule-styles {\n      $color: utils.require-map-get($options, \"color\", \"grid [extra rule style]\");\n      $size: utils.require-map-get($options, \"size\", \"grid [extra rule style]\");\n      #{ $select-grid } {\n\n        &#{'[#{_attr}*=\"rules-column-style: #{ $name }\"]'} {\n          > #{ $select-item } {\n            &#{ $select-rule-col } {\n              background-color: color.get($color);\n              width: $size;\n            }\n          }\n          @include -create-rule-col-position(\n            $position: \"left\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-col: $select-rule-col, \n            $end-class: false\n          );\n          @include -create-rule-col-position(\n            $position: \"right\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-col: $select-rule-col, \n            $end-class: false\n          );\n        }\n        &#{'[#{_attr}*=\"rules-row-style: #{ $name }\"]'} {\n          > #{ $select-item } {\n            &#{ $select-rule-row } {\n              background-color: $color;\n              height: $size;\n            }\n          }\n          @include -create-rule-row-position(\n            $position: \"top\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-row: $select-rule-row, \n            $between: false\n          );\n          @include -create-rule-row-position(\n            $position: \"bottom\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-row: $select-rule-row, \n            $between: false\n          );\n          @include -create-rule-row-position(\n            $position: \"bottom\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-row: $select-rule-row, \n            $between: true\n          );\n        }\n      }\n    }\n  }\n",
          "line": {
            "start": 83,
            "end": 407
          }
        }
      },
      {
        "description": "Creates grid css (variation of original data-grid)\n",
        "context": {
          "type": "mixin",
          "name": "create",
          "code": "\n  $attribute-item: \"#{ $attribute }-item\";\n  $select-grid: '[#{ $attribute }*=\"columns: #{ $columns }\"]';\n  $select-item: '[#{ $attribute-item }]';\n  $select-rule-col: \":before\";\n  $select-rule-row: \":after\";\n  // These through off syntax highlighting when inside interpolation\n  $position-class-column-first: get(\"position-class-column-first\");\n  $position-class-column-last: get(\"position-class-column-last\");\n  $position-class-row-first: get(\"position-class-row-first\");\n  $position-class-row-last: get(\"position-class-row-last\");\n\n  #{ $select-grid } {\n    @include layout.clearfix(); // For legacy browsers\n\n    // Ensure empty elements still take up space in layout\n    > #{ $select-item } {\n      min-height: 1px; \n      width: 100%;\n    }\n    // This is for value of true and also covers all options below\n    &#{'[#{ $attribute }*=\"gutters-row:\"]'} { \n      > #{ $select-item } {\n        padding-top:  $gutter;\n        padding-bottom: $gutter;\n      }\n    }\n    &#{'[#{ $attribute }*=\"gutters-row: top\"]'} { \n      > #{ $select-item } {\n        &.#{ $position-class-row-last } {\n          padding-bottom: 0;\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"gutters-row: bottom\"]'} { \n      > #{ $select-item } {\n        &.#{ $position-class-row-first } {\n          padding-top: 0;\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"gutters-row: fit\"]'} { \n      margin-top: -$gutter;\n      margin-bottom: -$gutter;\n    }\n    // Rules: Row\n    &#{'[#{ $attribute }*=\"rules-row:\"]'} { \n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          position: absolute;\n          left: 0;\n          right: 0;\n          height: $rule-size;\n          background: color.get($rule-color);\n        }\n      }\n    }\n    // Rules: Applies to both column and row\n    &#{'[#{ $attribute }*=\"rules\"]'} { \n      > #{ $select-item } {\n        position: relative;\n      }\n    }\n    // Rules: Column\n    &#{'[#{ $attribute }*=\"rules-column:\"]'} { \n      > #{ $select-item } {\n        &#{ $select-rule-col } {\n          position: absolute;\n          top: 0;\n          bottom: 0;\n          width: $rule-size;\n          background: color.get($rule-color);\n        }\n      }\n    }\n    // Options for the left or right\n    @include -create-rule-col-position(\n      $position: \"left\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-col: $select-rule-col, \n      $end-class: $position-class-column-first\n    );\n    @include -create-rule-col-position(\n      $position: \"right\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-col: $select-rule-col, \n      $end-class: $position-class-column-last\n    );\n    // Override first or last column removing the rule using matching specificity\n    &#{'[#{ $attribute }*=\"rules-column:\"][#{ $attribute }*=\"rules-column-ends: true\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-col } {\n          content: '';\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"rules-column-align: gutter\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-col } {\n          top: $gutter;\n          bottom: $gutter;\n        }\n      }\n    }\n    // Options for the left or right\n    @include -create-rule-row-position(\n      $position: \"top\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-row: $select-rule-row, \n      $between: false\n    );\n    @include -create-rule-row-position(\n      $position: \"bottom\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-row: $select-rule-row, \n      $between: false\n    );\n\n    &#{'[#{ $attribute }*=\"rules-row: between\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          bottom: math.floor(math.div($rule-size, 2)) * -1;\n        }\n        // For removing the rule per row (via equal heights for now)\n        &.#{ $position-class-row-last } {\n          &#{ $select-rule-row } {\n            content: none;\n          }\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"rules-row-align: gutter\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          left: $gutter;\n          right: $gutter;\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"rules-row-persist: true\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          content: '';\n        }\n      }\n    }\n  }\n\n  @include breakpoint.min($breakpoint) {\n    // Select the attribute with matching column count\n    #{ $select-grid } {\n      // Defaults for grid an item\n      display: flex;\n      flex-flow: row wrap;\n      align-items: stretch;\n      margin-left: -$gutter;\n      margin-right: -$gutter;\n\n      > #{ $select-item } {\n        float: left; // Fallback\n        padding-left: $gutter;\n        padding-right: $gutter;\n      }\n      // Alignment options\n      &#{'[#{ $attribute }*=\"align: center\"]'} { \n        align-items: center;  \n      }\n      &#{'[#{ $attribute }*=\"align: end\"]'} { \n        align-items: flex-end;\n      }\n      &#{'[#{ $attribute }*=\"align: start\"]'} { \n        align-items: flex-start; \n      }\n      // Alignment of the children when using stretch\n      // - There is no stetch-start (that's defualt);\n      // - There is no stetch-middle (that's covered by stretch-);\n      &#{'[#{ $attribute }*=\"align: stretch-\"]'} { \n        // set the child to display as a single flex item\n        > #{ $select-item } {\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n        }\n      }\n      &#{'[#{ $attribute }*=\"align: stretch-end\"]'} { \n        > #{ $select-item } {\n          justify-content: flex-end;\n        }\n      }\n      // Other options\n      &#{'[#{ $attribute }*=\"gutters: false\"]'} { \n        margin-left: 0;\n        margin-right: 0;\n        > #{ $select-item } {\n          padding-left: 0;\n          padding-right: 0;\n        }\n      }\n      // Activate Rules\n      &#{'[#{ $attribute }*=\"rules-column:\"]'} {\n        > #{ $select-item } {\n          &#{ $select-rule-col } {\n            content: '';\n          }\n        }\n      }\n      &#{'[#{ $attribute }*=\"rules-row:\"]'} {\n        > #{ $select-item } {\n          &#{ $select-rule-row } {\n            content: '';\n          }\n        }\n      }\n      // Generated props for item\n      @include -create-column-widths(\n        $columns: $columns,\n        $attribute-item: $attribute-item,\n        $suffix: ''\n      );\n      @include -create-column-offsets(\n        $columns: $columns,\n        $attribute-item: $attribute-item,\n        $suffix: ''\n      );\n    }\n  }\n\n  @if $extra-breakpoints {\n    @each $name, $options in $extra-breakpoints {\n      $g: map.get($options, \"gutter\");\n      @include -create-extra-breakpoint(\n        $name: $name, \n        $breakpoint: map.get($options, \"breakpoint\"),\n        $gutter: if($g, $g, $gutter),\n        $columns: $columns,\n        $attribute-item: $attribute-item,\n        $select-grid: $select-grid,\n        $select-item: $select-item\n      );\n    }\n  }\n  @if $extra-rule-styles {\n    @each $name, $options in $extra-rule-styles {\n      $color: utils.require-map-get($options, \"color\", \"grid [extra rule style]\");\n      $size: utils.require-map-get($options, \"size\", \"grid [extra rule style]\");\n      #{ $select-grid } {\n\n        &#{'[#{_attr}*=\"rules-column-style: #{ $name }\"]'} {\n          > #{ $select-item } {\n            &#{ $select-rule-col } {\n              background-color: color.get($color);\n              width: $size;\n            }\n          }\n          @include -create-rule-col-position(\n            $position: \"left\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-col: $select-rule-col, \n            $end-class: false\n          );\n          @include -create-rule-col-position(\n            $position: \"right\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-col: $select-rule-col, \n            $end-class: false\n          );\n        }\n        &#{'[#{_attr}*=\"rules-row-style: #{ $name }\"]'} {\n          > #{ $select-item } {\n            &#{ $select-rule-row } {\n              background-color: $color;\n              height: $size;\n            }\n          }\n          @include -create-rule-row-position(\n            $position: \"top\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-row: $select-rule-row, \n            $between: false\n          );\n          @include -create-rule-row-position(\n            $position: \"bottom\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-row: $select-rule-row, \n            $between: false\n          );\n          @include -create-rule-row-position(\n            $position: \"bottom\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-row: $select-rule-row, \n            $between: true\n          );\n        }\n      }\n    }\n  }\n",
          "line": {
            "start": 83,
            "end": 407
          }
        }
      },
      {
        "description": "Creates grid css (variation of original data-grid)\n",
        "context": {
          "type": "mixin",
          "name": "create",
          "code": "\n  $attribute-item: \"#{ $attribute }-item\";\n  $select-grid: '[#{ $attribute }*=\"columns: #{ $columns }\"]';\n  $select-item: '[#{ $attribute-item }]';\n  $select-rule-col: \":before\";\n  $select-rule-row: \":after\";\n  // These through off syntax highlighting when inside interpolation\n  $position-class-column-first: get(\"position-class-column-first\");\n  $position-class-column-last: get(\"position-class-column-last\");\n  $position-class-row-first: get(\"position-class-row-first\");\n  $position-class-row-last: get(\"position-class-row-last\");\n\n  #{ $select-grid } {\n    @include layout.clearfix(); // For legacy browsers\n\n    // Ensure empty elements still take up space in layout\n    > #{ $select-item } {\n      min-height: 1px; \n      width: 100%;\n    }\n    // This is for value of true and also covers all options below\n    &#{'[#{ $attribute }*=\"gutters-row:\"]'} { \n      > #{ $select-item } {\n        padding-top:  $gutter;\n        padding-bottom: $gutter;\n      }\n    }\n    &#{'[#{ $attribute }*=\"gutters-row: top\"]'} { \n      > #{ $select-item } {\n        &.#{ $position-class-row-last } {\n          padding-bottom: 0;\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"gutters-row: bottom\"]'} { \n      > #{ $select-item } {\n        &.#{ $position-class-row-first } {\n          padding-top: 0;\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"gutters-row: fit\"]'} { \n      margin-top: -$gutter;\n      margin-bottom: -$gutter;\n    }\n    // Rules: Row\n    &#{'[#{ $attribute }*=\"rules-row:\"]'} { \n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          position: absolute;\n          left: 0;\n          right: 0;\n          height: $rule-size;\n          background: color.get($rule-color);\n        }\n      }\n    }\n    // Rules: Applies to both column and row\n    &#{'[#{ $attribute }*=\"rules\"]'} { \n      > #{ $select-item } {\n        position: relative;\n      }\n    }\n    // Rules: Column\n    &#{'[#{ $attribute }*=\"rules-column:\"]'} { \n      > #{ $select-item } {\n        &#{ $select-rule-col } {\n          position: absolute;\n          top: 0;\n          bottom: 0;\n          width: $rule-size;\n          background: color.get($rule-color);\n        }\n      }\n    }\n    // Options for the left or right\n    @include -create-rule-col-position(\n      $position: \"left\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-col: $select-rule-col, \n      $end-class: $position-class-column-first\n    );\n    @include -create-rule-col-position(\n      $position: \"right\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-col: $select-rule-col, \n      $end-class: $position-class-column-last\n    );\n    // Override first or last column removing the rule using matching specificity\n    &#{'[#{ $attribute }*=\"rules-column:\"][#{ $attribute }*=\"rules-column-ends: true\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-col } {\n          content: '';\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"rules-column-align: gutter\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-col } {\n          top: $gutter;\n          bottom: $gutter;\n        }\n      }\n    }\n    // Options for the left or right\n    @include -create-rule-row-position(\n      $position: \"top\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-row: $select-rule-row, \n      $between: false\n    );\n    @include -create-rule-row-position(\n      $position: \"bottom\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-row: $select-rule-row, \n      $between: false\n    );\n\n    &#{'[#{ $attribute }*=\"rules-row: between\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          bottom: math.floor(math.div($rule-size, 2)) * -1;\n        }\n        // For removing the rule per row (via equal heights for now)\n        &.#{ $position-class-row-last } {\n          &#{ $select-rule-row } {\n            content: none;\n          }\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"rules-row-align: gutter\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          left: $gutter;\n          right: $gutter;\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"rules-row-persist: true\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          content: '';\n        }\n      }\n    }\n  }\n\n  @include breakpoint.min($breakpoint) {\n    // Select the attribute with matching column count\n    #{ $select-grid } {\n      // Defaults for grid an item\n      display: flex;\n      flex-flow: row wrap;\n      align-items: stretch;\n      margin-left: -$gutter;\n      margin-right: -$gutter;\n\n      > #{ $select-item } {\n        float: left; // Fallback\n        padding-left: $gutter;\n        padding-right: $gutter;\n      }\n      // Alignment options\n      &#{'[#{ $attribute }*=\"align: center\"]'} { \n        align-items: center;  \n      }\n      &#{'[#{ $attribute }*=\"align: end\"]'} { \n        align-items: flex-end;\n      }\n      &#{'[#{ $attribute }*=\"align: start\"]'} { \n        align-items: flex-start; \n      }\n      // Alignment of the children when using stretch\n      // - There is no stetch-start (that's defualt);\n      // - There is no stetch-middle (that's covered by stretch-);\n      &#{'[#{ $attribute }*=\"align: stretch-\"]'} { \n        // set the child to display as a single flex item\n        > #{ $select-item } {\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n        }\n      }\n      &#{'[#{ $attribute }*=\"align: stretch-end\"]'} { \n        > #{ $select-item } {\n          justify-content: flex-end;\n        }\n      }\n      // Other options\n      &#{'[#{ $attribute }*=\"gutters: false\"]'} { \n        margin-left: 0;\n        margin-right: 0;\n        > #{ $select-item } {\n          padding-left: 0;\n          padding-right: 0;\n        }\n      }\n      // Activate Rules\n      &#{'[#{ $attribute }*=\"rules-column:\"]'} {\n        > #{ $select-item } {\n          &#{ $select-rule-col } {\n            content: '';\n          }\n        }\n      }\n      &#{'[#{ $attribute }*=\"rules-row:\"]'} {\n        > #{ $select-item } {\n          &#{ $select-rule-row } {\n            content: '';\n          }\n        }\n      }\n      // Generated props for item\n      @include -create-column-widths(\n        $columns: $columns,\n        $attribute-item: $attribute-item,\n        $suffix: ''\n      );\n      @include -create-column-offsets(\n        $columns: $columns,\n        $attribute-item: $attribute-item,\n        $suffix: ''\n      );\n    }\n  }\n\n  @if $extra-breakpoints {\n    @each $name, $options in $extra-breakpoints {\n      $g: map.get($options, \"gutter\");\n      @include -create-extra-breakpoint(\n        $name: $name, \n        $breakpoint: map.get($options, \"breakpoint\"),\n        $gutter: if($g, $g, $gutter),\n        $columns: $columns,\n        $attribute-item: $attribute-item,\n        $select-grid: $select-grid,\n        $select-item: $select-item\n      );\n    }\n  }\n  @if $extra-rule-styles {\n    @each $name, $options in $extra-rule-styles {\n      $color: utils.require-map-get($options, \"color\", \"grid [extra rule style]\");\n      $size: utils.require-map-get($options, \"size\", \"grid [extra rule style]\");\n      #{ $select-grid } {\n\n        &#{'[#{_attr}*=\"rules-column-style: #{ $name }\"]'} {\n          > #{ $select-item } {\n            &#{ $select-rule-col } {\n              background-color: color.get($color);\n              width: $size;\n            }\n          }\n          @include -create-rule-col-position(\n            $position: \"left\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-col: $select-rule-col, \n            $end-class: false\n          );\n          @include -create-rule-col-position(\n            $position: \"right\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-col: $select-rule-col, \n            $end-class: false\n          );\n        }\n        &#{'[#{_attr}*=\"rules-row-style: #{ $name }\"]'} {\n          > #{ $select-item } {\n            &#{ $select-rule-row } {\n              background-color: $color;\n              height: $size;\n            }\n          }\n          @include -create-rule-row-position(\n            $position: \"top\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-row: $select-rule-row, \n            $between: false\n          );\n          @include -create-rule-row-position(\n            $position: \"bottom\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-row: $select-rule-row, \n            $between: false\n          );\n          @include -create-rule-row-position(\n            $position: \"bottom\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-row: $select-rule-row, \n            $between: true\n          );\n        }\n      }\n    }\n  }\n",
          "line": {
            "start": 83,
            "end": 407
          }
        }
      },
      {
        "description": "Creates grid css (variation of original data-grid)\n",
        "context": {
          "type": "mixin",
          "name": "create",
          "code": "\n  $attribute-item: \"#{ $attribute }-item\";\n  $select-grid: '[#{ $attribute }*=\"columns: #{ $columns }\"]';\n  $select-item: '[#{ $attribute-item }]';\n  $select-rule-col: \":before\";\n  $select-rule-row: \":after\";\n  // These through off syntax highlighting when inside interpolation\n  $position-class-column-first: get(\"position-class-column-first\");\n  $position-class-column-last: get(\"position-class-column-last\");\n  $position-class-row-first: get(\"position-class-row-first\");\n  $position-class-row-last: get(\"position-class-row-last\");\n\n  #{ $select-grid } {\n    @include layout.clearfix(); // For legacy browsers\n\n    // Ensure empty elements still take up space in layout\n    > #{ $select-item } {\n      min-height: 1px; \n      width: 100%;\n    }\n    // This is for value of true and also covers all options below\n    &#{'[#{ $attribute }*=\"gutters-row:\"]'} { \n      > #{ $select-item } {\n        padding-top:  $gutter;\n        padding-bottom: $gutter;\n      }\n    }\n    &#{'[#{ $attribute }*=\"gutters-row: top\"]'} { \n      > #{ $select-item } {\n        &.#{ $position-class-row-last } {\n          padding-bottom: 0;\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"gutters-row: bottom\"]'} { \n      > #{ $select-item } {\n        &.#{ $position-class-row-first } {\n          padding-top: 0;\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"gutters-row: fit\"]'} { \n      margin-top: -$gutter;\n      margin-bottom: -$gutter;\n    }\n    // Rules: Row\n    &#{'[#{ $attribute }*=\"rules-row:\"]'} { \n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          position: absolute;\n          left: 0;\n          right: 0;\n          height: $rule-size;\n          background: color.get($rule-color);\n        }\n      }\n    }\n    // Rules: Applies to both column and row\n    &#{'[#{ $attribute }*=\"rules\"]'} { \n      > #{ $select-item } {\n        position: relative;\n      }\n    }\n    // Rules: Column\n    &#{'[#{ $attribute }*=\"rules-column:\"]'} { \n      > #{ $select-item } {\n        &#{ $select-rule-col } {\n          position: absolute;\n          top: 0;\n          bottom: 0;\n          width: $rule-size;\n          background: color.get($rule-color);\n        }\n      }\n    }\n    // Options for the left or right\n    @include -create-rule-col-position(\n      $position: \"left\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-col: $select-rule-col, \n      $end-class: $position-class-column-first\n    );\n    @include -create-rule-col-position(\n      $position: \"right\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-col: $select-rule-col, \n      $end-class: $position-class-column-last\n    );\n    // Override first or last column removing the rule using matching specificity\n    &#{'[#{ $attribute }*=\"rules-column:\"][#{ $attribute }*=\"rules-column-ends: true\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-col } {\n          content: '';\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"rules-column-align: gutter\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-col } {\n          top: $gutter;\n          bottom: $gutter;\n        }\n      }\n    }\n    // Options for the left or right\n    @include -create-rule-row-position(\n      $position: \"top\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-row: $select-rule-row, \n      $between: false\n    );\n    @include -create-rule-row-position(\n      $position: \"bottom\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-row: $select-rule-row, \n      $between: false\n    );\n\n    &#{'[#{ $attribute }*=\"rules-row: between\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          bottom: math.floor(math.div($rule-size, 2)) * -1;\n        }\n        // For removing the rule per row (via equal heights for now)\n        &.#{ $position-class-row-last } {\n          &#{ $select-rule-row } {\n            content: none;\n          }\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"rules-row-align: gutter\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          left: $gutter;\n          right: $gutter;\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"rules-row-persist: true\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          content: '';\n        }\n      }\n    }\n  }\n\n  @include breakpoint.min($breakpoint) {\n    // Select the attribute with matching column count\n    #{ $select-grid } {\n      // Defaults for grid an item\n      display: flex;\n      flex-flow: row wrap;\n      align-items: stretch;\n      margin-left: -$gutter;\n      margin-right: -$gutter;\n\n      > #{ $select-item } {\n        float: left; // Fallback\n        padding-left: $gutter;\n        padding-right: $gutter;\n      }\n      // Alignment options\n      &#{'[#{ $attribute }*=\"align: center\"]'} { \n        align-items: center;  \n      }\n      &#{'[#{ $attribute }*=\"align: end\"]'} { \n        align-items: flex-end;\n      }\n      &#{'[#{ $attribute }*=\"align: start\"]'} { \n        align-items: flex-start; \n      }\n      // Alignment of the children when using stretch\n      // - There is no stetch-start (that's defualt);\n      // - There is no stetch-middle (that's covered by stretch-);\n      &#{'[#{ $attribute }*=\"align: stretch-\"]'} { \n        // set the child to display as a single flex item\n        > #{ $select-item } {\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n        }\n      }\n      &#{'[#{ $attribute }*=\"align: stretch-end\"]'} { \n        > #{ $select-item } {\n          justify-content: flex-end;\n        }\n      }\n      // Other options\n      &#{'[#{ $attribute }*=\"gutters: false\"]'} { \n        margin-left: 0;\n        margin-right: 0;\n        > #{ $select-item } {\n          padding-left: 0;\n          padding-right: 0;\n        }\n      }\n      // Activate Rules\n      &#{'[#{ $attribute }*=\"rules-column:\"]'} {\n        > #{ $select-item } {\n          &#{ $select-rule-col } {\n            content: '';\n          }\n        }\n      }\n      &#{'[#{ $attribute }*=\"rules-row:\"]'} {\n        > #{ $select-item } {\n          &#{ $select-rule-row } {\n            content: '';\n          }\n        }\n      }\n      // Generated props for item\n      @include -create-column-widths(\n        $columns: $columns,\n        $attribute-item: $attribute-item,\n        $suffix: ''\n      );\n      @include -create-column-offsets(\n        $columns: $columns,\n        $attribute-item: $attribute-item,\n        $suffix: ''\n      );\n    }\n  }\n\n  @if $extra-breakpoints {\n    @each $name, $options in $extra-breakpoints {\n      $g: map.get($options, \"gutter\");\n      @include -create-extra-breakpoint(\n        $name: $name, \n        $breakpoint: map.get($options, \"breakpoint\"),\n        $gutter: if($g, $g, $gutter),\n        $columns: $columns,\n        $attribute-item: $attribute-item,\n        $select-grid: $select-grid,\n        $select-item: $select-item\n      );\n    }\n  }\n  @if $extra-rule-styles {\n    @each $name, $options in $extra-rule-styles {\n      $color: utils.require-map-get($options, \"color\", \"grid [extra rule style]\");\n      $size: utils.require-map-get($options, \"size\", \"grid [extra rule style]\");\n      #{ $select-grid } {\n\n        &#{'[#{_attr}*=\"rules-column-style: #{ $name }\"]'} {\n          > #{ $select-item } {\n            &#{ $select-rule-col } {\n              background-color: color.get($color);\n              width: $size;\n            }\n          }\n          @include -create-rule-col-position(\n            $position: \"left\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-col: $select-rule-col, \n            $end-class: false\n          );\n          @include -create-rule-col-position(\n            $position: \"right\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-col: $select-rule-col, \n            $end-class: false\n          );\n        }\n        &#{'[#{_attr}*=\"rules-row-style: #{ $name }\"]'} {\n          > #{ $select-item } {\n            &#{ $select-rule-row } {\n              background-color: $color;\n              height: $size;\n            }\n          }\n          @include -create-rule-row-position(\n            $position: \"top\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-row: $select-rule-row, \n            $between: false\n          );\n          @include -create-rule-row-position(\n            $position: \"bottom\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-row: $select-rule-row, \n            $between: false\n          );\n          @include -create-rule-row-position(\n            $position: \"bottom\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-row: $select-rule-row, \n            $between: true\n          );\n        }\n      }\n    }\n  }\n",
          "line": {
            "start": 83,
            "end": 407
          }
        }
      },
      {
        "description": "Creates grid css (variation of original data-grid)\n",
        "context": {
          "type": "mixin",
          "name": "create",
          "code": "\n  $attribute-item: \"#{ $attribute }-item\";\n  $select-grid: '[#{ $attribute }*=\"columns: #{ $columns }\"]';\n  $select-item: '[#{ $attribute-item }]';\n  $select-rule-col: \":before\";\n  $select-rule-row: \":after\";\n  // These through off syntax highlighting when inside interpolation\n  $position-class-column-first: get(\"position-class-column-first\");\n  $position-class-column-last: get(\"position-class-column-last\");\n  $position-class-row-first: get(\"position-class-row-first\");\n  $position-class-row-last: get(\"position-class-row-last\");\n\n  #{ $select-grid } {\n    @include layout.clearfix(); // For legacy browsers\n\n    // Ensure empty elements still take up space in layout\n    > #{ $select-item } {\n      min-height: 1px; \n      width: 100%;\n    }\n    // This is for value of true and also covers all options below\n    &#{'[#{ $attribute }*=\"gutters-row:\"]'} { \n      > #{ $select-item } {\n        padding-top:  $gutter;\n        padding-bottom: $gutter;\n      }\n    }\n    &#{'[#{ $attribute }*=\"gutters-row: top\"]'} { \n      > #{ $select-item } {\n        &.#{ $position-class-row-last } {\n          padding-bottom: 0;\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"gutters-row: bottom\"]'} { \n      > #{ $select-item } {\n        &.#{ $position-class-row-first } {\n          padding-top: 0;\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"gutters-row: fit\"]'} { \n      margin-top: -$gutter;\n      margin-bottom: -$gutter;\n    }\n    // Rules: Row\n    &#{'[#{ $attribute }*=\"rules-row:\"]'} { \n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          position: absolute;\n          left: 0;\n          right: 0;\n          height: $rule-size;\n          background: color.get($rule-color);\n        }\n      }\n    }\n    // Rules: Applies to both column and row\n    &#{'[#{ $attribute }*=\"rules\"]'} { \n      > #{ $select-item } {\n        position: relative;\n      }\n    }\n    // Rules: Column\n    &#{'[#{ $attribute }*=\"rules-column:\"]'} { \n      > #{ $select-item } {\n        &#{ $select-rule-col } {\n          position: absolute;\n          top: 0;\n          bottom: 0;\n          width: $rule-size;\n          background: color.get($rule-color);\n        }\n      }\n    }\n    // Options for the left or right\n    @include -create-rule-col-position(\n      $position: \"left\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-col: $select-rule-col, \n      $end-class: $position-class-column-first\n    );\n    @include -create-rule-col-position(\n      $position: \"right\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-col: $select-rule-col, \n      $end-class: $position-class-column-last\n    );\n    // Override first or last column removing the rule using matching specificity\n    &#{'[#{ $attribute }*=\"rules-column:\"][#{ $attribute }*=\"rules-column-ends: true\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-col } {\n          content: '';\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"rules-column-align: gutter\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-col } {\n          top: $gutter;\n          bottom: $gutter;\n        }\n      }\n    }\n    // Options for the left or right\n    @include -create-rule-row-position(\n      $position: \"top\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-row: $select-rule-row, \n      $between: false\n    );\n    @include -create-rule-row-position(\n      $position: \"bottom\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-row: $select-rule-row, \n      $between: false\n    );\n\n    &#{'[#{ $attribute }*=\"rules-row: between\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          bottom: math.floor(math.div($rule-size, 2)) * -1;\n        }\n        // For removing the rule per row (via equal heights for now)\n        &.#{ $position-class-row-last } {\n          &#{ $select-rule-row } {\n            content: none;\n          }\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"rules-row-align: gutter\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          left: $gutter;\n          right: $gutter;\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"rules-row-persist: true\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          content: '';\n        }\n      }\n    }\n  }\n\n  @include breakpoint.min($breakpoint) {\n    // Select the attribute with matching column count\n    #{ $select-grid } {\n      // Defaults for grid an item\n      display: flex;\n      flex-flow: row wrap;\n      align-items: stretch;\n      margin-left: -$gutter;\n      margin-right: -$gutter;\n\n      > #{ $select-item } {\n        float: left; // Fallback\n        padding-left: $gutter;\n        padding-right: $gutter;\n      }\n      // Alignment options\n      &#{'[#{ $attribute }*=\"align: center\"]'} { \n        align-items: center;  \n      }\n      &#{'[#{ $attribute }*=\"align: end\"]'} { \n        align-items: flex-end;\n      }\n      &#{'[#{ $attribute }*=\"align: start\"]'} { \n        align-items: flex-start; \n      }\n      // Alignment of the children when using stretch\n      // - There is no stetch-start (that's defualt);\n      // - There is no stetch-middle (that's covered by stretch-);\n      &#{'[#{ $attribute }*=\"align: stretch-\"]'} { \n        // set the child to display as a single flex item\n        > #{ $select-item } {\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n        }\n      }\n      &#{'[#{ $attribute }*=\"align: stretch-end\"]'} { \n        > #{ $select-item } {\n          justify-content: flex-end;\n        }\n      }\n      // Other options\n      &#{'[#{ $attribute }*=\"gutters: false\"]'} { \n        margin-left: 0;\n        margin-right: 0;\n        > #{ $select-item } {\n          padding-left: 0;\n          padding-right: 0;\n        }\n      }\n      // Activate Rules\n      &#{'[#{ $attribute }*=\"rules-column:\"]'} {\n        > #{ $select-item } {\n          &#{ $select-rule-col } {\n            content: '';\n          }\n        }\n      }\n      &#{'[#{ $attribute }*=\"rules-row:\"]'} {\n        > #{ $select-item } {\n          &#{ $select-rule-row } {\n            content: '';\n          }\n        }\n      }\n      // Generated props for item\n      @include -create-column-widths(\n        $columns: $columns,\n        $attribute-item: $attribute-item,\n        $suffix: ''\n      );\n      @include -create-column-offsets(\n        $columns: $columns,\n        $attribute-item: $attribute-item,\n        $suffix: ''\n      );\n    }\n  }\n\n  @if $extra-breakpoints {\n    @each $name, $options in $extra-breakpoints {\n      $g: map.get($options, \"gutter\");\n      @include -create-extra-breakpoint(\n        $name: $name, \n        $breakpoint: map.get($options, \"breakpoint\"),\n        $gutter: if($g, $g, $gutter),\n        $columns: $columns,\n        $attribute-item: $attribute-item,\n        $select-grid: $select-grid,\n        $select-item: $select-item\n      );\n    }\n  }\n  @if $extra-rule-styles {\n    @each $name, $options in $extra-rule-styles {\n      $color: utils.require-map-get($options, \"color\", \"grid [extra rule style]\");\n      $size: utils.require-map-get($options, \"size\", \"grid [extra rule style]\");\n      #{ $select-grid } {\n\n        &#{'[#{_attr}*=\"rules-column-style: #{ $name }\"]'} {\n          > #{ $select-item } {\n            &#{ $select-rule-col } {\n              background-color: color.get($color);\n              width: $size;\n            }\n          }\n          @include -create-rule-col-position(\n            $position: \"left\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-col: $select-rule-col, \n            $end-class: false\n          );\n          @include -create-rule-col-position(\n            $position: \"right\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-col: $select-rule-col, \n            $end-class: false\n          );\n        }\n        &#{'[#{_attr}*=\"rules-row-style: #{ $name }\"]'} {\n          > #{ $select-item } {\n            &#{ $select-rule-row } {\n              background-color: $color;\n              height: $size;\n            }\n          }\n          @include -create-rule-row-position(\n            $position: \"top\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-row: $select-rule-row, \n            $between: false\n          );\n          @include -create-rule-row-position(\n            $position: \"bottom\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-row: $select-rule-row, \n            $between: false\n          );\n          @include -create-rule-row-position(\n            $position: \"bottom\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-row: $select-rule-row, \n            $between: true\n          );\n        }\n      }\n    }\n  }\n",
          "line": {
            "start": 83,
            "end": 407
          }
        }
      },
      {
        "description": "Creates grid css (variation of original data-grid)\n",
        "context": {
          "type": "mixin",
          "name": "create",
          "code": "\n  $attribute-item: \"#{ $attribute }-item\";\n  $select-grid: '[#{ $attribute }*=\"columns: #{ $columns }\"]';\n  $select-item: '[#{ $attribute-item }]';\n  $select-rule-col: \":before\";\n  $select-rule-row: \":after\";\n  // These through off syntax highlighting when inside interpolation\n  $position-class-column-first: get(\"position-class-column-first\");\n  $position-class-column-last: get(\"position-class-column-last\");\n  $position-class-row-first: get(\"position-class-row-first\");\n  $position-class-row-last: get(\"position-class-row-last\");\n\n  #{ $select-grid } {\n    @include layout.clearfix(); // For legacy browsers\n\n    // Ensure empty elements still take up space in layout\n    > #{ $select-item } {\n      min-height: 1px; \n      width: 100%;\n    }\n    // This is for value of true and also covers all options below\n    &#{'[#{ $attribute }*=\"gutters-row:\"]'} { \n      > #{ $select-item } {\n        padding-top:  $gutter;\n        padding-bottom: $gutter;\n      }\n    }\n    &#{'[#{ $attribute }*=\"gutters-row: top\"]'} { \n      > #{ $select-item } {\n        &.#{ $position-class-row-last } {\n          padding-bottom: 0;\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"gutters-row: bottom\"]'} { \n      > #{ $select-item } {\n        &.#{ $position-class-row-first } {\n          padding-top: 0;\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"gutters-row: fit\"]'} { \n      margin-top: -$gutter;\n      margin-bottom: -$gutter;\n    }\n    // Rules: Row\n    &#{'[#{ $attribute }*=\"rules-row:\"]'} { \n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          position: absolute;\n          left: 0;\n          right: 0;\n          height: $rule-size;\n          background: color.get($rule-color);\n        }\n      }\n    }\n    // Rules: Applies to both column and row\n    &#{'[#{ $attribute }*=\"rules\"]'} { \n      > #{ $select-item } {\n        position: relative;\n      }\n    }\n    // Rules: Column\n    &#{'[#{ $attribute }*=\"rules-column:\"]'} { \n      > #{ $select-item } {\n        &#{ $select-rule-col } {\n          position: absolute;\n          top: 0;\n          bottom: 0;\n          width: $rule-size;\n          background: color.get($rule-color);\n        }\n      }\n    }\n    // Options for the left or right\n    @include -create-rule-col-position(\n      $position: \"left\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-col: $select-rule-col, \n      $end-class: $position-class-column-first\n    );\n    @include -create-rule-col-position(\n      $position: \"right\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-col: $select-rule-col, \n      $end-class: $position-class-column-last\n    );\n    // Override first or last column removing the rule using matching specificity\n    &#{'[#{ $attribute }*=\"rules-column:\"][#{ $attribute }*=\"rules-column-ends: true\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-col } {\n          content: '';\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"rules-column-align: gutter\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-col } {\n          top: $gutter;\n          bottom: $gutter;\n        }\n      }\n    }\n    // Options for the left or right\n    @include -create-rule-row-position(\n      $position: \"top\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-row: $select-rule-row, \n      $between: false\n    );\n    @include -create-rule-row-position(\n      $position: \"bottom\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-row: $select-rule-row, \n      $between: false\n    );\n\n    &#{'[#{ $attribute }*=\"rules-row: between\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          bottom: math.floor(math.div($rule-size, 2)) * -1;\n        }\n        // For removing the rule per row (via equal heights for now)\n        &.#{ $position-class-row-last } {\n          &#{ $select-rule-row } {\n            content: none;\n          }\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"rules-row-align: gutter\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          left: $gutter;\n          right: $gutter;\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"rules-row-persist: true\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          content: '';\n        }\n      }\n    }\n  }\n\n  @include breakpoint.min($breakpoint) {\n    // Select the attribute with matching column count\n    #{ $select-grid } {\n      // Defaults for grid an item\n      display: flex;\n      flex-flow: row wrap;\n      align-items: stretch;\n      margin-left: -$gutter;\n      margin-right: -$gutter;\n\n      > #{ $select-item } {\n        float: left; // Fallback\n        padding-left: $gutter;\n        padding-right: $gutter;\n      }\n      // Alignment options\n      &#{'[#{ $attribute }*=\"align: center\"]'} { \n        align-items: center;  \n      }\n      &#{'[#{ $attribute }*=\"align: end\"]'} { \n        align-items: flex-end;\n      }\n      &#{'[#{ $attribute }*=\"align: start\"]'} { \n        align-items: flex-start; \n      }\n      // Alignment of the children when using stretch\n      // - There is no stetch-start (that's defualt);\n      // - There is no stetch-middle (that's covered by stretch-);\n      &#{'[#{ $attribute }*=\"align: stretch-\"]'} { \n        // set the child to display as a single flex item\n        > #{ $select-item } {\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n        }\n      }\n      &#{'[#{ $attribute }*=\"align: stretch-end\"]'} { \n        > #{ $select-item } {\n          justify-content: flex-end;\n        }\n      }\n      // Other options\n      &#{'[#{ $attribute }*=\"gutters: false\"]'} { \n        margin-left: 0;\n        margin-right: 0;\n        > #{ $select-item } {\n          padding-left: 0;\n          padding-right: 0;\n        }\n      }\n      // Activate Rules\n      &#{'[#{ $attribute }*=\"rules-column:\"]'} {\n        > #{ $select-item } {\n          &#{ $select-rule-col } {\n            content: '';\n          }\n        }\n      }\n      &#{'[#{ $attribute }*=\"rules-row:\"]'} {\n        > #{ $select-item } {\n          &#{ $select-rule-row } {\n            content: '';\n          }\n        }\n      }\n      // Generated props for item\n      @include -create-column-widths(\n        $columns: $columns,\n        $attribute-item: $attribute-item,\n        $suffix: ''\n      );\n      @include -create-column-offsets(\n        $columns: $columns,\n        $attribute-item: $attribute-item,\n        $suffix: ''\n      );\n    }\n  }\n\n  @if $extra-breakpoints {\n    @each $name, $options in $extra-breakpoints {\n      $g: map.get($options, \"gutter\");\n      @include -create-extra-breakpoint(\n        $name: $name, \n        $breakpoint: map.get($options, \"breakpoint\"),\n        $gutter: if($g, $g, $gutter),\n        $columns: $columns,\n        $attribute-item: $attribute-item,\n        $select-grid: $select-grid,\n        $select-item: $select-item\n      );\n    }\n  }\n  @if $extra-rule-styles {\n    @each $name, $options in $extra-rule-styles {\n      $color: utils.require-map-get($options, \"color\", \"grid [extra rule style]\");\n      $size: utils.require-map-get($options, \"size\", \"grid [extra rule style]\");\n      #{ $select-grid } {\n\n        &#{'[#{_attr}*=\"rules-column-style: #{ $name }\"]'} {\n          > #{ $select-item } {\n            &#{ $select-rule-col } {\n              background-color: color.get($color);\n              width: $size;\n            }\n          }\n          @include -create-rule-col-position(\n            $position: \"left\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-col: $select-rule-col, \n            $end-class: false\n          );\n          @include -create-rule-col-position(\n            $position: \"right\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-col: $select-rule-col, \n            $end-class: false\n          );\n        }\n        &#{'[#{_attr}*=\"rules-row-style: #{ $name }\"]'} {\n          > #{ $select-item } {\n            &#{ $select-rule-row } {\n              background-color: $color;\n              height: $size;\n            }\n          }\n          @include -create-rule-row-position(\n            $position: \"top\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-row: $select-rule-row, \n            $between: false\n          );\n          @include -create-rule-row-position(\n            $position: \"bottom\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-row: $select-rule-row, \n            $between: false\n          );\n          @include -create-rule-row-position(\n            $position: \"bottom\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-row: $select-rule-row, \n            $between: true\n          );\n        }\n      }\n    }\n  }\n",
          "line": {
            "start": 83,
            "end": 407
          }
        }
      },
      {
        "description": "Creates grid css (variation of original data-grid)\n",
        "context": {
          "type": "mixin",
          "name": "create",
          "code": "\n  $attribute-item: \"#{ $attribute }-item\";\n  $select-grid: '[#{ $attribute }*=\"columns: #{ $columns }\"]';\n  $select-item: '[#{ $attribute-item }]';\n  $select-rule-col: \":before\";\n  $select-rule-row: \":after\";\n  // These through off syntax highlighting when inside interpolation\n  $position-class-column-first: get(\"position-class-column-first\");\n  $position-class-column-last: get(\"position-class-column-last\");\n  $position-class-row-first: get(\"position-class-row-first\");\n  $position-class-row-last: get(\"position-class-row-last\");\n\n  #{ $select-grid } {\n    @include layout.clearfix(); // For legacy browsers\n\n    // Ensure empty elements still take up space in layout\n    > #{ $select-item } {\n      min-height: 1px; \n      width: 100%;\n    }\n    // This is for value of true and also covers all options below\n    &#{'[#{ $attribute }*=\"gutters-row:\"]'} { \n      > #{ $select-item } {\n        padding-top:  $gutter;\n        padding-bottom: $gutter;\n      }\n    }\n    &#{'[#{ $attribute }*=\"gutters-row: top\"]'} { \n      > #{ $select-item } {\n        &.#{ $position-class-row-last } {\n          padding-bottom: 0;\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"gutters-row: bottom\"]'} { \n      > #{ $select-item } {\n        &.#{ $position-class-row-first } {\n          padding-top: 0;\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"gutters-row: fit\"]'} { \n      margin-top: -$gutter;\n      margin-bottom: -$gutter;\n    }\n    // Rules: Row\n    &#{'[#{ $attribute }*=\"rules-row:\"]'} { \n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          position: absolute;\n          left: 0;\n          right: 0;\n          height: $rule-size;\n          background: color.get($rule-color);\n        }\n      }\n    }\n    // Rules: Applies to both column and row\n    &#{'[#{ $attribute }*=\"rules\"]'} { \n      > #{ $select-item } {\n        position: relative;\n      }\n    }\n    // Rules: Column\n    &#{'[#{ $attribute }*=\"rules-column:\"]'} { \n      > #{ $select-item } {\n        &#{ $select-rule-col } {\n          position: absolute;\n          top: 0;\n          bottom: 0;\n          width: $rule-size;\n          background: color.get($rule-color);\n        }\n      }\n    }\n    // Options for the left or right\n    @include -create-rule-col-position(\n      $position: \"left\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-col: $select-rule-col, \n      $end-class: $position-class-column-first\n    );\n    @include -create-rule-col-position(\n      $position: \"right\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-col: $select-rule-col, \n      $end-class: $position-class-column-last\n    );\n    // Override first or last column removing the rule using matching specificity\n    &#{'[#{ $attribute }*=\"rules-column:\"][#{ $attribute }*=\"rules-column-ends: true\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-col } {\n          content: '';\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"rules-column-align: gutter\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-col } {\n          top: $gutter;\n          bottom: $gutter;\n        }\n      }\n    }\n    // Options for the left or right\n    @include -create-rule-row-position(\n      $position: \"top\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-row: $select-rule-row, \n      $between: false\n    );\n    @include -create-rule-row-position(\n      $position: \"bottom\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-row: $select-rule-row, \n      $between: false\n    );\n\n    &#{'[#{ $attribute }*=\"rules-row: between\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          bottom: math.floor(math.div($rule-size, 2)) * -1;\n        }\n        // For removing the rule per row (via equal heights for now)\n        &.#{ $position-class-row-last } {\n          &#{ $select-rule-row } {\n            content: none;\n          }\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"rules-row-align: gutter\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          left: $gutter;\n          right: $gutter;\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"rules-row-persist: true\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          content: '';\n        }\n      }\n    }\n  }\n\n  @include breakpoint.min($breakpoint) {\n    // Select the attribute with matching column count\n    #{ $select-grid } {\n      // Defaults for grid an item\n      display: flex;\n      flex-flow: row wrap;\n      align-items: stretch;\n      margin-left: -$gutter;\n      margin-right: -$gutter;\n\n      > #{ $select-item } {\n        float: left; // Fallback\n        padding-left: $gutter;\n        padding-right: $gutter;\n      }\n      // Alignment options\n      &#{'[#{ $attribute }*=\"align: center\"]'} { \n        align-items: center;  \n      }\n      &#{'[#{ $attribute }*=\"align: end\"]'} { \n        align-items: flex-end;\n      }\n      &#{'[#{ $attribute }*=\"align: start\"]'} { \n        align-items: flex-start; \n      }\n      // Alignment of the children when using stretch\n      // - There is no stetch-start (that's defualt);\n      // - There is no stetch-middle (that's covered by stretch-);\n      &#{'[#{ $attribute }*=\"align: stretch-\"]'} { \n        // set the child to display as a single flex item\n        > #{ $select-item } {\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n        }\n      }\n      &#{'[#{ $attribute }*=\"align: stretch-end\"]'} { \n        > #{ $select-item } {\n          justify-content: flex-end;\n        }\n      }\n      // Other options\n      &#{'[#{ $attribute }*=\"gutters: false\"]'} { \n        margin-left: 0;\n        margin-right: 0;\n        > #{ $select-item } {\n          padding-left: 0;\n          padding-right: 0;\n        }\n      }\n      // Activate Rules\n      &#{'[#{ $attribute }*=\"rules-column:\"]'} {\n        > #{ $select-item } {\n          &#{ $select-rule-col } {\n            content: '';\n          }\n        }\n      }\n      &#{'[#{ $attribute }*=\"rules-row:\"]'} {\n        > #{ $select-item } {\n          &#{ $select-rule-row } {\n            content: '';\n          }\n        }\n      }\n      // Generated props for item\n      @include -create-column-widths(\n        $columns: $columns,\n        $attribute-item: $attribute-item,\n        $suffix: ''\n      );\n      @include -create-column-offsets(\n        $columns: $columns,\n        $attribute-item: $attribute-item,\n        $suffix: ''\n      );\n    }\n  }\n\n  @if $extra-breakpoints {\n    @each $name, $options in $extra-breakpoints {\n      $g: map.get($options, \"gutter\");\n      @include -create-extra-breakpoint(\n        $name: $name, \n        $breakpoint: map.get($options, \"breakpoint\"),\n        $gutter: if($g, $g, $gutter),\n        $columns: $columns,\n        $attribute-item: $attribute-item,\n        $select-grid: $select-grid,\n        $select-item: $select-item\n      );\n    }\n  }\n  @if $extra-rule-styles {\n    @each $name, $options in $extra-rule-styles {\n      $color: utils.require-map-get($options, \"color\", \"grid [extra rule style]\");\n      $size: utils.require-map-get($options, \"size\", \"grid [extra rule style]\");\n      #{ $select-grid } {\n\n        &#{'[#{_attr}*=\"rules-column-style: #{ $name }\"]'} {\n          > #{ $select-item } {\n            &#{ $select-rule-col } {\n              background-color: color.get($color);\n              width: $size;\n            }\n          }\n          @include -create-rule-col-position(\n            $position: \"left\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-col: $select-rule-col, \n            $end-class: false\n          );\n          @include -create-rule-col-position(\n            $position: \"right\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-col: $select-rule-col, \n            $end-class: false\n          );\n        }\n        &#{'[#{_attr}*=\"rules-row-style: #{ $name }\"]'} {\n          > #{ $select-item } {\n            &#{ $select-rule-row } {\n              background-color: $color;\n              height: $size;\n            }\n          }\n          @include -create-rule-row-position(\n            $position: \"top\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-row: $select-rule-row, \n            $between: false\n          );\n          @include -create-rule-row-position(\n            $position: \"bottom\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-row: $select-rule-row, \n            $between: false\n          );\n          @include -create-rule-row-position(\n            $position: \"bottom\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-row: $select-rule-row, \n            $between: true\n          );\n        }\n      }\n    }\n  }\n",
          "line": {
            "start": 83,
            "end": 407
          }
        }
      },
      {
        "description": "Creates grid css (variation of original data-grid)\n",
        "context": {
          "type": "mixin",
          "name": "create",
          "code": "\n  $attribute-item: \"#{ $attribute }-item\";\n  $select-grid: '[#{ $attribute }*=\"columns: #{ $columns }\"]';\n  $select-item: '[#{ $attribute-item }]';\n  $select-rule-col: \":before\";\n  $select-rule-row: \":after\";\n  // These through off syntax highlighting when inside interpolation\n  $position-class-column-first: get(\"position-class-column-first\");\n  $position-class-column-last: get(\"position-class-column-last\");\n  $position-class-row-first: get(\"position-class-row-first\");\n  $position-class-row-last: get(\"position-class-row-last\");\n\n  #{ $select-grid } {\n    @include layout.clearfix(); // For legacy browsers\n\n    // Ensure empty elements still take up space in layout\n    > #{ $select-item } {\n      min-height: 1px; \n      width: 100%;\n    }\n    // This is for value of true and also covers all options below\n    &#{'[#{ $attribute }*=\"gutters-row:\"]'} { \n      > #{ $select-item } {\n        padding-top:  $gutter;\n        padding-bottom: $gutter;\n      }\n    }\n    &#{'[#{ $attribute }*=\"gutters-row: top\"]'} { \n      > #{ $select-item } {\n        &.#{ $position-class-row-last } {\n          padding-bottom: 0;\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"gutters-row: bottom\"]'} { \n      > #{ $select-item } {\n        &.#{ $position-class-row-first } {\n          padding-top: 0;\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"gutters-row: fit\"]'} { \n      margin-top: -$gutter;\n      margin-bottom: -$gutter;\n    }\n    // Rules: Row\n    &#{'[#{ $attribute }*=\"rules-row:\"]'} { \n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          position: absolute;\n          left: 0;\n          right: 0;\n          height: $rule-size;\n          background: color.get($rule-color);\n        }\n      }\n    }\n    // Rules: Applies to both column and row\n    &#{'[#{ $attribute }*=\"rules\"]'} { \n      > #{ $select-item } {\n        position: relative;\n      }\n    }\n    // Rules: Column\n    &#{'[#{ $attribute }*=\"rules-column:\"]'} { \n      > #{ $select-item } {\n        &#{ $select-rule-col } {\n          position: absolute;\n          top: 0;\n          bottom: 0;\n          width: $rule-size;\n          background: color.get($rule-color);\n        }\n      }\n    }\n    // Options for the left or right\n    @include -create-rule-col-position(\n      $position: \"left\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-col: $select-rule-col, \n      $end-class: $position-class-column-first\n    );\n    @include -create-rule-col-position(\n      $position: \"right\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-col: $select-rule-col, \n      $end-class: $position-class-column-last\n    );\n    // Override first or last column removing the rule using matching specificity\n    &#{'[#{ $attribute }*=\"rules-column:\"][#{ $attribute }*=\"rules-column-ends: true\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-col } {\n          content: '';\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"rules-column-align: gutter\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-col } {\n          top: $gutter;\n          bottom: $gutter;\n        }\n      }\n    }\n    // Options for the left or right\n    @include -create-rule-row-position(\n      $position: \"top\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-row: $select-rule-row, \n      $between: false\n    );\n    @include -create-rule-row-position(\n      $position: \"bottom\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-row: $select-rule-row, \n      $between: false\n    );\n\n    &#{'[#{ $attribute }*=\"rules-row: between\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          bottom: math.floor(math.div($rule-size, 2)) * -1;\n        }\n        // For removing the rule per row (via equal heights for now)\n        &.#{ $position-class-row-last } {\n          &#{ $select-rule-row } {\n            content: none;\n          }\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"rules-row-align: gutter\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          left: $gutter;\n          right: $gutter;\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"rules-row-persist: true\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          content: '';\n        }\n      }\n    }\n  }\n\n  @include breakpoint.min($breakpoint) {\n    // Select the attribute with matching column count\n    #{ $select-grid } {\n      // Defaults for grid an item\n      display: flex;\n      flex-flow: row wrap;\n      align-items: stretch;\n      margin-left: -$gutter;\n      margin-right: -$gutter;\n\n      > #{ $select-item } {\n        float: left; // Fallback\n        padding-left: $gutter;\n        padding-right: $gutter;\n      }\n      // Alignment options\n      &#{'[#{ $attribute }*=\"align: center\"]'} { \n        align-items: center;  \n      }\n      &#{'[#{ $attribute }*=\"align: end\"]'} { \n        align-items: flex-end;\n      }\n      &#{'[#{ $attribute }*=\"align: start\"]'} { \n        align-items: flex-start; \n      }\n      // Alignment of the children when using stretch\n      // - There is no stetch-start (that's defualt);\n      // - There is no stetch-middle (that's covered by stretch-);\n      &#{'[#{ $attribute }*=\"align: stretch-\"]'} { \n        // set the child to display as a single flex item\n        > #{ $select-item } {\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n        }\n      }\n      &#{'[#{ $attribute }*=\"align: stretch-end\"]'} { \n        > #{ $select-item } {\n          justify-content: flex-end;\n        }\n      }\n      // Other options\n      &#{'[#{ $attribute }*=\"gutters: false\"]'} { \n        margin-left: 0;\n        margin-right: 0;\n        > #{ $select-item } {\n          padding-left: 0;\n          padding-right: 0;\n        }\n      }\n      // Activate Rules\n      &#{'[#{ $attribute }*=\"rules-column:\"]'} {\n        > #{ $select-item } {\n          &#{ $select-rule-col } {\n            content: '';\n          }\n        }\n      }\n      &#{'[#{ $attribute }*=\"rules-row:\"]'} {\n        > #{ $select-item } {\n          &#{ $select-rule-row } {\n            content: '';\n          }\n        }\n      }\n      // Generated props for item\n      @include -create-column-widths(\n        $columns: $columns,\n        $attribute-item: $attribute-item,\n        $suffix: ''\n      );\n      @include -create-column-offsets(\n        $columns: $columns,\n        $attribute-item: $attribute-item,\n        $suffix: ''\n      );\n    }\n  }\n\n  @if $extra-breakpoints {\n    @each $name, $options in $extra-breakpoints {\n      $g: map.get($options, \"gutter\");\n      @include -create-extra-breakpoint(\n        $name: $name, \n        $breakpoint: map.get($options, \"breakpoint\"),\n        $gutter: if($g, $g, $gutter),\n        $columns: $columns,\n        $attribute-item: $attribute-item,\n        $select-grid: $select-grid,\n        $select-item: $select-item\n      );\n    }\n  }\n  @if $extra-rule-styles {\n    @each $name, $options in $extra-rule-styles {\n      $color: utils.require-map-get($options, \"color\", \"grid [extra rule style]\");\n      $size: utils.require-map-get($options, \"size\", \"grid [extra rule style]\");\n      #{ $select-grid } {\n\n        &#{'[#{_attr}*=\"rules-column-style: #{ $name }\"]'} {\n          > #{ $select-item } {\n            &#{ $select-rule-col } {\n              background-color: color.get($color);\n              width: $size;\n            }\n          }\n          @include -create-rule-col-position(\n            $position: \"left\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-col: $select-rule-col, \n            $end-class: false\n          );\n          @include -create-rule-col-position(\n            $position: \"right\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-col: $select-rule-col, \n            $end-class: false\n          );\n        }\n        &#{'[#{_attr}*=\"rules-row-style: #{ $name }\"]'} {\n          > #{ $select-item } {\n            &#{ $select-rule-row } {\n              background-color: $color;\n              height: $size;\n            }\n          }\n          @include -create-rule-row-position(\n            $position: \"top\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-row: $select-rule-row, \n            $between: false\n          );\n          @include -create-rule-row-position(\n            $position: \"bottom\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-row: $select-rule-row, \n            $between: false\n          );\n          @include -create-rule-row-position(\n            $position: \"bottom\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-row: $select-rule-row, \n            $between: true\n          );\n        }\n      }\n    }\n  }\n",
          "line": {
            "start": 83,
            "end": 407
          }
        }
      },
      {
        "description": "Creates grid css (variation of original data-grid)\n",
        "context": {
          "type": "mixin",
          "name": "create",
          "code": "\n  $attribute-item: \"#{ $attribute }-item\";\n  $select-grid: '[#{ $attribute }*=\"columns: #{ $columns }\"]';\n  $select-item: '[#{ $attribute-item }]';\n  $select-rule-col: \":before\";\n  $select-rule-row: \":after\";\n  // These through off syntax highlighting when inside interpolation\n  $position-class-column-first: get(\"position-class-column-first\");\n  $position-class-column-last: get(\"position-class-column-last\");\n  $position-class-row-first: get(\"position-class-row-first\");\n  $position-class-row-last: get(\"position-class-row-last\");\n\n  #{ $select-grid } {\n    @include layout.clearfix(); // For legacy browsers\n\n    // Ensure empty elements still take up space in layout\n    > #{ $select-item } {\n      min-height: 1px; \n      width: 100%;\n    }\n    // This is for value of true and also covers all options below\n    &#{'[#{ $attribute }*=\"gutters-row:\"]'} { \n      > #{ $select-item } {\n        padding-top:  $gutter;\n        padding-bottom: $gutter;\n      }\n    }\n    &#{'[#{ $attribute }*=\"gutters-row: top\"]'} { \n      > #{ $select-item } {\n        &.#{ $position-class-row-last } {\n          padding-bottom: 0;\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"gutters-row: bottom\"]'} { \n      > #{ $select-item } {\n        &.#{ $position-class-row-first } {\n          padding-top: 0;\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"gutters-row: fit\"]'} { \n      margin-top: -$gutter;\n      margin-bottom: -$gutter;\n    }\n    // Rules: Row\n    &#{'[#{ $attribute }*=\"rules-row:\"]'} { \n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          position: absolute;\n          left: 0;\n          right: 0;\n          height: $rule-size;\n          background: color.get($rule-color);\n        }\n      }\n    }\n    // Rules: Applies to both column and row\n    &#{'[#{ $attribute }*=\"rules\"]'} { \n      > #{ $select-item } {\n        position: relative;\n      }\n    }\n    // Rules: Column\n    &#{'[#{ $attribute }*=\"rules-column:\"]'} { \n      > #{ $select-item } {\n        &#{ $select-rule-col } {\n          position: absolute;\n          top: 0;\n          bottom: 0;\n          width: $rule-size;\n          background: color.get($rule-color);\n        }\n      }\n    }\n    // Options for the left or right\n    @include -create-rule-col-position(\n      $position: \"left\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-col: $select-rule-col, \n      $end-class: $position-class-column-first\n    );\n    @include -create-rule-col-position(\n      $position: \"right\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-col: $select-rule-col, \n      $end-class: $position-class-column-last\n    );\n    // Override first or last column removing the rule using matching specificity\n    &#{'[#{ $attribute }*=\"rules-column:\"][#{ $attribute }*=\"rules-column-ends: true\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-col } {\n          content: '';\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"rules-column-align: gutter\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-col } {\n          top: $gutter;\n          bottom: $gutter;\n        }\n      }\n    }\n    // Options for the left or right\n    @include -create-rule-row-position(\n      $position: \"top\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-row: $select-rule-row, \n      $between: false\n    );\n    @include -create-rule-row-position(\n      $position: \"bottom\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-row: $select-rule-row, \n      $between: false\n    );\n\n    &#{'[#{ $attribute }*=\"rules-row: between\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          bottom: math.floor(math.div($rule-size, 2)) * -1;\n        }\n        // For removing the rule per row (via equal heights for now)\n        &.#{ $position-class-row-last } {\n          &#{ $select-rule-row } {\n            content: none;\n          }\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"rules-row-align: gutter\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          left: $gutter;\n          right: $gutter;\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"rules-row-persist: true\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          content: '';\n        }\n      }\n    }\n  }\n\n  @include breakpoint.min($breakpoint) {\n    // Select the attribute with matching column count\n    #{ $select-grid } {\n      // Defaults for grid an item\n      display: flex;\n      flex-flow: row wrap;\n      align-items: stretch;\n      margin-left: -$gutter;\n      margin-right: -$gutter;\n\n      > #{ $select-item } {\n        float: left; // Fallback\n        padding-left: $gutter;\n        padding-right: $gutter;\n      }\n      // Alignment options\n      &#{'[#{ $attribute }*=\"align: center\"]'} { \n        align-items: center;  \n      }\n      &#{'[#{ $attribute }*=\"align: end\"]'} { \n        align-items: flex-end;\n      }\n      &#{'[#{ $attribute }*=\"align: start\"]'} { \n        align-items: flex-start; \n      }\n      // Alignment of the children when using stretch\n      // - There is no stetch-start (that's defualt);\n      // - There is no stetch-middle (that's covered by stretch-);\n      &#{'[#{ $attribute }*=\"align: stretch-\"]'} { \n        // set the child to display as a single flex item\n        > #{ $select-item } {\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n        }\n      }\n      &#{'[#{ $attribute }*=\"align: stretch-end\"]'} { \n        > #{ $select-item } {\n          justify-content: flex-end;\n        }\n      }\n      // Other options\n      &#{'[#{ $attribute }*=\"gutters: false\"]'} { \n        margin-left: 0;\n        margin-right: 0;\n        > #{ $select-item } {\n          padding-left: 0;\n          padding-right: 0;\n        }\n      }\n      // Activate Rules\n      &#{'[#{ $attribute }*=\"rules-column:\"]'} {\n        > #{ $select-item } {\n          &#{ $select-rule-col } {\n            content: '';\n          }\n        }\n      }\n      &#{'[#{ $attribute }*=\"rules-row:\"]'} {\n        > #{ $select-item } {\n          &#{ $select-rule-row } {\n            content: '';\n          }\n        }\n      }\n      // Generated props for item\n      @include -create-column-widths(\n        $columns: $columns,\n        $attribute-item: $attribute-item,\n        $suffix: ''\n      );\n      @include -create-column-offsets(\n        $columns: $columns,\n        $attribute-item: $attribute-item,\n        $suffix: ''\n      );\n    }\n  }\n\n  @if $extra-breakpoints {\n    @each $name, $options in $extra-breakpoints {\n      $g: map.get($options, \"gutter\");\n      @include -create-extra-breakpoint(\n        $name: $name, \n        $breakpoint: map.get($options, \"breakpoint\"),\n        $gutter: if($g, $g, $gutter),\n        $columns: $columns,\n        $attribute-item: $attribute-item,\n        $select-grid: $select-grid,\n        $select-item: $select-item\n      );\n    }\n  }\n  @if $extra-rule-styles {\n    @each $name, $options in $extra-rule-styles {\n      $color: utils.require-map-get($options, \"color\", \"grid [extra rule style]\");\n      $size: utils.require-map-get($options, \"size\", \"grid [extra rule style]\");\n      #{ $select-grid } {\n\n        &#{'[#{_attr}*=\"rules-column-style: #{ $name }\"]'} {\n          > #{ $select-item } {\n            &#{ $select-rule-col } {\n              background-color: color.get($color);\n              width: $size;\n            }\n          }\n          @include -create-rule-col-position(\n            $position: \"left\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-col: $select-rule-col, \n            $end-class: false\n          );\n          @include -create-rule-col-position(\n            $position: \"right\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-col: $select-rule-col, \n            $end-class: false\n          );\n        }\n        &#{'[#{_attr}*=\"rules-row-style: #{ $name }\"]'} {\n          > #{ $select-item } {\n            &#{ $select-rule-row } {\n              background-color: $color;\n              height: $size;\n            }\n          }\n          @include -create-rule-row-position(\n            $position: \"top\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-row: $select-rule-row, \n            $between: false\n          );\n          @include -create-rule-row-position(\n            $position: \"bottom\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-row: $select-rule-row, \n            $between: false\n          );\n          @include -create-rule-row-position(\n            $position: \"bottom\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-row: $select-rule-row, \n            $between: true\n          );\n        }\n      }\n    }\n  }\n",
          "line": {
            "start": 83,
            "end": 407
          }
        }
      },
      {
        "description": "Prints all Helper styles\n",
        "context": {
          "type": "mixin",
          "name": "helper-styles",
          "code": "\n  @include utils.file-header(\"helpers\");\n  @if $includes {\n    @include utils.require-list-contains($-all-includes, $includes);\n    $-all-includes: map.merge($-all-includes, $includes) !global;\n  }\n  @if (map.get($-all-includes, \"typography\")) {\n    @include typography.styles;\n  }\n  @if (map.get($-all-includes, \"units\")) {\n    @include units.styles;\n  }\n  @if (map.get($-all-includes, \"display\")) {\n    @include display.styles;\n  }\n  @if (map.get($-all-includes, \"utilities\")) {\n    @include utilities.styles;\n  }\n  @if (map.get($-all-includes, \"print\")) {\n    @include print.styles;\n  }\n  @if (map.get($-all-includes, \"color\")) {\n    @include color.styles;\n  }\n",
          "line": {
            "start": 38,
            "end": 62
          }
        }
      },
      {
        "description": "Prints all Helper styles\n",
        "context": {
          "type": "mixin",
          "name": "helper-styles",
          "code": "\n  @include utils.file-header(\"helpers\");\n  @if $includes {\n    @include utils.require-list-contains($-all-includes, $includes);\n    $-all-includes: map.merge($-all-includes, $includes) !global;\n  }\n  @if (map.get($-all-includes, \"typography\")) {\n    @include typography.styles;\n  }\n  @if (map.get($-all-includes, \"units\")) {\n    @include units.styles;\n  }\n  @if (map.get($-all-includes, \"display\")) {\n    @include display.styles;\n  }\n  @if (map.get($-all-includes, \"utilities\")) {\n    @include utilities.styles;\n  }\n  @if (map.get($-all-includes, \"print\")) {\n    @include print.styles;\n  }\n  @if (map.get($-all-includes, \"color\")) {\n    @include color.styles;\n  }\n",
          "line": {
            "start": 38,
            "end": 62
          }
        }
      },
      {
        "description": "Prints all Helper styles\n",
        "context": {
          "type": "mixin",
          "name": "helper-styles",
          "code": "\n  @include utils.file-header(\"helpers\");\n  @if $includes {\n    @include utils.require-list-contains($-all-includes, $includes);\n    $-all-includes: map.merge($-all-includes, $includes) !global;\n  }\n  @if (map.get($-all-includes, \"typography\")) {\n    @include typography.styles;\n  }\n  @if (map.get($-all-includes, \"units\")) {\n    @include units.styles;\n  }\n  @if (map.get($-all-includes, \"display\")) {\n    @include display.styles;\n  }\n  @if (map.get($-all-includes, \"utilities\")) {\n    @include utilities.styles;\n  }\n  @if (map.get($-all-includes, \"print\")) {\n    @include print.styles;\n  }\n  @if (map.get($-all-includes, \"color\")) {\n    @include color.styles;\n  }\n",
          "line": {
            "start": 38,
            "end": 62
          }
        }
      },
      {
        "description": "Prints all Helper styles\n",
        "context": {
          "type": "mixin",
          "name": "helper-styles",
          "code": "\n  @include utils.file-header(\"helpers\");\n  @if $includes {\n    @include utils.require-list-contains($-all-includes, $includes);\n    $-all-includes: map.merge($-all-includes, $includes) !global;\n  }\n  @if (map.get($-all-includes, \"typography\")) {\n    @include typography.styles;\n  }\n  @if (map.get($-all-includes, \"units\")) {\n    @include units.styles;\n  }\n  @if (map.get($-all-includes, \"display\")) {\n    @include display.styles;\n  }\n  @if (map.get($-all-includes, \"utilities\")) {\n    @include utilities.styles;\n  }\n  @if (map.get($-all-includes, \"print\")) {\n    @include print.styles;\n  }\n  @if (map.get($-all-includes, \"color\")) {\n    @include color.styles;\n  }\n",
          "line": {
            "start": 38,
            "end": 62
          }
        }
      },
      {
        "description": "Prints all Helper styles\n",
        "context": {
          "type": "mixin",
          "name": "helper-styles",
          "code": "\n  @include utils.file-header(\"helpers\");\n  @if $includes {\n    @include utils.require-list-contains($-all-includes, $includes);\n    $-all-includes: map.merge($-all-includes, $includes) !global;\n  }\n  @if (map.get($-all-includes, \"typography\")) {\n    @include typography.styles;\n  }\n  @if (map.get($-all-includes, \"units\")) {\n    @include units.styles;\n  }\n  @if (map.get($-all-includes, \"display\")) {\n    @include display.styles;\n  }\n  @if (map.get($-all-includes, \"utilities\")) {\n    @include utilities.styles;\n  }\n  @if (map.get($-all-includes, \"print\")) {\n    @include print.styles;\n  }\n  @if (map.get($-all-includes, \"color\")) {\n    @include color.styles;\n  }\n",
          "line": {
            "start": 38,
            "end": 62
          }
        }
      },
      {
        "description": "Prints all Helper styles\n",
        "context": {
          "type": "mixin",
          "name": "helper-styles",
          "code": "\n  @include utils.file-header(\"helpers\");\n  @if $includes {\n    @include utils.require-list-contains($-all-includes, $includes);\n    $-all-includes: map.merge($-all-includes, $includes) !global;\n  }\n  @if (map.get($-all-includes, \"typography\")) {\n    @include typography.styles;\n  }\n  @if (map.get($-all-includes, \"units\")) {\n    @include units.styles;\n  }\n  @if (map.get($-all-includes, \"display\")) {\n    @include display.styles;\n  }\n  @if (map.get($-all-includes, \"utilities\")) {\n    @include utilities.styles;\n  }\n  @if (map.get($-all-includes, \"print\")) {\n    @include print.styles;\n  }\n  @if (map.get($-all-includes, \"color\")) {\n    @include color.styles;\n  }\n",
          "line": {
            "start": 38,
            "end": 62
          }
        }
      },
      {
        "description": "Prints Typography Helper styles\n",
        "context": {
          "type": "mixin",
          "name": "helper-typography-styles",
          "code": "\n  \n  @include utils.file-header('helpers', 'typography');\n\n  $prefix: selector.class(\"type\");\n\n  @each $size, $values in typography.$sizes {\n    @if (map.get($values, \"helper-class\")) {\n      @if (map.get($values, \"helper-class-prefixed\")) {\n        #{ $prefix }-#{$size} {\n          @include typography.size($size);\n        }\n      } @else {\n        .#{$size} {\n          @include typography.size($size);\n        }\n      }\n    }\n  }\n  \n  #{ $prefix }-light    { font-weight: typography.get(\"font-weight-light\"); }\n  #{ $prefix }-normal   { font-weight: typography.get(\"font-weight-normal\"); }\n  #{ $prefix }-semibold { font-weight: typography.get(\"font-weight-semibold\"); }\n  #{ $prefix }-bold     { font-weight: typography.get(\"font-weight-bold\"); }\n  \n  #{ $prefix }-italic   { font-style: italic; }\n\n  #{ $prefix }-center   { text-align: center; }\n  #{ $prefix }-left     { text-align: left; }\n  #{ $prefix }-right    { text-align: right; }\n\n  #{ $prefix }-upper    { \n    text-transform: uppercase; \n    letter-spacing: typography.get(\"letter-spacing-uppercase\");\n  }\n  #{ $prefix }-lower    { text-transform: lowercase; }\n  #{ $prefix }-title    { text-transform: capitalize; }\n\n  #{ $prefix }-family { font-family: typography.get(\"font-family\"); }\n  #{ $prefix }-family-sans { font-family: typography.get(\"font-family-sans\"); }\n  #{ $prefix }-family-serif { font-family: typography.get(\"font-family-serif\"); }\n  #{ $prefix }-family-mono { font-family: typography.get(\"font-family-monospace\"); }\n\n  #{ $prefix }-word-break { @include typography.word-break(); }\n  #{ $prefix }-word-break-all { @include typography.word-break(true); }\n\n  #{ $prefix }-max-width { max-width: typography.get(\"max-width\"); }\n  #{ $prefix }-max-width-small { max-width: typography.get(\"max-width-small\"); }\n  #{ selector.class(\"line-height\") }-dense { line-height: typography.get(\"line-height-dense\"); }\n  #{ selector.class(\"line-height\") }-spaced { line-height: typography.get(\"line-height-spaced\"); }\n",
          "line": {
            "start": 23,
            "end": 73
          }
        }
      },
      {
        "description": "Prints Typography Helper styles\n",
        "context": {
          "type": "mixin",
          "name": "helper-typography-styles",
          "code": "\n  \n  @include utils.file-header('helpers', 'typography');\n\n  $prefix: selector.class(\"type\");\n\n  @each $size, $values in typography.$sizes {\n    @if (map.get($values, \"helper-class\")) {\n      @if (map.get($values, \"helper-class-prefixed\")) {\n        #{ $prefix }-#{$size} {\n          @include typography.size($size);\n        }\n      } @else {\n        .#{$size} {\n          @include typography.size($size);\n        }\n      }\n    }\n  }\n  \n  #{ $prefix }-light    { font-weight: typography.get(\"font-weight-light\"); }\n  #{ $prefix }-normal   { font-weight: typography.get(\"font-weight-normal\"); }\n  #{ $prefix }-semibold { font-weight: typography.get(\"font-weight-semibold\"); }\n  #{ $prefix }-bold     { font-weight: typography.get(\"font-weight-bold\"); }\n  \n  #{ $prefix }-italic   { font-style: italic; }\n\n  #{ $prefix }-center   { text-align: center; }\n  #{ $prefix }-left     { text-align: left; }\n  #{ $prefix }-right    { text-align: right; }\n\n  #{ $prefix }-upper    { \n    text-transform: uppercase; \n    letter-spacing: typography.get(\"letter-spacing-uppercase\");\n  }\n  #{ $prefix }-lower    { text-transform: lowercase; }\n  #{ $prefix }-title    { text-transform: capitalize; }\n\n  #{ $prefix }-family { font-family: typography.get(\"font-family\"); }\n  #{ $prefix }-family-sans { font-family: typography.get(\"font-family-sans\"); }\n  #{ $prefix }-family-serif { font-family: typography.get(\"font-family-serif\"); }\n  #{ $prefix }-family-mono { font-family: typography.get(\"font-family-monospace\"); }\n\n  #{ $prefix }-word-break { @include typography.word-break(); }\n  #{ $prefix }-word-break-all { @include typography.word-break(true); }\n\n  #{ $prefix }-max-width { max-width: typography.get(\"max-width\"); }\n  #{ $prefix }-max-width-small { max-width: typography.get(\"max-width-small\"); }\n  #{ selector.class(\"line-height\") }-dense { line-height: typography.get(\"line-height-dense\"); }\n  #{ selector.class(\"line-height\") }-spaced { line-height: typography.get(\"line-height-spaced\"); }\n",
          "line": {
            "start": 23,
            "end": 73
          }
        }
      },
      {
        "description": "Prints Typography Helper styles\n",
        "context": {
          "type": "mixin",
          "name": "helper-typography-styles",
          "code": "\n  \n  @include utils.file-header('helpers', 'typography');\n\n  $prefix: selector.class(\"type\");\n\n  @each $size, $values in typography.$sizes {\n    @if (map.get($values, \"helper-class\")) {\n      @if (map.get($values, \"helper-class-prefixed\")) {\n        #{ $prefix }-#{$size} {\n          @include typography.size($size);\n        }\n      } @else {\n        .#{$size} {\n          @include typography.size($size);\n        }\n      }\n    }\n  }\n  \n  #{ $prefix }-light    { font-weight: typography.get(\"font-weight-light\"); }\n  #{ $prefix }-normal   { font-weight: typography.get(\"font-weight-normal\"); }\n  #{ $prefix }-semibold { font-weight: typography.get(\"font-weight-semibold\"); }\n  #{ $prefix }-bold     { font-weight: typography.get(\"font-weight-bold\"); }\n  \n  #{ $prefix }-italic   { font-style: italic; }\n\n  #{ $prefix }-center   { text-align: center; }\n  #{ $prefix }-left     { text-align: left; }\n  #{ $prefix }-right    { text-align: right; }\n\n  #{ $prefix }-upper    { \n    text-transform: uppercase; \n    letter-spacing: typography.get(\"letter-spacing-uppercase\");\n  }\n  #{ $prefix }-lower    { text-transform: lowercase; }\n  #{ $prefix }-title    { text-transform: capitalize; }\n\n  #{ $prefix }-family { font-family: typography.get(\"font-family\"); }\n  #{ $prefix }-family-sans { font-family: typography.get(\"font-family-sans\"); }\n  #{ $prefix }-family-serif { font-family: typography.get(\"font-family-serif\"); }\n  #{ $prefix }-family-mono { font-family: typography.get(\"font-family-monospace\"); }\n\n  #{ $prefix }-word-break { @include typography.word-break(); }\n  #{ $prefix }-word-break-all { @include typography.word-break(true); }\n\n  #{ $prefix }-max-width { max-width: typography.get(\"max-width\"); }\n  #{ $prefix }-max-width-small { max-width: typography.get(\"max-width-small\"); }\n  #{ selector.class(\"line-height\") }-dense { line-height: typography.get(\"line-height-dense\"); }\n  #{ selector.class(\"line-height\") }-spaced { line-height: typography.get(\"line-height-spaced\"); }\n",
          "line": {
            "start": 23,
            "end": 73
          }
        }
      },
      {
        "description": "Prints Typography Helper styles\n",
        "context": {
          "type": "mixin",
          "name": "helper-typography-styles",
          "code": "\n  \n  @include utils.file-header('helpers', 'typography');\n\n  $prefix: selector.class(\"type\");\n\n  @each $size, $values in typography.$sizes {\n    @if (map.get($values, \"helper-class\")) {\n      @if (map.get($values, \"helper-class-prefixed\")) {\n        #{ $prefix }-#{$size} {\n          @include typography.size($size);\n        }\n      } @else {\n        .#{$size} {\n          @include typography.size($size);\n        }\n      }\n    }\n  }\n  \n  #{ $prefix }-light    { font-weight: typography.get(\"font-weight-light\"); }\n  #{ $prefix }-normal   { font-weight: typography.get(\"font-weight-normal\"); }\n  #{ $prefix }-semibold { font-weight: typography.get(\"font-weight-semibold\"); }\n  #{ $prefix }-bold     { font-weight: typography.get(\"font-weight-bold\"); }\n  \n  #{ $prefix }-italic   { font-style: italic; }\n\n  #{ $prefix }-center   { text-align: center; }\n  #{ $prefix }-left     { text-align: left; }\n  #{ $prefix }-right    { text-align: right; }\n\n  #{ $prefix }-upper    { \n    text-transform: uppercase; \n    letter-spacing: typography.get(\"letter-spacing-uppercase\");\n  }\n  #{ $prefix }-lower    { text-transform: lowercase; }\n  #{ $prefix }-title    { text-transform: capitalize; }\n\n  #{ $prefix }-family { font-family: typography.get(\"font-family\"); }\n  #{ $prefix }-family-sans { font-family: typography.get(\"font-family-sans\"); }\n  #{ $prefix }-family-serif { font-family: typography.get(\"font-family-serif\"); }\n  #{ $prefix }-family-mono { font-family: typography.get(\"font-family-monospace\"); }\n\n  #{ $prefix }-word-break { @include typography.word-break(); }\n  #{ $prefix }-word-break-all { @include typography.word-break(true); }\n\n  #{ $prefix }-max-width { max-width: typography.get(\"max-width\"); }\n  #{ $prefix }-max-width-small { max-width: typography.get(\"max-width-small\"); }\n  #{ selector.class(\"line-height\") }-dense { line-height: typography.get(\"line-height-dense\"); }\n  #{ selector.class(\"line-height\") }-spaced { line-height: typography.get(\"line-height-spaced\"); }\n",
          "line": {
            "start": 23,
            "end": 73
          }
        }
      },
      {
        "description": "Prints Typography Helper styles\n",
        "context": {
          "type": "mixin",
          "name": "helper-typography-styles",
          "code": "\n  \n  @include utils.file-header('helpers', 'typography');\n\n  $prefix: selector.class(\"type\");\n\n  @each $size, $values in typography.$sizes {\n    @if (map.get($values, \"helper-class\")) {\n      @if (map.get($values, \"helper-class-prefixed\")) {\n        #{ $prefix }-#{$size} {\n          @include typography.size($size);\n        }\n      } @else {\n        .#{$size} {\n          @include typography.size($size);\n        }\n      }\n    }\n  }\n  \n  #{ $prefix }-light    { font-weight: typography.get(\"font-weight-light\"); }\n  #{ $prefix }-normal   { font-weight: typography.get(\"font-weight-normal\"); }\n  #{ $prefix }-semibold { font-weight: typography.get(\"font-weight-semibold\"); }\n  #{ $prefix }-bold     { font-weight: typography.get(\"font-weight-bold\"); }\n  \n  #{ $prefix }-italic   { font-style: italic; }\n\n  #{ $prefix }-center   { text-align: center; }\n  #{ $prefix }-left     { text-align: left; }\n  #{ $prefix }-right    { text-align: right; }\n\n  #{ $prefix }-upper    { \n    text-transform: uppercase; \n    letter-spacing: typography.get(\"letter-spacing-uppercase\");\n  }\n  #{ $prefix }-lower    { text-transform: lowercase; }\n  #{ $prefix }-title    { text-transform: capitalize; }\n\n  #{ $prefix }-family { font-family: typography.get(\"font-family\"); }\n  #{ $prefix }-family-sans { font-family: typography.get(\"font-family-sans\"); }\n  #{ $prefix }-family-serif { font-family: typography.get(\"font-family-serif\"); }\n  #{ $prefix }-family-mono { font-family: typography.get(\"font-family-monospace\"); }\n\n  #{ $prefix }-word-break { @include typography.word-break(); }\n  #{ $prefix }-word-break-all { @include typography.word-break(true); }\n\n  #{ $prefix }-max-width { max-width: typography.get(\"max-width\"); }\n  #{ $prefix }-max-width-small { max-width: typography.get(\"max-width-small\"); }\n  #{ selector.class(\"line-height\") }-dense { line-height: typography.get(\"line-height-dense\"); }\n  #{ selector.class(\"line-height\") }-spaced { line-height: typography.get(\"line-height-spaced\"); }\n",
          "line": {
            "start": 23,
            "end": 73
          }
        }
      },
      {
        "description": "Prints Typography Helper styles\n",
        "context": {
          "type": "mixin",
          "name": "helper-typography-styles",
          "code": "\n  \n  @include utils.file-header('helpers', 'typography');\n\n  $prefix: selector.class(\"type\");\n\n  @each $size, $values in typography.$sizes {\n    @if (map.get($values, \"helper-class\")) {\n      @if (map.get($values, \"helper-class-prefixed\")) {\n        #{ $prefix }-#{$size} {\n          @include typography.size($size);\n        }\n      } @else {\n        .#{$size} {\n          @include typography.size($size);\n        }\n      }\n    }\n  }\n  \n  #{ $prefix }-light    { font-weight: typography.get(\"font-weight-light\"); }\n  #{ $prefix }-normal   { font-weight: typography.get(\"font-weight-normal\"); }\n  #{ $prefix }-semibold { font-weight: typography.get(\"font-weight-semibold\"); }\n  #{ $prefix }-bold     { font-weight: typography.get(\"font-weight-bold\"); }\n  \n  #{ $prefix }-italic   { font-style: italic; }\n\n  #{ $prefix }-center   { text-align: center; }\n  #{ $prefix }-left     { text-align: left; }\n  #{ $prefix }-right    { text-align: right; }\n\n  #{ $prefix }-upper    { \n    text-transform: uppercase; \n    letter-spacing: typography.get(\"letter-spacing-uppercase\");\n  }\n  #{ $prefix }-lower    { text-transform: lowercase; }\n  #{ $prefix }-title    { text-transform: capitalize; }\n\n  #{ $prefix }-family { font-family: typography.get(\"font-family\"); }\n  #{ $prefix }-family-sans { font-family: typography.get(\"font-family-sans\"); }\n  #{ $prefix }-family-serif { font-family: typography.get(\"font-family-serif\"); }\n  #{ $prefix }-family-mono { font-family: typography.get(\"font-family-monospace\"); }\n\n  #{ $prefix }-word-break { @include typography.word-break(); }\n  #{ $prefix }-word-break-all { @include typography.word-break(true); }\n\n  #{ $prefix }-max-width { max-width: typography.get(\"max-width\"); }\n  #{ $prefix }-max-width-small { max-width: typography.get(\"max-width-small\"); }\n  #{ selector.class(\"line-height\") }-dense { line-height: typography.get(\"line-height-dense\"); }\n  #{ selector.class(\"line-height\") }-spaced { line-height: typography.get(\"line-height-spaced\"); }\n",
          "line": {
            "start": 23,
            "end": 73
          }
        }
      },
      {
        "description": "Prints Typography Helper styles\n",
        "context": {
          "type": "mixin",
          "name": "helper-typography-styles",
          "code": "\n  \n  @include utils.file-header('helpers', 'typography');\n\n  $prefix: selector.class(\"type\");\n\n  @each $size, $values in typography.$sizes {\n    @if (map.get($values, \"helper-class\")) {\n      @if (map.get($values, \"helper-class-prefixed\")) {\n        #{ $prefix }-#{$size} {\n          @include typography.size($size);\n        }\n      } @else {\n        .#{$size} {\n          @include typography.size($size);\n        }\n      }\n    }\n  }\n  \n  #{ $prefix }-light    { font-weight: typography.get(\"font-weight-light\"); }\n  #{ $prefix }-normal   { font-weight: typography.get(\"font-weight-normal\"); }\n  #{ $prefix }-semibold { font-weight: typography.get(\"font-weight-semibold\"); }\n  #{ $prefix }-bold     { font-weight: typography.get(\"font-weight-bold\"); }\n  \n  #{ $prefix }-italic   { font-style: italic; }\n\n  #{ $prefix }-center   { text-align: center; }\n  #{ $prefix }-left     { text-align: left; }\n  #{ $prefix }-right    { text-align: right; }\n\n  #{ $prefix }-upper    { \n    text-transform: uppercase; \n    letter-spacing: typography.get(\"letter-spacing-uppercase\");\n  }\n  #{ $prefix }-lower    { text-transform: lowercase; }\n  #{ $prefix }-title    { text-transform: capitalize; }\n\n  #{ $prefix }-family { font-family: typography.get(\"font-family\"); }\n  #{ $prefix }-family-sans { font-family: typography.get(\"font-family-sans\"); }\n  #{ $prefix }-family-serif { font-family: typography.get(\"font-family-serif\"); }\n  #{ $prefix }-family-mono { font-family: typography.get(\"font-family-monospace\"); }\n\n  #{ $prefix }-word-break { @include typography.word-break(); }\n  #{ $prefix }-word-break-all { @include typography.word-break(true); }\n\n  #{ $prefix }-max-width { max-width: typography.get(\"max-width\"); }\n  #{ $prefix }-max-width-small { max-width: typography.get(\"max-width-small\"); }\n  #{ selector.class(\"line-height\") }-dense { line-height: typography.get(\"line-height-dense\"); }\n  #{ selector.class(\"line-height\") }-spaced { line-height: typography.get(\"line-height-spaced\"); }\n",
          "line": {
            "start": 23,
            "end": 73
          }
        }
      },
      {
        "description": "Prints Typography Helper styles\n",
        "context": {
          "type": "mixin",
          "name": "helper-typography-styles",
          "code": "\n  \n  @include utils.file-header('helpers', 'typography');\n\n  $prefix: selector.class(\"type\");\n\n  @each $size, $values in typography.$sizes {\n    @if (map.get($values, \"helper-class\")) {\n      @if (map.get($values, \"helper-class-prefixed\")) {\n        #{ $prefix }-#{$size} {\n          @include typography.size($size);\n        }\n      } @else {\n        .#{$size} {\n          @include typography.size($size);\n        }\n      }\n    }\n  }\n  \n  #{ $prefix }-light    { font-weight: typography.get(\"font-weight-light\"); }\n  #{ $prefix }-normal   { font-weight: typography.get(\"font-weight-normal\"); }\n  #{ $prefix }-semibold { font-weight: typography.get(\"font-weight-semibold\"); }\n  #{ $prefix }-bold     { font-weight: typography.get(\"font-weight-bold\"); }\n  \n  #{ $prefix }-italic   { font-style: italic; }\n\n  #{ $prefix }-center   { text-align: center; }\n  #{ $prefix }-left     { text-align: left; }\n  #{ $prefix }-right    { text-align: right; }\n\n  #{ $prefix }-upper    { \n    text-transform: uppercase; \n    letter-spacing: typography.get(\"letter-spacing-uppercase\");\n  }\n  #{ $prefix }-lower    { text-transform: lowercase; }\n  #{ $prefix }-title    { text-transform: capitalize; }\n\n  #{ $prefix }-family { font-family: typography.get(\"font-family\"); }\n  #{ $prefix }-family-sans { font-family: typography.get(\"font-family-sans\"); }\n  #{ $prefix }-family-serif { font-family: typography.get(\"font-family-serif\"); }\n  #{ $prefix }-family-mono { font-family: typography.get(\"font-family-monospace\"); }\n\n  #{ $prefix }-word-break { @include typography.word-break(); }\n  #{ $prefix }-word-break-all { @include typography.word-break(true); }\n\n  #{ $prefix }-max-width { max-width: typography.get(\"max-width\"); }\n  #{ $prefix }-max-width-small { max-width: typography.get(\"max-width-small\"); }\n  #{ selector.class(\"line-height\") }-dense { line-height: typography.get(\"line-height-dense\"); }\n  #{ selector.class(\"line-height\") }-spaced { line-height: typography.get(\"line-height-spaced\"); }\n",
          "line": {
            "start": 23,
            "end": 73
          }
        }
      },
      {
        "description": "Prints Typography Helper styles\n",
        "context": {
          "type": "mixin",
          "name": "helper-typography-styles",
          "code": "\n  \n  @include utils.file-header('helpers', 'typography');\n\n  $prefix: selector.class(\"type\");\n\n  @each $size, $values in typography.$sizes {\n    @if (map.get($values, \"helper-class\")) {\n      @if (map.get($values, \"helper-class-prefixed\")) {\n        #{ $prefix }-#{$size} {\n          @include typography.size($size);\n        }\n      } @else {\n        .#{$size} {\n          @include typography.size($size);\n        }\n      }\n    }\n  }\n  \n  #{ $prefix }-light    { font-weight: typography.get(\"font-weight-light\"); }\n  #{ $prefix }-normal   { font-weight: typography.get(\"font-weight-normal\"); }\n  #{ $prefix }-semibold { font-weight: typography.get(\"font-weight-semibold\"); }\n  #{ $prefix }-bold     { font-weight: typography.get(\"font-weight-bold\"); }\n  \n  #{ $prefix }-italic   { font-style: italic; }\n\n  #{ $prefix }-center   { text-align: center; }\n  #{ $prefix }-left     { text-align: left; }\n  #{ $prefix }-right    { text-align: right; }\n\n  #{ $prefix }-upper    { \n    text-transform: uppercase; \n    letter-spacing: typography.get(\"letter-spacing-uppercase\");\n  }\n  #{ $prefix }-lower    { text-transform: lowercase; }\n  #{ $prefix }-title    { text-transform: capitalize; }\n\n  #{ $prefix }-family { font-family: typography.get(\"font-family\"); }\n  #{ $prefix }-family-sans { font-family: typography.get(\"font-family-sans\"); }\n  #{ $prefix }-family-serif { font-family: typography.get(\"font-family-serif\"); }\n  #{ $prefix }-family-mono { font-family: typography.get(\"font-family-monospace\"); }\n\n  #{ $prefix }-word-break { @include typography.word-break(); }\n  #{ $prefix }-word-break-all { @include typography.word-break(true); }\n\n  #{ $prefix }-max-width { max-width: typography.get(\"max-width\"); }\n  #{ $prefix }-max-width-small { max-width: typography.get(\"max-width-small\"); }\n  #{ selector.class(\"line-height\") }-dense { line-height: typography.get(\"line-height-dense\"); }\n  #{ selector.class(\"line-height\") }-spaced { line-height: typography.get(\"line-height-spaced\"); }\n",
          "line": {
            "start": 23,
            "end": 73
          }
        }
      },
      {
        "description": "Prints Typography Helper styles\n",
        "context": {
          "type": "mixin",
          "name": "helper-typography-styles",
          "code": "\n  \n  @include utils.file-header('helpers', 'typography');\n\n  $prefix: selector.class(\"type\");\n\n  @each $size, $values in typography.$sizes {\n    @if (map.get($values, \"helper-class\")) {\n      @if (map.get($values, \"helper-class-prefixed\")) {\n        #{ $prefix }-#{$size} {\n          @include typography.size($size);\n        }\n      } @else {\n        .#{$size} {\n          @include typography.size($size);\n        }\n      }\n    }\n  }\n  \n  #{ $prefix }-light    { font-weight: typography.get(\"font-weight-light\"); }\n  #{ $prefix }-normal   { font-weight: typography.get(\"font-weight-normal\"); }\n  #{ $prefix }-semibold { font-weight: typography.get(\"font-weight-semibold\"); }\n  #{ $prefix }-bold     { font-weight: typography.get(\"font-weight-bold\"); }\n  \n  #{ $prefix }-italic   { font-style: italic; }\n\n  #{ $prefix }-center   { text-align: center; }\n  #{ $prefix }-left     { text-align: left; }\n  #{ $prefix }-right    { text-align: right; }\n\n  #{ $prefix }-upper    { \n    text-transform: uppercase; \n    letter-spacing: typography.get(\"letter-spacing-uppercase\");\n  }\n  #{ $prefix }-lower    { text-transform: lowercase; }\n  #{ $prefix }-title    { text-transform: capitalize; }\n\n  #{ $prefix }-family { font-family: typography.get(\"font-family\"); }\n  #{ $prefix }-family-sans { font-family: typography.get(\"font-family-sans\"); }\n  #{ $prefix }-family-serif { font-family: typography.get(\"font-family-serif\"); }\n  #{ $prefix }-family-mono { font-family: typography.get(\"font-family-monospace\"); }\n\n  #{ $prefix }-word-break { @include typography.word-break(); }\n  #{ $prefix }-word-break-all { @include typography.word-break(true); }\n\n  #{ $prefix }-max-width { max-width: typography.get(\"max-width\"); }\n  #{ $prefix }-max-width-small { max-width: typography.get(\"max-width-small\"); }\n  #{ selector.class(\"line-height\") }-dense { line-height: typography.get(\"line-height-dense\"); }\n  #{ selector.class(\"line-height\") }-spaced { line-height: typography.get(\"line-height-spaced\"); }\n",
          "line": {
            "start": 23,
            "end": 73
          }
        }
      },
      {
        "description": "Prints Typography Helper styles\n",
        "context": {
          "type": "mixin",
          "name": "helper-typography-styles",
          "code": "\n  \n  @include utils.file-header('helpers', 'typography');\n\n  $prefix: selector.class(\"type\");\n\n  @each $size, $values in typography.$sizes {\n    @if (map.get($values, \"helper-class\")) {\n      @if (map.get($values, \"helper-class-prefixed\")) {\n        #{ $prefix }-#{$size} {\n          @include typography.size($size);\n        }\n      } @else {\n        .#{$size} {\n          @include typography.size($size);\n        }\n      }\n    }\n  }\n  \n  #{ $prefix }-light    { font-weight: typography.get(\"font-weight-light\"); }\n  #{ $prefix }-normal   { font-weight: typography.get(\"font-weight-normal\"); }\n  #{ $prefix }-semibold { font-weight: typography.get(\"font-weight-semibold\"); }\n  #{ $prefix }-bold     { font-weight: typography.get(\"font-weight-bold\"); }\n  \n  #{ $prefix }-italic   { font-style: italic; }\n\n  #{ $prefix }-center   { text-align: center; }\n  #{ $prefix }-left     { text-align: left; }\n  #{ $prefix }-right    { text-align: right; }\n\n  #{ $prefix }-upper    { \n    text-transform: uppercase; \n    letter-spacing: typography.get(\"letter-spacing-uppercase\");\n  }\n  #{ $prefix }-lower    { text-transform: lowercase; }\n  #{ $prefix }-title    { text-transform: capitalize; }\n\n  #{ $prefix }-family { font-family: typography.get(\"font-family\"); }\n  #{ $prefix }-family-sans { font-family: typography.get(\"font-family-sans\"); }\n  #{ $prefix }-family-serif { font-family: typography.get(\"font-family-serif\"); }\n  #{ $prefix }-family-mono { font-family: typography.get(\"font-family-monospace\"); }\n\n  #{ $prefix }-word-break { @include typography.word-break(); }\n  #{ $prefix }-word-break-all { @include typography.word-break(true); }\n\n  #{ $prefix }-max-width { max-width: typography.get(\"max-width\"); }\n  #{ $prefix }-max-width-small { max-width: typography.get(\"max-width-small\"); }\n  #{ selector.class(\"line-height\") }-dense { line-height: typography.get(\"line-height-dense\"); }\n  #{ selector.class(\"line-height\") }-spaced { line-height: typography.get(\"line-height-spaced\"); }\n",
          "line": {
            "start": 23,
            "end": 73
          }
        }
      },
      {
        "description": "Prints Typography Helper styles\n",
        "context": {
          "type": "mixin",
          "name": "helper-typography-styles",
          "code": "\n  \n  @include utils.file-header('helpers', 'typography');\n\n  $prefix: selector.class(\"type\");\n\n  @each $size, $values in typography.$sizes {\n    @if (map.get($values, \"helper-class\")) {\n      @if (map.get($values, \"helper-class-prefixed\")) {\n        #{ $prefix }-#{$size} {\n          @include typography.size($size);\n        }\n      } @else {\n        .#{$size} {\n          @include typography.size($size);\n        }\n      }\n    }\n  }\n  \n  #{ $prefix }-light    { font-weight: typography.get(\"font-weight-light\"); }\n  #{ $prefix }-normal   { font-weight: typography.get(\"font-weight-normal\"); }\n  #{ $prefix }-semibold { font-weight: typography.get(\"font-weight-semibold\"); }\n  #{ $prefix }-bold     { font-weight: typography.get(\"font-weight-bold\"); }\n  \n  #{ $prefix }-italic   { font-style: italic; }\n\n  #{ $prefix }-center   { text-align: center; }\n  #{ $prefix }-left     { text-align: left; }\n  #{ $prefix }-right    { text-align: right; }\n\n  #{ $prefix }-upper    { \n    text-transform: uppercase; \n    letter-spacing: typography.get(\"letter-spacing-uppercase\");\n  }\n  #{ $prefix }-lower    { text-transform: lowercase; }\n  #{ $prefix }-title    { text-transform: capitalize; }\n\n  #{ $prefix }-family { font-family: typography.get(\"font-family\"); }\n  #{ $prefix }-family-sans { font-family: typography.get(\"font-family-sans\"); }\n  #{ $prefix }-family-serif { font-family: typography.get(\"font-family-serif\"); }\n  #{ $prefix }-family-mono { font-family: typography.get(\"font-family-monospace\"); }\n\n  #{ $prefix }-word-break { @include typography.word-break(); }\n  #{ $prefix }-word-break-all { @include typography.word-break(true); }\n\n  #{ $prefix }-max-width { max-width: typography.get(\"max-width\"); }\n  #{ $prefix }-max-width-small { max-width: typography.get(\"max-width-small\"); }\n  #{ selector.class(\"line-height\") }-dense { line-height: typography.get(\"line-height-dense\"); }\n  #{ selector.class(\"line-height\") }-spaced { line-height: typography.get(\"line-height-spaced\"); }\n",
          "line": {
            "start": 23,
            "end": 73
          }
        }
      },
      {
        "description": "Prints Typography Helper styles\n",
        "context": {
          "type": "mixin",
          "name": "helper-typography-styles",
          "code": "\n  \n  @include utils.file-header('helpers', 'typography');\n\n  $prefix: selector.class(\"type\");\n\n  @each $size, $values in typography.$sizes {\n    @if (map.get($values, \"helper-class\")) {\n      @if (map.get($values, \"helper-class-prefixed\")) {\n        #{ $prefix }-#{$size} {\n          @include typography.size($size);\n        }\n      } @else {\n        .#{$size} {\n          @include typography.size($size);\n        }\n      }\n    }\n  }\n  \n  #{ $prefix }-light    { font-weight: typography.get(\"font-weight-light\"); }\n  #{ $prefix }-normal   { font-weight: typography.get(\"font-weight-normal\"); }\n  #{ $prefix }-semibold { font-weight: typography.get(\"font-weight-semibold\"); }\n  #{ $prefix }-bold     { font-weight: typography.get(\"font-weight-bold\"); }\n  \n  #{ $prefix }-italic   { font-style: italic; }\n\n  #{ $prefix }-center   { text-align: center; }\n  #{ $prefix }-left     { text-align: left; }\n  #{ $prefix }-right    { text-align: right; }\n\n  #{ $prefix }-upper    { \n    text-transform: uppercase; \n    letter-spacing: typography.get(\"letter-spacing-uppercase\");\n  }\n  #{ $prefix }-lower    { text-transform: lowercase; }\n  #{ $prefix }-title    { text-transform: capitalize; }\n\n  #{ $prefix }-family { font-family: typography.get(\"font-family\"); }\n  #{ $prefix }-family-sans { font-family: typography.get(\"font-family-sans\"); }\n  #{ $prefix }-family-serif { font-family: typography.get(\"font-family-serif\"); }\n  #{ $prefix }-family-mono { font-family: typography.get(\"font-family-monospace\"); }\n\n  #{ $prefix }-word-break { @include typography.word-break(); }\n  #{ $prefix }-word-break-all { @include typography.word-break(true); }\n\n  #{ $prefix }-max-width { max-width: typography.get(\"max-width\"); }\n  #{ $prefix }-max-width-small { max-width: typography.get(\"max-width-small\"); }\n  #{ selector.class(\"line-height\") }-dense { line-height: typography.get(\"line-height-dense\"); }\n  #{ selector.class(\"line-height\") }-spaced { line-height: typography.get(\"line-height-spaced\"); }\n",
          "line": {
            "start": 23,
            "end": 73
          }
        }
      },
      {
        "description": "Prints Typography Helper styles\n",
        "context": {
          "type": "mixin",
          "name": "helper-typography-styles",
          "code": "\n  \n  @include utils.file-header('helpers', 'typography');\n\n  $prefix: selector.class(\"type\");\n\n  @each $size, $values in typography.$sizes {\n    @if (map.get($values, \"helper-class\")) {\n      @if (map.get($values, \"helper-class-prefixed\")) {\n        #{ $prefix }-#{$size} {\n          @include typography.size($size);\n        }\n      } @else {\n        .#{$size} {\n          @include typography.size($size);\n        }\n      }\n    }\n  }\n  \n  #{ $prefix }-light    { font-weight: typography.get(\"font-weight-light\"); }\n  #{ $prefix }-normal   { font-weight: typography.get(\"font-weight-normal\"); }\n  #{ $prefix }-semibold { font-weight: typography.get(\"font-weight-semibold\"); }\n  #{ $prefix }-bold     { font-weight: typography.get(\"font-weight-bold\"); }\n  \n  #{ $prefix }-italic   { font-style: italic; }\n\n  #{ $prefix }-center   { text-align: center; }\n  #{ $prefix }-left     { text-align: left; }\n  #{ $prefix }-right    { text-align: right; }\n\n  #{ $prefix }-upper    { \n    text-transform: uppercase; \n    letter-spacing: typography.get(\"letter-spacing-uppercase\");\n  }\n  #{ $prefix }-lower    { text-transform: lowercase; }\n  #{ $prefix }-title    { text-transform: capitalize; }\n\n  #{ $prefix }-family { font-family: typography.get(\"font-family\"); }\n  #{ $prefix }-family-sans { font-family: typography.get(\"font-family-sans\"); }\n  #{ $prefix }-family-serif { font-family: typography.get(\"font-family-serif\"); }\n  #{ $prefix }-family-mono { font-family: typography.get(\"font-family-monospace\"); }\n\n  #{ $prefix }-word-break { @include typography.word-break(); }\n  #{ $prefix }-word-break-all { @include typography.word-break(true); }\n\n  #{ $prefix }-max-width { max-width: typography.get(\"max-width\"); }\n  #{ $prefix }-max-width-small { max-width: typography.get(\"max-width-small\"); }\n  #{ selector.class(\"line-height\") }-dense { line-height: typography.get(\"line-height-dense\"); }\n  #{ selector.class(\"line-height\") }-spaced { line-height: typography.get(\"line-height-spaced\"); }\n",
          "line": {
            "start": 23,
            "end": 73
          }
        }
      },
      {
        "description": "Prints Typography Helper styles\n",
        "context": {
          "type": "mixin",
          "name": "helper-typography-styles",
          "code": "\n  \n  @include utils.file-header('helpers', 'typography');\n\n  $prefix: selector.class(\"type\");\n\n  @each $size, $values in typography.$sizes {\n    @if (map.get($values, \"helper-class\")) {\n      @if (map.get($values, \"helper-class-prefixed\")) {\n        #{ $prefix }-#{$size} {\n          @include typography.size($size);\n        }\n      } @else {\n        .#{$size} {\n          @include typography.size($size);\n        }\n      }\n    }\n  }\n  \n  #{ $prefix }-light    { font-weight: typography.get(\"font-weight-light\"); }\n  #{ $prefix }-normal   { font-weight: typography.get(\"font-weight-normal\"); }\n  #{ $prefix }-semibold { font-weight: typography.get(\"font-weight-semibold\"); }\n  #{ $prefix }-bold     { font-weight: typography.get(\"font-weight-bold\"); }\n  \n  #{ $prefix }-italic   { font-style: italic; }\n\n  #{ $prefix }-center   { text-align: center; }\n  #{ $prefix }-left     { text-align: left; }\n  #{ $prefix }-right    { text-align: right; }\n\n  #{ $prefix }-upper    { \n    text-transform: uppercase; \n    letter-spacing: typography.get(\"letter-spacing-uppercase\");\n  }\n  #{ $prefix }-lower    { text-transform: lowercase; }\n  #{ $prefix }-title    { text-transform: capitalize; }\n\n  #{ $prefix }-family { font-family: typography.get(\"font-family\"); }\n  #{ $prefix }-family-sans { font-family: typography.get(\"font-family-sans\"); }\n  #{ $prefix }-family-serif { font-family: typography.get(\"font-family-serif\"); }\n  #{ $prefix }-family-mono { font-family: typography.get(\"font-family-monospace\"); }\n\n  #{ $prefix }-word-break { @include typography.word-break(); }\n  #{ $prefix }-word-break-all { @include typography.word-break(true); }\n\n  #{ $prefix }-max-width { max-width: typography.get(\"max-width\"); }\n  #{ $prefix }-max-width-small { max-width: typography.get(\"max-width-small\"); }\n  #{ selector.class(\"line-height\") }-dense { line-height: typography.get(\"line-height-dense\"); }\n  #{ selector.class(\"line-height\") }-spaced { line-height: typography.get(\"line-height-spaced\"); }\n",
          "line": {
            "start": 23,
            "end": 73
          }
        }
      },
      {
        "description": "Creates the unit classes with all variations (from unit presets)\n- This can be used by itself if not outputing .styles() or if you wanted to change the default prefixes\n",
        "context": {
          "type": "mixin",
          "name": "create-property-classes",
          "code": "\n  // On all sides\n  #{ $prefix } {\n    #{ $property } : units.get(1);\n  }\n  @each $name, $value in units.$config {\n    #{ $prefix }-#{ $name } {\n      #{ $property }: units.get($name);\n    }\n  }\n  // Individual sides\n  @each $side in get(\"sides\") {\n    $full-prop: #{ $property }-#{ $side };\n    #{ $prefix }-#{ $side } {\n      #{ $full-prop }: units.get(1);\n    }\n    @each $name, $value in units.$config {\n      #{ $prefix }-#{ $side }-#{ $name } {\n        #{ $full-prop }: units.get($name);\n      }\n    }\n  }\n",
          "line": {
            "start": 46,
            "end": 68
          }
        }
      },
      {
        "description": "Creates the unit classes with all variations (from unit presets)\n- This can be used by itself if not outputing .styles() or if you wanted to change the default prefixes\n",
        "context": {
          "type": "mixin",
          "name": "create-property-classes",
          "code": "\n  // On all sides\n  #{ $prefix } {\n    #{ $property } : units.get(1);\n  }\n  @each $name, $value in units.$config {\n    #{ $prefix }-#{ $name } {\n      #{ $property }: units.get($name);\n    }\n  }\n  // Individual sides\n  @each $side in get(\"sides\") {\n    $full-prop: #{ $property }-#{ $side };\n    #{ $prefix }-#{ $side } {\n      #{ $full-prop }: units.get(1);\n    }\n    @each $name, $value in units.$config {\n      #{ $prefix }-#{ $side }-#{ $name } {\n        #{ $full-prop }: units.get($name);\n      }\n    }\n  }\n",
          "line": {
            "start": 46,
            "end": 68
          }
        }
      },
      {
        "description": "Creates the unit classes with all variations (from unit presets)\n- This can be used by itself if not outputing .styles() or if you wanted to change the default prefixes\n",
        "context": {
          "type": "mixin",
          "name": "create-property-classes",
          "code": "\n  // On all sides\n  #{ $prefix } {\n    #{ $property } : units.get(1);\n  }\n  @each $name, $value in units.$config {\n    #{ $prefix }-#{ $name } {\n      #{ $property }: units.get($name);\n    }\n  }\n  // Individual sides\n  @each $side in get(\"sides\") {\n    $full-prop: #{ $property }-#{ $side };\n    #{ $prefix }-#{ $side } {\n      #{ $full-prop }: units.get(1);\n    }\n    @each $name, $value in units.$config {\n      #{ $prefix }-#{ $side }-#{ $name } {\n        #{ $full-prop }: units.get($name);\n      }\n    }\n  }\n",
          "line": {
            "start": 46,
            "end": 68
          }
        }
      },
      {
        "description": "Creates the unit classes with all variations (from unit presets)\n- This can be used by itself if not outputing .styles() or if you wanted to change the default prefixes\n",
        "context": {
          "type": "mixin",
          "name": "create-property-classes",
          "code": "\n  // On all sides\n  #{ $prefix } {\n    #{ $property } : units.get(1);\n  }\n  @each $name, $value in units.$config {\n    #{ $prefix }-#{ $name } {\n      #{ $property }: units.get($name);\n    }\n  }\n  // Individual sides\n  @each $side in get(\"sides\") {\n    $full-prop: #{ $property }-#{ $side };\n    #{ $prefix }-#{ $side } {\n      #{ $full-prop }: units.get(1);\n    }\n    @each $name, $value in units.$config {\n      #{ $prefix }-#{ $side }-#{ $name } {\n        #{ $full-prop }: units.get($name);\n      }\n    }\n  }\n",
          "line": {
            "start": 46,
            "end": 68
          }
        }
      },
      {
        "description": "Creates the unit classes with all variations (from unit presets)\n- This can be used by itself if not outputing .styles() or if you wanted to change the default prefixes\n",
        "context": {
          "type": "mixin",
          "name": "create-property-classes",
          "code": "\n  // On all sides\n  #{ $prefix } {\n    #{ $property } : units.get(1);\n  }\n  @each $name, $value in units.$config {\n    #{ $prefix }-#{ $name } {\n      #{ $property }: units.get($name);\n    }\n  }\n  // Individual sides\n  @each $side in get(\"sides\") {\n    $full-prop: #{ $property }-#{ $side };\n    #{ $prefix }-#{ $side } {\n      #{ $full-prop }: units.get(1);\n    }\n    @each $name, $value in units.$config {\n      #{ $prefix }-#{ $side }-#{ $name } {\n        #{ $full-prop }: units.get($name);\n      }\n    }\n  }\n",
          "line": {
            "start": 46,
            "end": 68
          }
        }
      },
      {
        "description": "Returns padding to another property including breakpoints\nie. { top: $containers-padding; }\n",
        "context": {
          "type": "mixin",
          "name": "match-container-padding",
          "code": "\n  $container: get-container($name);\n  $breakpoints: map.get($container, \"breakpoints\");\n  #{ $property }: get-container-padding($name, $sides);\n  @if $breakpoints {\n    @each $breakpoint, $props in $breakpoints {\n      $direction: map.get($props, \"direction\");\n      @include breakpoint.from($name, $direction) {\n        #{ $property }: get-container-padding($name, $sides, $breakpoint);\n      }\n    }\n  }\n",
          "line": {
            "start": 69,
            "end": 81
          }
        }
      },
      {
        "description": "Returns padding to another property including breakpoints\nie. { top: $containers-padding; }\n",
        "context": {
          "type": "mixin",
          "name": "match-container-padding",
          "code": "\n  $container: get-container($name);\n  $breakpoints: map.get($container, \"breakpoints\");\n  #{ $property }: get-container-padding($name, $sides);\n  @if $breakpoints {\n    @each $breakpoint, $props in $breakpoints {\n      $direction: map.get($props, \"direction\");\n      @include breakpoint.from($name, $direction) {\n        #{ $property }: get-container-padding($name, $sides, $breakpoint);\n      }\n    }\n  }\n",
          "line": {
            "start": 69,
            "end": 81
          }
        }
      },
      {
        "description": "Used to allow global prefixing of classes, and also the ability to \nChange a class used in the system (ie. like a component for example)\n",
        "context": {
          "type": "function",
          "name": "class",
          "code": "\n  $override: map.get($-class-overrides, $class);\n  @return \".#{ get(\"prefix\") }#{ if($override, $override, $class) }\";\n",
          "line": {
            "start": 49,
            "end": 52
          }
        }
      },
      {
        "description": "Used to allow global prefixing of classes, and also the ability to \nChange a class used in the system (ie. like a component for example)\n",
        "context": {
          "type": "function",
          "name": "class",
          "code": "\n  $override: map.get($-class-overrides, $class);\n  @return \".#{ get(\"prefix\") }#{ if($override, $override, $class) }\";\n",
          "line": {
            "start": 49,
            "end": 52
          }
        }
      },
      {
        "description": "Get scale of the base font-size\n",
        "context": {
          "type": "function",
          "name": "scale",
          "code": "\n  @return calculate.ratio-scale-size(get(\"font-size\"), get(\"size-ratio\"), get(\"scale-steps\"), $step);\n",
          "line": {
            "start": 75,
            "end": 77
          }
        }
      },
      {
        "description": "Get scale of the base font-size\n",
        "context": {
          "type": "function",
          "name": "scale",
          "code": "\n  @return calculate.ratio-scale-size(get(\"font-size\"), get(\"size-ratio\"), get(\"scale-steps\"), $step);\n",
          "line": {
            "start": 75,
            "end": 77
          }
        }
      },
      {
        "description": "Get scale of the base font-size\n",
        "context": {
          "type": "function",
          "name": "scale",
          "code": "\n  @return calculate.ratio-scale-size(get(\"font-size\"), get(\"size-ratio\"), get(\"scale-steps\"), $step);\n",
          "line": {
            "start": 75,
            "end": 77
          }
        }
      },
      {
        "description": "Get scale of the line-height\n",
        "context": {
          "type": "function",
          "name": "scale-line-height",
          "code": "\n  @return calculate.ratio-scale-size(get(\"line-height\"), get(\"size-line-height-ratio\"), get(\"scale-steps\"), $step);\n",
          "line": {
            "start": 84,
            "end": 86
          }
        }
      },
      {
        "description": "Get scale of the line-height\n",
        "context": {
          "type": "function",
          "name": "scale-line-height",
          "code": "\n  @return calculate.ratio-scale-size(get(\"line-height\"), get(\"size-line-height-ratio\"), get(\"scale-steps\"), $step);\n",
          "line": {
            "start": 84,
            "end": 86
          }
        }
      },
      {
        "description": "Get scale of the line-height\n",
        "context": {
          "type": "function",
          "name": "scale-line-height",
          "code": "\n  @return calculate.ratio-scale-size(get(\"line-height\"), get(\"size-line-height-ratio\"), get(\"scale-steps\"), $step);\n",
          "line": {
            "start": 84,
            "end": 86
          }
        }
      },
      {
        "description": "Convert pixel value to rem value based on typography $font-size\n",
        "context": {
          "type": "function",
          "name": "rem",
          "code": "\n  @if math.unit($pixels) == \"px\"  {\n    @return math.div($pixels, get(\"font-size\")) * 1rem;\n  } @else {\n    @return $pixels + 1rem;\n  }\n",
          "line": {
            "start": 92,
            "end": 98
          }
        }
      },
      {
        "description": "Changes pixels to em\n",
        "context": {
          "type": "function",
          "name": "em",
          "code": "\n  @if (math.unit($value) == \"px\") {\n    $base: if($base, $base, get(\"font-size\"));\n    @return math.div($base, $value) * 1em;\n  } @else  {\n    @return $value;\n  }\n",
          "line": {
            "start": 105,
            "end": 112
          }
        }
      },
      {
        "description": "Creates a size map \n- This is just an accelerator for creating a size map\n- You can pass your own size maps using set-sizes()\n",
        "context": {
          "type": "function",
          "name": "new-size",
          "code": "\n  @return (\n    \"font-size\": $font-size,\n    \"font-weight\" : if($is-headline, get(\"font-weight-headline\"), null), \n    \"line-height\": $line-height,\n    \"responsive\" : true,\n    \"helper-class\" : if($is-headline, false, true),\n    \"helper-class-prefixed\" : true,\n    \"base-class\" : if($is-headline, true, false),\n    \"base-class-prefixed\" : false\n  );\n",
          "line": {
            "start": 130,
            "end": 141
          }
        }
      },
      {
        "description": "Print a font-size for a given size\n",
        "context": {
          "type": "function",
          "name": "font-size",
          "code": "\n  $size: get-size($name);\n  $font-size: map.get($size, \"font-size\");\n  @return rem($font-size);\n",
          "line": {
            "start": 195,
            "end": 199
          }
        }
      },
      {
        "description": "Print a value from the size and convert it (to appropriate unit for framework)\n",
        "context": {
          "type": "function",
          "name": "get-size-converted-value",
          "code": "\n  // Font size is calculated differently\n  $value: map.get($size, $prop);\n  $font-size: map.get($size, \"font-size\");\n  $type: meta.type-of($value);\n  \n  @if ($value == false or $value == null) {\n    @return null;\n  // Numbers and true (default) need to be converted\n  } @else if ($value == true or $type == number) {\n    // Get default value\n    @if ($value == true)  {\n      $value: get($prop);\n    }\n    // Force line-height to be unitless\n    @if ($prop == \"line-height\") {\n      @return unitless-line-height($value, $font-size);\n    }\n    // Convert to REM\n    @if (math.unit($value) == \"px\") {\n      $value: rem($value);\n    }\n    @return $value;\n  } @else {\n    @return $value;\n  }\n",
          "line": {
            "start": 224,
            "end": 250
          }
        }
      },
      {
        "description": "Print a value from the size and convert it (to appropriate unit for framework)\n",
        "context": {
          "type": "function",
          "name": "get-size-converted-value",
          "code": "\n  // Font size is calculated differently\n  $value: map.get($size, $prop);\n  $font-size: map.get($size, \"font-size\");\n  $type: meta.type-of($value);\n  \n  @if ($value == false or $value == null) {\n    @return null;\n  // Numbers and true (default) need to be converted\n  } @else if ($value == true or $type == number) {\n    // Get default value\n    @if ($value == true)  {\n      $value: get($prop);\n    }\n    // Force line-height to be unitless\n    @if ($prop == \"line-height\") {\n      @return unitless-line-height($value, $font-size);\n    }\n    // Convert to REM\n    @if (math.unit($value) == \"px\") {\n      $value: rem($value);\n    }\n    @return $value;\n  } @else {\n    @return $value;\n  }\n",
          "line": {
            "start": 224,
            "end": 250
          }
        }
      },
      {
        "description": "Print a value from the size and convert it (to appropriate unit for framework)\n",
        "context": {
          "type": "function",
          "name": "get-size-converted-value",
          "code": "\n  // Font size is calculated differently\n  $value: map.get($size, $prop);\n  $font-size: map.get($size, \"font-size\");\n  $type: meta.type-of($value);\n  \n  @if ($value == false or $value == null) {\n    @return null;\n  // Numbers and true (default) need to be converted\n  } @else if ($value == true or $type == number) {\n    // Get default value\n    @if ($value == true)  {\n      $value: get($prop);\n    }\n    // Force line-height to be unitless\n    @if ($prop == \"line-height\") {\n      @return unitless-line-height($value, $font-size);\n    }\n    // Convert to REM\n    @if (math.unit($value) == \"px\") {\n      $value: rem($value);\n    }\n    @return $value;\n  } @else {\n    @return $value;\n  }\n",
          "line": {
            "start": 224,
            "end": 250
          }
        }
      },
      {
        "description": "Get a sizes property value that doesn't need conversion \n- Reason: Will map to default if user set's size prop to true\n",
        "context": {
          "type": "function",
          "name": "get-size-value",
          "code": "\n  $value: map.get($size, $prop);\n  // Default\n  @if ($value == true) {\n    $value: get($prop);\n  }\n  @return $value;\n",
          "line": {
            "start": 258,
            "end": 265
          }
        }
      },
      {
        "description": "Get a sizes property value that doesn't need conversion \n- Reason: Will map to default if user set's size prop to true\n",
        "context": {
          "type": "function",
          "name": "get-size-value",
          "code": "\n  $value: map.get($size, $prop);\n  // Default\n  @if ($value == true) {\n    $value: get($prop);\n  }\n  @return $value;\n",
          "line": {
            "start": 258,
            "end": 265
          }
        }
      },
      {
        "description": "Print's the responsive type formula\n",
        "context": {
          "type": "mixin",
          "name": "font-size-responsive",
          "code": "\n  @if (meta.type-of($amount) != \"number\") {\n    $amount: get(\"responsive-change\");\n  }\n  font-size: calc(#{ $font-size } + #{ $amount });\n",
          "line": {
            "start": 271,
            "end": 276
          }
        }
      },
      {
        "description": "Print a typography size (font-size, line-height)\n",
        "context": {
          "type": "mixin",
          "name": "size",
          "code": "\n  $size: $name;\n  // Allow custom maps\n  @if (meta.type-of($name) == \"string\") {\n    $size: get-size($name);\n  }\n  @if ($changes) {\n    $size: map.merge($size, $changes);\n  }\n  $font-size: get-size-converted-value($size, \"font-size\");\n  $breakpoints: map.get($size, \"breakpoints\");\n  $responsive: map.get($size, \"responsive\");\n  $color: map.get($size, \"color\");\n\n  font-size: $font-size;\n  @if ($responsive) {\n    @include font-size-responsive($font-size, $responsive);\n  }\n  @if (not $only-font-size) {\n    font-weight: get-size-value($size, \"font-weight\");\n    font-family: get-size-value($size, \"font-family\");\n    line-height: get-size-converted-value($size, \"line-height\");\n    margin-top: get-size-converted-value($size, \"margin-top\");\n    margin-bottom: get-size-converted-value($size, \"margin-bottom\");\n    color: if($color, color.get($color), null);\n  }\n\n  // If they have breakpoints, process them\n  @if $breakpoints {\n    @each $name, $breakpoint in $breakpoints {\n      $direction: map.get($breakpoint, \"direction\");\n      @include breakpoint.from($name, $direction) {\n        @include size($breakpoint, null, $only-font-size);\n      }\n    }\n  }\n",
          "line": {
            "start": 282,
            "end": 318
          }
        }
      },
      {
        "description": "Print a typography size (font-size, line-height)\n",
        "context": {
          "type": "mixin",
          "name": "size",
          "code": "\n  $size: $name;\n  // Allow custom maps\n  @if (meta.type-of($name) == \"string\") {\n    $size: get-size($name);\n  }\n  @if ($changes) {\n    $size: map.merge($size, $changes);\n  }\n  $font-size: get-size-converted-value($size, \"font-size\");\n  $breakpoints: map.get($size, \"breakpoints\");\n  $responsive: map.get($size, \"responsive\");\n  $color: map.get($size, \"color\");\n\n  font-size: $font-size;\n  @if ($responsive) {\n    @include font-size-responsive($font-size, $responsive);\n  }\n  @if (not $only-font-size) {\n    font-weight: get-size-value($size, \"font-weight\");\n    font-family: get-size-value($size, \"font-family\");\n    line-height: get-size-converted-value($size, \"line-height\");\n    margin-top: get-size-converted-value($size, \"margin-top\");\n    margin-bottom: get-size-converted-value($size, \"margin-bottom\");\n    color: if($color, color.get($color), null);\n  }\n\n  // If they have breakpoints, process them\n  @if $breakpoints {\n    @each $name, $breakpoint in $breakpoints {\n      $direction: map.get($breakpoint, \"direction\");\n      @include breakpoint.from($name, $direction) {\n        @include size($breakpoint, null, $only-font-size);\n      }\n    }\n  }\n",
          "line": {
            "start": 282,
            "end": 318
          }
        }
      },
      {
        "description": "Print a typography size (font-size, line-height)\n",
        "context": {
          "type": "mixin",
          "name": "size",
          "code": "\n  $size: $name;\n  // Allow custom maps\n  @if (meta.type-of($name) == \"string\") {\n    $size: get-size($name);\n  }\n  @if ($changes) {\n    $size: map.merge($size, $changes);\n  }\n  $font-size: get-size-converted-value($size, \"font-size\");\n  $breakpoints: map.get($size, \"breakpoints\");\n  $responsive: map.get($size, \"responsive\");\n  $color: map.get($size, \"color\");\n\n  font-size: $font-size;\n  @if ($responsive) {\n    @include font-size-responsive($font-size, $responsive);\n  }\n  @if (not $only-font-size) {\n    font-weight: get-size-value($size, \"font-weight\");\n    font-family: get-size-value($size, \"font-family\");\n    line-height: get-size-converted-value($size, \"line-height\");\n    margin-top: get-size-converted-value($size, \"margin-top\");\n    margin-bottom: get-size-converted-value($size, \"margin-bottom\");\n    color: if($color, color.get($color), null);\n  }\n\n  // If they have breakpoints, process them\n  @if $breakpoints {\n    @each $name, $breakpoint in $breakpoints {\n      $direction: map.get($breakpoint, \"direction\");\n      @include breakpoint.from($name, $direction) {\n        @include size($breakpoint, null, $only-font-size);\n      }\n    }\n  }\n",
          "line": {
            "start": 282,
            "end": 318
          }
        }
      },
      {
        "description": "Print a typography size (font-size, line-height)\n",
        "context": {
          "type": "mixin",
          "name": "size",
          "code": "\n  $size: $name;\n  // Allow custom maps\n  @if (meta.type-of($name) == \"string\") {\n    $size: get-size($name);\n  }\n  @if ($changes) {\n    $size: map.merge($size, $changes);\n  }\n  $font-size: get-size-converted-value($size, \"font-size\");\n  $breakpoints: map.get($size, \"breakpoints\");\n  $responsive: map.get($size, \"responsive\");\n  $color: map.get($size, \"color\");\n\n  font-size: $font-size;\n  @if ($responsive) {\n    @include font-size-responsive($font-size, $responsive);\n  }\n  @if (not $only-font-size) {\n    font-weight: get-size-value($size, \"font-weight\");\n    font-family: get-size-value($size, \"font-family\");\n    line-height: get-size-converted-value($size, \"line-height\");\n    margin-top: get-size-converted-value($size, \"margin-top\");\n    margin-bottom: get-size-converted-value($size, \"margin-bottom\");\n    color: if($color, color.get($color), null);\n  }\n\n  // If they have breakpoints, process them\n  @if $breakpoints {\n    @each $name, $breakpoint in $breakpoints {\n      $direction: map.get($breakpoint, \"direction\");\n      @include breakpoint.from($name, $direction) {\n        @include size($breakpoint, null, $only-font-size);\n      }\n    }\n  }\n",
          "line": {
            "start": 282,
            "end": 318
          }
        }
      },
      {
        "description": "Print a typography size (font-size, line-height)\n",
        "context": {
          "type": "mixin",
          "name": "size",
          "code": "\n  $size: $name;\n  // Allow custom maps\n  @if (meta.type-of($name) == \"string\") {\n    $size: get-size($name);\n  }\n  @if ($changes) {\n    $size: map.merge($size, $changes);\n  }\n  $font-size: get-size-converted-value($size, \"font-size\");\n  $breakpoints: map.get($size, \"breakpoints\");\n  $responsive: map.get($size, \"responsive\");\n  $color: map.get($size, \"color\");\n\n  font-size: $font-size;\n  @if ($responsive) {\n    @include font-size-responsive($font-size, $responsive);\n  }\n  @if (not $only-font-size) {\n    font-weight: get-size-value($size, \"font-weight\");\n    font-family: get-size-value($size, \"font-family\");\n    line-height: get-size-converted-value($size, \"line-height\");\n    margin-top: get-size-converted-value($size, \"margin-top\");\n    margin-bottom: get-size-converted-value($size, \"margin-bottom\");\n    color: if($color, color.get($color), null);\n  }\n\n  // If they have breakpoints, process them\n  @if $breakpoints {\n    @each $name, $breakpoint in $breakpoints {\n      $direction: map.get($breakpoint, \"direction\");\n      @include breakpoint.from($name, $direction) {\n        @include size($breakpoint, null, $only-font-size);\n      }\n    }\n  }\n",
          "line": {
            "start": 282,
            "end": 318
          }
        }
      },
      {
        "description": "Get a required value from a map, throw an error if not found\n- Remeber that that maps cannot intentionally use null (use false instead, if trying to avoid output if unconfigured)\n",
        "context": {
          "type": "function",
          "name": "require-map-get",
          "code": "\n  $value: map.get($map, $key);\n  @if ($value != null) {\n    @return $value;\n  } @else {\n    @if (get(\"debug-maps\")) {\n      @debug $map;\n    }\n    @error 'ULU: Unable to find  \"#{ $key }\" in #{ $context } map.';\n  }\n",
          "line": {
            "start": 48,
            "end": 58
          }
        }
      },
      {
        "description": "Get a required value from a map, throw an error if not found\n- Remeber that that maps cannot intentionally use null (use false instead, if trying to avoid output if unconfigured)\n",
        "context": {
          "type": "function",
          "name": "require-map-get",
          "code": "\n  $value: map.get($map, $key);\n  @if ($value != null) {\n    @return $value;\n  } @else {\n    @if (get(\"debug-maps\")) {\n      @debug $map;\n    }\n    @error 'ULU: Unable to find  \"#{ $key }\" in #{ $context } map.';\n  }\n",
          "line": {
            "start": 48,
            "end": 58
          }
        }
      },
      {
        "description": "Returns true if we should include something (map of booleans)\n",
        "context": {
          "type": "function",
          "name": "included",
          "code": "\n  $value: map.get($includes, $name);\n  @return $value == true;\n",
          "line": {
            "start": 86,
            "end": 89
          }
        }
      },
      {
        "description": "Helps in providing a dynamic fallback for modules whose defaults should come from another\n",
        "context": {
          "type": "function",
          "name": "function-fallback",
          "code": "\n  // If there was already a value return it else resolve through passed function\n  @if ($value == true)  {\n    $fn: map.get($lookup, $prop);\n    @if ($fn) {\n      @return meta.call($fn, $prop);\n    } \n  }\n  @return $value;\n",
          "line": {
            "start": 156,
            "end": 165
          }
        }
      }
    ]
  },
  {
    "description": "Prints elements base styles\n",
    "commentRange": {
      "start": 40,
      "end": 43
    },
    "context": {
      "type": "mixin",
      "name": "base-elements-styles",
      "code": "\n\n  @include utils.file-header('base', 'elements');\n\n  *,\n  ::before,\n  ::after {\n    box-sizing: border-box;\n  }\n  html {\n    -webkit-text-size-adjust: 100%;\n    @media (prefers-reduced-motion: no-preference) {\n      scroll-behavior: smooth;\n    }\n  }\n  body {\n    color: color.get('type');\n    background-color: white;\n    font-family: typography.get(\"font-family\");\n    margin: 0;\n    // Note we are using relative units here instead of setting a \n    // pixel base like we use to on the HTML\n    // This will allow the user preference in font size\n    // Useful for accessibility\n    @include typography.size(\"base\");\n    @include breakpoint.embed-for-scripts();\n  }\n  h1, \n  h2, \n  h3, \n  h4, \n  h5, \n  h6, \n  ul, \n  ol, \n  li,\n  pre, \n  code,\n  p { \n    margin: 0;\n    padding: 0;\n    font-size: inherit;\n    font-family: inherit;\n    border-width: 0;\n    border-style: solid;\n    font-weight: inherit;\n  }\n  p {\n    $margin-top: typography.get(\"margin-top\");\n    margin-top: if($margin-top, $margin-top, 0);\n    margin-bottom: typography.get(\"margin-bottom\"); \n  }\n  sub, sup {\n    font-size: 75%;\n    line-height: 0;\n    position: relative;\n    vertical-align: baseline;\n  }\n  small { \n    @include typography.size(\"small\", (\"line-height\" : typography.get(\"line-height-dense\"))); \n  }\n  sub { \n    bottom: -0.25em; \n  }\n  sup { \n    top: -0.5em; \n  }\n  b, \n  strong { \n    font-weight: bold; \n  }\n  code,\n  kbd,\n  samp,\n  pre {\n    font-family: typography.get(\"font-family-monospace\");\n  }\n  hr {\n    height: 0;\n    border: 0;\n    box-sizing: content-box;\n    overflow: visible;\n    margin: element.get(\"margin\") 0;\n    border-bottom: element.get-rule-style();\n  }\n  iframe {\n    border: 0;\n    outline: 0;\n  }\n  figure {\n    margin: 0;\n  }\n  img {\n    display: block;\n    width: auto;\n    height: auto;\n    max-width: 100%;\n    border-style: none;\n  }\n  // Not styling ordered lists because they are used in navigation and other UI components\n  ul { \n    list-style: none; \n  }\n  // Style ordered lists since we don't use them much in the UI components\n  ol {\n    @include element.styles-ordered-list();\n  }\n  \n  a {\n    @if (get(\"links-state-styling\")) {\n      @include element.link();\n    } @else {\n      @include element.link-defaults();\n    }\n  }\n  // button,\n  // [type=\"button\"],\n  // [type=\"reset\"],\n  // [type=\"submit\"] {\n  //   @include button.reset();\n  // }\n  // For accessible tabs\n  [role=\"tab\"] {\n    cursor: pointer;\n  }\n  dt { \n    font-weight: bold;\n  }\n  [hidden], \n  template {\n    display: none;\n  }\n  blockquote {\n    margin: 0;\n  }\n",
      "line": {
        "start": 45,
        "end": 180
      }
    },
    "example": [
      {
        "type": "scss",
        "code": "@include ulu.base-elements-styles();"
      }
    ],
    "group": [
      "base"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get-rule-style"
      },
      {
        "type": "function",
        "name": "get"
      }
    ],
    "file": {
      "path": "base/_elements.scss",
      "name": "_elements.scss"
    }
  },
  {
    "description": "Prints all Base styles\n",
    "commentRange": {
      "start": 31,
      "end": 35
    },
    "context": {
      "type": "mixin",
      "name": "base-styles",
      "code": "\n  @include utils.file-header(\"base\");\n  @if $includes {\n    @include utils.require-list-contains($-all-includes, $includes);\n    $-all-includes: map.merge($-all-includes, $includes) !global;\n  }\n  @if (map.get($-all-includes, \"normalize\")) {\n    @include normalize.styles;\n  }\n  @if (map.get($-all-includes, \"elements\")) {\n    @include elements.styles;\n  }\n  @if (map.get($-all-includes, \"keyframes\")) {\n    @include keyframes.styles;\n  }\n  @if (map.get( $-all-includes, \"typography\")) {\n    @include typography.styles;\n  }\n  @if (map.get($-all-includes, \"color\")) {\n    @include color.styles;\n  }\n  @if (map.get($-all-includes, \"layout\")) {\n    @include layout.styles;\n  }\n",
      "line": {
        "start": 37,
        "end": 61
      }
    },
    "parameter": [
      {
        "type": "List",
        "name": "includes",
        "description": "A list of changes to this module's includes"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "@include ulu.base-styles();"
      }
    ],
    "group": [
      "base"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      }
    ],
    "file": {
      "path": "base/_index.scss",
      "name": "_index.scss"
    }
  },
  {
    "description": "Prints CSS keyframes\n",
    "commentRange": {
      "start": 7,
      "end": 10
    },
    "context": {
      "type": "mixin",
      "name": "base-keyframes-styles",
      "code": "\n  @include utils.file-header('base', 'keyframes');\n  @keyframes fadeIn {\n    0% {\n      opacity: 0; \n    }\n    100% {\n      opacity: 1; \n    }\n  }\n  @keyframes FadeDownIn {\n    0% {\n      opacity: 0; \n      transform: translateY(-10px);\n    }\n    100%  {\n      opacity: 1; \n      transform: translateY(0);\n    }\n  }\n  @keyframes fadeInLeft {\n    0% {\n      opacity: 0; \n      transform: translatex(-10px);\n    }\n    100% {\n      opacity: 1; \n      transform: translatex(0);\n    }\n  }\n  @keyframes fadeInZoom {\n    // Delay\n    0% {\n      opacity: 0; \n      transform: scale(0);\n    }\n    // Start\n    50% {\n      opacity: 0; \n      transform: scale(0);\n    }\n    100%  {\n      opacity: 1; \n      transform: scale(1);\n    }\n  }\n  @keyframes rotate {\n    0% {\n      transform: rotate(0deg);\n    }\n    100%  {\n      transform: rotate(360deg);\n    }\n  }\n  @keyframes spin {\n    from {\n      transform:rotate(0deg);\n    }\n    to {\n      transform:rotate(360deg);\n    }\n  }\n",
      "line": {
        "start": 12,
        "end": 74
      }
    },
    "example": [
      {
        "type": "scss",
        "code": "@include ulu.base-keyframes-styles();"
      }
    ],
    "group": [
      "base"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "scale"
      },
      {
        "type": "function",
        "name": "scale"
      },
      {
        "type": "function",
        "name": "scale"
      }
    ],
    "file": {
      "path": "base/_keyframes.scss",
      "name": "_keyframes.scss"
    }
  },
  {
    "description": "Prints the normalize stylesheet. We are using modern-normalize 1.1.0\n",
    "commentRange": {
      "start": 9,
      "end": 13
    },
    "context": {
      "type": "mixin",
      "name": "base-normalize-styles",
      "code": "\n\n  @include utils.file-header('base', 'normalize');\n  \n  /*! modern-normalize v1.1.0 | MIT License | https://github.com/sindresorhus/modern-normalize */\n\n  /*\n  Document\n  ========\n  */\n\n  /**\n  Use a better box model (opinionated).\n  */\n\n  // *,\n  // ::before,\n  // ::after {\n  //   box-sizing: border-box;\n  // }\n\n  /**\n  Use a more readable tab size (opinionated).\n  */\n\n  html {\n    -moz-tab-size: 4;\n    tab-size: 4;\n  }\n\n  /**\n  1. Correct the line height in all browsers.\n  2. Prevent adjustments of font size after orientation changes in iOS.\n  */\n\n  // html {\n  //   line-height: 1.15; /* 1 */\n  //   -webkit-text-size-adjust: 100%; /* 2 */\n  // }\n\n  /*\n  Sections\n  ========\n  */\n\n  /**\n  Remove the margin in all browsers.\n  */\n\n  // body {\n  //   margin: 0;\n  // }\n\n  /**\n  Improve consistency of default fonts in all browsers. (https://github.com/sindresorhus/modern-normalize/issues/3)\n  */\n\n  // body {\n  //   font-family:\n  //     system-ui,\n  //     -apple-system, /* Firefox supports this but not yet `system-ui` */\n  //     'Segoe UI',\n  //     Roboto,\n  //     Helvetica,\n  //     Arial,\n  //     sans-serif,\n  //     'Apple Color Emoji',\n  //     'Segoe UI Emoji';\n  // }\n\n  /*\n  Grouping content\n  ================\n  */\n\n  /**\n  1. Add the correct height in Firefox.\n  2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)\n  */\n\n  \n\n  /*\n  Text-level semantics\n  ====================\n  */\n\n  /**\n  Add the correct text decoration in Chrome, Edge, and Safari.\n  */\n\n  abbr[title] {\n    text-decoration: underline dotted;\n  }\n\n  /**\n  Add the correct font weight in Edge and Safari.\n  */\n\n  // b,\n  // strong {\n  //   font-weight: bolder;\n  // }\n\n  /**\n  1. Improve consistency of default fonts in all browsers. (https://github.com/sindresorhus/modern-normalize/issues/3)\n  2. Correct the odd 'em' font sizing in all browsers.\n  */\n\n  // code,\n  // kbd,\n  // samp,\n  // pre {\n  //   font-family:\n  //     ui-monospace,\n  //     SFMono-Regular,\n  //     Consolas,\n  //     'Liberation Mono',\n  //     Menlo,\n  //     monospace; /* 1 */\n  //   font-size: 1em; /* 2 */\n  // }\n\n  /**\n  Add the correct font size in all browsers.\n  */\n\n  // small {\n  //   font-size: 80%;\n  // }\n\n  /**\n  Prevent 'sub' and 'sup' elements from affecting the line height in all browsers.\n  */\n\n  // sub,\n  // sup {\n  //   font-size: 75%;\n  //   line-height: 0;\n  //   position: relative;\n  //   vertical-align: baseline;\n  // }\n\n  // sub {\n  //   bottom: -0.25em;\n  // }\n\n  // sup {\n  //   top: -0.5em;\n  // }\n\n  /*\n  Tabular data\n  ============\n  */\n\n  /**\n  1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)\n  2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)\n  */\n\n  table {\n    text-indent: 0; /* 1 */\n    // border-color: inherit; /* 2 */\n  }\n\n  /*\n  Forms\n  =====\n  */\n\n  /**\n  1. Change the font styles in all browsers.\n  2. Remove the margin in Firefox and Safari.\n  */\n\n  button,\n  input,\n  optgroup,\n  select,\n  textarea {\n    font-family: inherit; /* 1 */\n    // font-size: 100%; /* 1 */\n    // line-height: 1.15; /* 1 */\n    line-height: inherit;\n    font-size: 1rem;\n    margin: 0; /* 2 */\n  }\n\n  /**\n  Remove the inheritance of text transform in Edge and Firefox.\n  1. Remove the inheritance of text transform in Firefox.\n  */\n\n  button,\n  select { /* 1 */\n    text-transform: none;\n  }\n\n  /**\n  Correct the inability to style clickable types in iOS and Safari.\n  */\n\n  button,\n  [type='button'],\n  [type='reset'],\n  [type='submit'] {\n    @include button.reset();\n  }\n\n  /**\n  Remove the inner border and padding in Firefox.\n  */\n\n  ::-moz-focus-inner {\n    border-style: none;\n    padding: 0;\n  }\n\n  /**\n  Restore the focus styles unset by the previous rule.\n  */\n\n  :-moz-focusring {\n    outline: 1px dotted ButtonText;\n  }\n\n  /**\n  Remove the additional ':invalid' styles in Firefox.\n  See: https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737\n  */\n\n  :-moz-ui-invalid {\n    box-shadow: none;\n  }\n\n  /**\n  Remove the padding so developers are not caught out when they zero out 'fieldset' elements in all browsers.\n  */\n\n  legend {\n    padding: 0;\n  }\n\n  /**\n  Add the correct vertical alignment in Chrome and Firefox.\n  */\n\n  progress {\n    vertical-align: baseline;\n  }\n\n  /**\n  Correct the cursor style of increment and decrement buttons in Safari.\n  */\n\n  ::-webkit-inner-spin-button,\n  ::-webkit-outer-spin-button {\n    height: auto;\n  }\n\n  /**\n  1. Correct the odd appearance in Chrome and Safari.\n  2. Correct the outline style in Safari.\n  */\n\n  [type='search'] {\n    -webkit-appearance: textfield; /* 1 */\n    outline-offset: -2px; /* 2 */\n  }\n\n  /**\n  Remove the inner padding in Chrome and Safari on macOS.\n  */\n\n  ::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n\n  /**\n  1. Correct the inability to style clickable types in iOS and Safari.\n  2. Change font properties to 'inherit' in Safari.\n  */\n\n  ::-webkit-file-upload-button {\n    -webkit-appearance: button; /* 1 */\n    font: inherit; /* 2 */\n  }\n\n  /*\n  Interactive\n  ===========\n  */\n\n  /*\n  Add the correct display in Chrome and Safari.\n  */\n\n  summary {\n    display: list-item;\n  }\n",
      "line": {
        "start": 15,
        "end": 316
      }
    },
    "link": [
      {
        "url": "https://www.npmjs.com/package/modern-normalize",
        "caption": "Modern Normalize (NPM)"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "@include ulu.base-normalize-styles();"
      }
    ],
    "group": [
      "base"
    ],
    "access": "public",
    "require": [],
    "file": {
      "path": "base/_normalize.scss",
      "name": "_normalize.scss"
    }
  },
  {
    "description": "Prints elements base styles\n",
    "commentRange": {
      "start": 10,
      "end": 20
    },
    "context": {
      "type": "mixin",
      "name": "base-typography-styles",
      "code": "\n\n  @include utils.file-header('base', 'typography');\n\n  $prefix: selector.class(\"type\");\n\n  // Print base typographic sizes\n  @each $size, $values in typography.$sizes {\n    @if (map.get($values, \"base-class\")) {\n      @if (map.get($values, \"base-class-prefixed\")) {\n        #{ $prefix }-#{$size} {\n          @include typography.size($size);\n        }\n      } @else {\n        .#{$size} {\n          @include typography.size($size);\n        }\n      }\n    }\n  }\n",
      "line": {
        "start": 22,
        "end": 42
      }
    },
    "example": [
      {
        "type": "scss",
        "code": "@include ulu.base-typography-styles();"
      },
      {
        "type": "html",
        "code": "<span class=\"h1\">A</span>\n<span class=\"h2\">A</span>\n<span class=\"h3\">A</span>\n<span class=\"h4\">A</span>\n<span class=\"h5\">A</span>\n<span class=\"h6\">A</span>",
        "description": "Example of type size as base unprefixed"
      }
    ],
    "group": [
      "base"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "class"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "variable",
        "name": "sizes"
      }
    ],
    "file": {
      "path": "base/_typography.scss",
      "name": "_typography.scss"
    }
  },
  {
    "description": "Module Settings\n",
    "commentRange": {
      "start": 9,
      "end": 14
    },
    "context": {
      "type": "variable",
      "name": "config",
      "value": "(\n  \"base\":      16px,\n  \"gap\":       0.01em,\n  \"null-name\": \"none\",\n  \"default\" :  \"small\"\n)",
      "scope": "default",
      "line": {
        "start": 16,
        "end": 21
      }
    },
    "type": "Map",
    "property": [
      {
        "type": "Number",
        "name": "$config.base",
        "description": "Assumed pixel base, can change based on users font settings so this is just o get us in the ballpark). Note this is not the base font size but the user agent's or user's browser preferernce. This number is just being used for calculating estimated em sizes from average base. Since pixels are easier to understand but since we allow the user to set their font size. All of our css is relative to that, including most of the layout (rems, other relative units)"
      },
      {
        "type": "Number",
        "name": "$config.gap",
        "description": "The amount to offset min from max media queries incase you are using both (ie prevent overlap)"
      },
      {
        "type": "String",
        "name": "$config.null-name",
        "description": "The name of the space from 0 to the first breakpoint (doesn't really matter) used when passing breakpoints to JS via content property"
      },
      {
        "type": "String",
        "name": "$config.default",
        "description": "the name of the breakpont that is considered the major change (ie desktop to mobile) used by other modules/components"
      }
    ],
    "group": [
      "breakpoint"
    ],
    "access": "public",
    "file": {
      "path": "_breakpoint.scss",
      "name": "_breakpoint.scss"
    }
  },
  {
    "description": "Change modules $config\n",
    "commentRange": {
      "start": 23,
      "end": 25
    },
    "context": {
      "type": "mixin",
      "name": "set",
      "code": "\n  $config: map.merge($config, $changes) !global;\n",
      "line": {
        "start": 26,
        "end": 28
      }
    },
    "parameter": [
      {
        "type": "Map",
        "name": "changes",
        "description": "Map of changes\n  @include module-name.set(( \"property\" : value ));"
      }
    ],
    "group": [
      "breakpoint"
    ],
    "access": "public",
    "require": [
      {
        "type": "variable",
        "name": "config"
      },
      {
        "type": "variable",
        "name": "config"
      }
    ],
    "file": {
      "path": "_breakpoint.scss",
      "name": "_breakpoint.scss"
    }
  },
  {
    "description": "Get a config option\n",
    "commentRange": {
      "start": 30,
      "end": 32
    },
    "context": {
      "type": "function",
      "name": "get",
      "code": "\n  @return utils.require-map-get($config, $name, 'breakpoint [config]');\n",
      "line": {
        "start": 34,
        "end": 36
      }
    },
    "parameter": [
      {
        "type": "Map",
        "name": "name",
        "description": "Name of property\n  @include module-name.get(\"property\");"
      }
    ],
    "group": [
      "breakpoint"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "require-map-get"
      },
      {
        "type": "variable",
        "name": "config"
      }
    ],
    "file": {
      "path": "_breakpoint.scss",
      "name": "_breakpoint.scss"
    }
  },
  {
    "description": "The default breakpoint sizes (targets are not precise, using em's)\n",
    "commentRange": {
      "start": 39,
      "end": 40
    },
    "context": {
      "type": "variable",
      "name": "sizes",
      "value": "(\n  \"small\"  : calculate.pixel-to-em(680px, get(\"base\")),\n  \"medium\" : calculate.pixel-to-em(1200px, get(\"base\")),\n  \"large\"  : calculate.pixel-to-em(1500px, get(\"base\"))\n)",
      "scope": "default",
      "line": {
        "start": 42,
        "end": 46
      }
    },
    "type": "Map",
    "group": [
      "breakpoint"
    ],
    "access": "public",
    "file": {
      "path": "_breakpoint.scss",
      "name": "_breakpoint.scss"
    },
    "usedBy": [
      {
        "description": "Prints elements base styles\n",
        "context": {
          "type": "mixin",
          "name": "base-typography-styles",
          "code": "\n\n  @include utils.file-header('base', 'typography');\n\n  $prefix: selector.class(\"type\");\n\n  // Print base typographic sizes\n  @each $size, $values in typography.$sizes {\n    @if (map.get($values, \"base-class\")) {\n      @if (map.get($values, \"base-class-prefixed\")) {\n        #{ $prefix }-#{$size} {\n          @include typography.size($size);\n        }\n      } @else {\n        .#{$size} {\n          @include typography.size($size);\n        }\n      }\n    }\n  }\n",
          "line": {
            "start": 22,
            "end": 42
          }
        }
      },
      {
        "description": "Update the breakpoint sizes map\n",
        "context": {
          "type": "mixin",
          "name": "set",
          "code": "\n  $sizes: map.merge($sizes, $changes) !global;\n",
          "line": {
            "start": 56,
            "end": 58
          }
        }
      },
      {
        "description": "Update the breakpoint sizes map\n",
        "context": {
          "type": "mixin",
          "name": "set",
          "code": "\n  $sizes: map.merge($sizes, $changes) !global;\n",
          "line": {
            "start": 56,
            "end": 58
          }
        }
      },
      {
        "description": "Create a media query that matches the min-width for a given size\n",
        "context": {
          "type": "mixin",
          "name": "min",
          "code": "\n  // Adding the small fraction to prevent overlap\n  $min: utils.require-map-get($sizes, $size, \"breakpoints\"); \n  @media screen and (min-width: $min) {\n    @content;\n  }\n",
          "line": {
            "start": 72,
            "end": 78
          }
        }
      },
      {
        "description": "Create a media query that matches the max-width for a given size\n",
        "context": {
          "type": "mixin",
          "name": "max",
          "code": "\n  // Adding the small fraction to prevent overlap\n  $max: utils.require-map-get($sizes, $size) - get(\"gap\"); \n  @media screen and (max-width: $max) {\n    @content;\n  }\n",
          "line": {
            "start": 87,
            "end": 93
          }
        }
      },
      {
        "description": "Create a media query that matches the min-width and max-width sizes\n",
        "context": {
          "type": "mixin",
          "name": "min-max",
          "code": "\n  // Adding the small fraction to prevent overlap\n  $min: utils.require-map-get($sizes, $size-min, \"breakpoints\"); \n  $max: utils.require-map-get($sizes, $size-max, \"breakpoints\") - get(\"gap\"); \n  @media screen and (min-width: $min) and (max-width: $max) {\n    @content;\n  }\n",
          "line": {
            "start": 102,
            "end": 109
          }
        }
      },
      {
        "description": "Create a media query that matches the min-width and max-width sizes\n",
        "context": {
          "type": "mixin",
          "name": "min-max",
          "code": "\n  // Adding the small fraction to prevent overlap\n  $min: utils.require-map-get($sizes, $size-min, \"breakpoints\"); \n  $max: utils.require-map-get($sizes, $size-max, \"breakpoints\") - get(\"gap\"); \n  @media screen and (min-width: $min) and (max-width: $max) {\n    @content;\n  }\n",
          "line": {
            "start": 102,
            "end": 109
          }
        }
      },
      {
        "description": "Attaches breakpoints to an element psuedo content for access via script\nUse with ulu/js/breakpoints. Breakpoints always min-width (upwards)\n",
        "context": {
          "type": "mixin",
          "name": "embed-for-scripts",
          "code": "\n  &:before {\n    display: none;\n    content: get(\"null-name\");\n    @each $size, $breakpoint in $sizes {\n      @include min($size) {\n        content: $size;\n      }\n    }\n  }\n",
          "line": {
            "start": 129,
            "end": 139
          }
        }
      },
      {
        "description": "Calculate the size of something at a given scale (percentage/exponential)\n",
        "context": {
          "type": "function",
          "name": "ratio-scale-size",
          "code": "\n  @return $base * math.pow($ratio, math.div($size, $sizes));\n",
          "line": {
            "start": 39,
            "end": 41
          }
        }
      },
      {
        "description": "Prints button component styles\n",
        "context": {
          "type": "mixin",
          "name": "component-button-styles",
          "code": "\n  @include utils.file-header('component', 'button');\n\n  $prefix: selector.class(\"button\");\n  $icon-selector: \"#{ $prefix }--icon\";\n\n  #{ $prefix } {\n    @include button.default();\n  }\n  \n  @each $size, $values in button.$sizes {\n    #{ $prefix }--#{$size} {\n      @include button.size($size);\n    }\n  }\n\n  @each $style, $values in button.$styles {\n    #{ $prefix }--#{$style} {\n      @include button.style($style);\n    }\n  }\n\n  #{ $icon-selector } {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    min-width: 0;\n    max-width: none;\n    border-radius: button.get(\"icon-border-radius\");\n    font-size: button.get(\"icon-font-size\");\n    width: button.get(\"icon-size\");\n    height: button.get(\"icon-size\");\n    padding: 0 !important;\n  }\n\n  @each $size, $values in button.$sizes {\n    $icon-size: map.get($values, \"icon-size\");\n    $icon-font-size: map.get($values, \"icon-font-size\");\n    @if ($icon-size or $icon-font-size) {\n      #{ $prefix }--#{$size}#{ $icon-selector } {\n        width: $icon-size;\n        height: $icon-size;\n        font-size: $icon-font-size;\n      }\n    }\n  }\n",
          "line": {
            "start": 18,
            "end": 64
          }
        }
      },
      {
        "description": "Prints button component styles\n",
        "context": {
          "type": "mixin",
          "name": "component-button-styles",
          "code": "\n  @include utils.file-header('component', 'button');\n\n  $prefix: selector.class(\"button\");\n  $icon-selector: \"#{ $prefix }--icon\";\n\n  #{ $prefix } {\n    @include button.default();\n  }\n  \n  @each $size, $values in button.$sizes {\n    #{ $prefix }--#{$size} {\n      @include button.size($size);\n    }\n  }\n\n  @each $style, $values in button.$styles {\n    #{ $prefix }--#{$style} {\n      @include button.style($style);\n    }\n  }\n\n  #{ $icon-selector } {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    min-width: 0;\n    max-width: none;\n    border-radius: button.get(\"icon-border-radius\");\n    font-size: button.get(\"icon-font-size\");\n    width: button.get(\"icon-size\");\n    height: button.get(\"icon-size\");\n    padding: 0 !important;\n  }\n\n  @each $size, $values in button.$sizes {\n    $icon-size: map.get($values, \"icon-size\");\n    $icon-font-size: map.get($values, \"icon-font-size\");\n    @if ($icon-size or $icon-font-size) {\n      #{ $prefix }--#{$size}#{ $icon-selector } {\n        width: $icon-size;\n        height: $icon-size;\n        font-size: $icon-font-size;\n      }\n    }\n  }\n",
          "line": {
            "start": 18,
            "end": 64
          }
        }
      },
      {
        "description": "Print utilities helper styles\n",
        "context": {
          "type": "mixin",
          "name": "helper-display-styles",
          "code": "\n\n  @include utils.file-header('helpers', 'display');\n\n  $hiddenVisuallyPrefix: selector.class(\"hidden-visually\");\n\n  #{ $hiddenVisuallyPrefix } {\n    @include element.hidden-visually();\n  }\n  #{ $hiddenVisuallyPrefix }--focusable {\n    &:active,\n    &:focus {\n      @include element.hidden-visually(false);\n    }\n  }\n  // Consider removing\n  .clearfix,\n  .cf { \n    @include layout.clearfix();\n  }\n  .display-block {\n    display: block;\n  }\n  .display-inline {\n    display: inline;\n  }\n  .display-inline-block {\n    display: inline-block;\n  }\n  .hidden {\n    display: none;\n  }\n\n  // Display none per breakpoint\n  @each $name in map.keys(breakpoint.$sizes) {\n    @include breakpoint.min($name) {\n      .hidden-min-#{ $name } {\n        display: none;\n      }\n    }\n    @include breakpoint.max($name) {\n      .hidden-max-#{ $name } {\n        display: none;\n      }\n    }\n  }\n",
          "line": {
            "start": 19,
            "end": 65
          }
        }
      },
      {
        "description": "Prints Typography Helper styles\n",
        "context": {
          "type": "mixin",
          "name": "helper-typography-styles",
          "code": "\n  \n  @include utils.file-header('helpers', 'typography');\n\n  $prefix: selector.class(\"type\");\n\n  @each $size, $values in typography.$sizes {\n    @if (map.get($values, \"helper-class\")) {\n      @if (map.get($values, \"helper-class-prefixed\")) {\n        #{ $prefix }-#{$size} {\n          @include typography.size($size);\n        }\n      } @else {\n        .#{$size} {\n          @include typography.size($size);\n        }\n      }\n    }\n  }\n  \n  #{ $prefix }-light    { font-weight: typography.get(\"font-weight-light\"); }\n  #{ $prefix }-normal   { font-weight: typography.get(\"font-weight-normal\"); }\n  #{ $prefix }-semibold { font-weight: typography.get(\"font-weight-semibold\"); }\n  #{ $prefix }-bold     { font-weight: typography.get(\"font-weight-bold\"); }\n  \n  #{ $prefix }-italic   { font-style: italic; }\n\n  #{ $prefix }-center   { text-align: center; }\n  #{ $prefix }-left     { text-align: left; }\n  #{ $prefix }-right    { text-align: right; }\n\n  #{ $prefix }-upper    { \n    text-transform: uppercase; \n    letter-spacing: typography.get(\"letter-spacing-uppercase\");\n  }\n  #{ $prefix }-lower    { text-transform: lowercase; }\n  #{ $prefix }-title    { text-transform: capitalize; }\n\n  #{ $prefix }-family { font-family: typography.get(\"font-family\"); }\n  #{ $prefix }-family-sans { font-family: typography.get(\"font-family-sans\"); }\n  #{ $prefix }-family-serif { font-family: typography.get(\"font-family-serif\"); }\n  #{ $prefix }-family-mono { font-family: typography.get(\"font-family-monospace\"); }\n\n  #{ $prefix }-word-break { @include typography.word-break(); }\n  #{ $prefix }-word-break-all { @include typography.word-break(true); }\n\n  #{ $prefix }-max-width { max-width: typography.get(\"max-width\"); }\n  #{ $prefix }-max-width-small { max-width: typography.get(\"max-width-small\"); }\n  #{ selector.class(\"line-height\") }-dense { line-height: typography.get(\"line-height-dense\"); }\n  #{ selector.class(\"line-height\") }-spaced { line-height: typography.get(\"line-height-spaced\"); }\n",
          "line": {
            "start": 23,
            "end": 73
          }
        }
      },
      {
        "description": "Update the typography presets map\n",
        "context": {
          "type": "mixin",
          "name": "set-sizes",
          "code": "\n  $sizes: utils.map-merge-or-overwrite($sizes, $changes, $deep, $overwrite) !global;\n",
          "line": {
            "start": 179,
            "end": 181
          }
        }
      },
      {
        "description": "Update the typography presets map\n",
        "context": {
          "type": "mixin",
          "name": "set-sizes",
          "code": "\n  $sizes: utils.map-merge-or-overwrite($sizes, $changes, $deep, $overwrite) !global;\n",
          "line": {
            "start": 179,
            "end": 181
          }
        }
      },
      {
        "description": "Get a size's map\n",
        "context": {
          "type": "function",
          "name": "get-size",
          "code": "\n  @return utils.require-map-get($sizes, $name, 'typography [size]');\n",
          "line": {
            "start": 187,
            "end": 189
          }
        }
      }
    ]
  },
  {
    "description": "Update the breakpoint sizes map\n",
    "commentRange": {
      "start": 48,
      "end": 54
    },
    "context": {
      "type": "mixin",
      "name": "set",
      "code": "\n  $sizes: map.merge($sizes, $changes) !global;\n",
      "line": {
        "start": 56,
        "end": 58
      }
    },
    "parameter": [
      {
        "type": "Map",
        "name": "changes",
        "description": "A map to merge into the breakpoints map"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "@include breakpoints.set((\n  \"medium\" : 50em,\n  \"jumbo\" : 100em\n));",
        "description": "Changing the medium breakpoint and adding jumbo"
      }
    ],
    "group": [
      "breakpoint"
    ],
    "access": "public",
    "require": [
      {
        "type": "variable",
        "name": "sizes"
      },
      {
        "type": "variable",
        "name": "sizes"
      }
    ],
    "file": {
      "path": "_breakpoint.scss",
      "name": "_breakpoint.scss"
    }
  },
  {
    "description": "Create a media query that matches the min-width for a given size\n",
    "commentRange": {
      "start": 65,
      "end": 70
    },
    "context": {
      "type": "mixin",
      "name": "min",
      "code": "\n  // Adding the small fraction to prevent overlap\n  $min: utils.require-map-get($sizes, $size, \"breakpoints\"); \n  @media screen and (min-width: $min) {\n    @content;\n  }\n",
      "line": {
        "start": 72,
        "end": 78
      }
    },
    "parameter": [
      {
        "type": "Number",
        "name": "size",
        "description": "The name of the breakpoint bsize"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "@include breakpoints.min(\"small\") {\n  // Your styles\n}"
      }
    ],
    "group": [
      "breakpoint"
    ],
    "access": "public",
    "content": "",
    "require": [
      {
        "type": "function",
        "name": "require-map-get"
      },
      {
        "type": "variable",
        "name": "sizes"
      }
    ],
    "file": {
      "path": "_breakpoint.scss",
      "name": "_breakpoint.scss"
    },
    "usedBy": [
      {
        "description": "Attaches breakpoints to an element psuedo content for access via script\nUse with ulu/js/breakpoints. Breakpoints always min-width (upwards)\n",
        "context": {
          "type": "mixin",
          "name": "embed-for-scripts",
          "code": "\n  &:before {\n    display: none;\n    content: get(\"null-name\");\n    @each $size, $breakpoint in $sizes {\n      @include min($size) {\n        content: $size;\n      }\n    }\n  }\n",
          "line": {
            "start": 129,
            "end": 139
          }
        }
      }
    ]
  },
  {
    "description": "Create a media query that matches the max-width for a given size\n",
    "commentRange": {
      "start": 80,
      "end": 85
    },
    "context": {
      "type": "mixin",
      "name": "max",
      "code": "\n  // Adding the small fraction to prevent overlap\n  $max: utils.require-map-get($sizes, $size) - get(\"gap\"); \n  @media screen and (max-width: $max) {\n    @content;\n  }\n",
      "line": {
        "start": 87,
        "end": 93
      }
    },
    "parameter": [
      {
        "type": "Number",
        "name": "size",
        "description": "The name of the breakpoint size"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "@include breakpoints.max(\"medium\") {\n  // Your styles\n}"
      }
    ],
    "group": [
      "breakpoint"
    ],
    "access": "public",
    "content": "",
    "require": [
      {
        "type": "function",
        "name": "require-map-get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "variable",
        "name": "sizes"
      }
    ],
    "file": {
      "path": "_breakpoint.scss",
      "name": "_breakpoint.scss"
    }
  },
  {
    "description": "Create a media query that matches the min-width and max-width sizes\n",
    "commentRange": {
      "start": 95,
      "end": 100
    },
    "context": {
      "type": "mixin",
      "name": "min-max",
      "code": "\n  // Adding the small fraction to prevent overlap\n  $min: utils.require-map-get($sizes, $size-min, \"breakpoints\"); \n  $max: utils.require-map-get($sizes, $size-max, \"breakpoints\") - get(\"gap\"); \n  @media screen and (min-width: $min) and (max-width: $max) {\n    @content;\n  }\n",
      "line": {
        "start": 102,
        "end": 109
      }
    },
    "parameter": [
      {
        "type": "Number",
        "name": "size",
        "description": "The name of the breakpoint size"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "@include breakpoints.min-max(\"small\", \"medium\") {\n  // Your styles\n}"
      }
    ],
    "group": [
      "breakpoint"
    ],
    "access": "public",
    "content": "",
    "require": [
      {
        "type": "function",
        "name": "require-map-get"
      },
      {
        "type": "function",
        "name": "require-map-get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "variable",
        "name": "sizes"
      },
      {
        "type": "variable",
        "name": "sizes"
      }
    ],
    "file": {
      "path": "_breakpoint.scss",
      "name": "_breakpoint.scss"
    }
  },
  {
    "description": "Attaches breakpoints to an element psuedo content for access via script\nUse with ulu/js/breakpoints. Breakpoints always min-width (upwards)\n",
    "commentRange": {
      "start": 126,
      "end": 127
    },
    "context": {
      "type": "mixin",
      "name": "embed-for-scripts",
      "code": "\n  &:before {\n    display: none;\n    content: get(\"null-name\");\n    @each $size, $breakpoint in $sizes {\n      @include min($size) {\n        content: $size;\n      }\n    }\n  }\n",
      "line": {
        "start": 129,
        "end": 139
      }
    },
    "group": [
      "breakpoint"
    ],
    "access": "public",
    "require": [
      {
        "type": "mixin",
        "name": "min"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "variable",
        "name": "sizes"
      }
    ],
    "file": {
      "path": "_breakpoint.scss",
      "name": "_breakpoint.scss"
    }
  },
  {
    "description": "Module Settings\n",
    "commentRange": {
      "start": 20,
      "end": 21
    },
    "context": {
      "type": "variable",
      "name": "config",
      "value": "(\n  \"padding\":                 (0.75em 1.5em),\n  \"background-color\":        color.tint(black, 30%),\n  \"background-color-hover\": black,\n  \"font-family\":             inherit,\n  \"font-weight\":             bold,\n  \"line-height\":             1.1,\n  \"letter-spacing\":          0.02em,\n  \"text-transform\":          uppercase,\n  \"text-shadow\":             none,\n  \"font-size\":               \"base\",\n  \"color\":                   white,\n  \"color-hover\":            white,\n  \"box-shadow\":              true,\n  \"border-radius\":           2rem,\n  \"border-width\":            0,\n  \"border-color\":            transparent,\n  \"border-color-hover\":     transparent,\n  \"margin\":                  (0.45em 0.5em 0.45em 0),\n  \"min-width\":               9rem,\n  \"icon-size\":               2.5rem,\n  \"icon-font-size\":          1.38rem,\n  \"icon-border-radius\":      50%\n)",
      "scope": "default",
      "line": {
        "start": 23,
        "end": 46
      }
    },
    "type": "Map",
    "group": [
      "button"
    ],
    "access": "public",
    "file": {
      "path": "_button.scss",
      "name": "_button.scss"
    }
  },
  {
    "description": "Button sizes\n",
    "commentRange": {
      "start": 48,
      "end": 49
    },
    "context": {
      "type": "variable",
      "name": "sizes",
      "value": "(\n  \"small\" : (\n    \"padding\":        (0.35em 1.5em),\n    \"min-width\":      0,\n    \"icon-size\":      2rem,\n    \"icon-font-size\": 1rem\n  ),\n  \"large\" : (\n    \"padding\":   (1em 2em),\n    \"min-width\": 11rem,\n    \"icon-size\": 3.5rem\n  )\n)",
      "scope": "default",
      "line": {
        "start": 51,
        "end": 63
      }
    },
    "type": "Map",
    "group": [
      "button"
    ],
    "access": "public",
    "file": {
      "path": "_button.scss",
      "name": "_button.scss"
    }
  },
  {
    "description": "Button styles\n",
    "commentRange": {
      "start": 65,
      "end": 66
    },
    "context": {
      "type": "variable",
      "name": "styles",
      "value": "(\n  \"transparent\" : (\n    \"background-color\" : transparent,\n    \"color\" : \"type\",\n    \"border-color\" : transparent,\n    \"box-shadow\" : none,\n    \"hover\" : (\n      \"background-color\" : \"white\",\n      \"color\" : inherit,\n      \"border-color\" : transparent,\n    )\n  ),\n  \"outline\" : (\n    \"background-color\" : transparent,\n    \"color\" : \"type\",\n    \"border-color\" : \"rule\",\n    \"box-shadow\" : none,\n    \"hover\" : (\n      \"background-color\" : \"white\",\n    )\n  ),\n)",
      "scope": "default",
      "line": {
        "start": 68,
        "end": 89
      }
    },
    "type": "Map",
    "group": [
      "button"
    ],
    "access": "public",
    "file": {
      "path": "_button.scss",
      "name": "_button.scss"
    },
    "usedBy": [
      {
        "description": "Prints button component styles\n",
        "context": {
          "type": "mixin",
          "name": "component-button-styles",
          "code": "\n  @include utils.file-header('component', 'button');\n\n  $prefix: selector.class(\"button\");\n  $icon-selector: \"#{ $prefix }--icon\";\n\n  #{ $prefix } {\n    @include button.default();\n  }\n  \n  @each $size, $values in button.$sizes {\n    #{ $prefix }--#{$size} {\n      @include button.size($size);\n    }\n  }\n\n  @each $style, $values in button.$styles {\n    #{ $prefix }--#{$style} {\n      @include button.style($style);\n    }\n  }\n\n  #{ $icon-selector } {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    min-width: 0;\n    max-width: none;\n    border-radius: button.get(\"icon-border-radius\");\n    font-size: button.get(\"icon-font-size\");\n    width: button.get(\"icon-size\");\n    height: button.get(\"icon-size\");\n    padding: 0 !important;\n  }\n\n  @each $size, $values in button.$sizes {\n    $icon-size: map.get($values, \"icon-size\");\n    $icon-font-size: map.get($values, \"icon-font-size\");\n    @if ($icon-size or $icon-font-size) {\n      #{ $prefix }--#{$size}#{ $icon-selector } {\n        width: $icon-size;\n        height: $icon-size;\n        font-size: $icon-font-size;\n      }\n    }\n  }\n",
          "line": {
            "start": 18,
            "end": 64
          }
        }
      }
    ]
  },
  {
    "description": "Change modules $config\n",
    "commentRange": {
      "start": 91,
      "end": 94
    },
    "context": {
      "type": "mixin",
      "name": "set",
      "code": "\n  $config: map.merge($config, $changes) !global;\n",
      "line": {
        "start": 96,
        "end": 98
      }
    },
    "parameter": [
      {
        "type": "Map",
        "name": "changes",
        "description": "Map of changes"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "@include module-name.set(( \"property\" : value ));",
        "description": "General example, replace module-name with module's name"
      }
    ],
    "group": [
      "button"
    ],
    "access": "public",
    "require": [
      {
        "type": "variable",
        "name": "config"
      },
      {
        "type": "variable",
        "name": "config"
      }
    ],
    "file": {
      "path": "_button.scss",
      "name": "_button.scss"
    }
  },
  {
    "description": "Get a config option\n",
    "commentRange": {
      "start": 100,
      "end": 103
    },
    "context": {
      "type": "function",
      "name": "get",
      "code": "\n  $value: utils.require-map-get($config, $name, \"button [config]\");\n  @return utils.function-fallback($name, $value, $-fallbacks);\n",
      "line": {
        "start": 105,
        "end": 109
      }
    },
    "parameter": [
      {
        "type": "Map",
        "name": "name",
        "description": "Name of property"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "@include module-name.get(\"property\");",
        "description": "General example, replace module-name with module's name"
      }
    ],
    "group": [
      "button"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "require-map-get"
      },
      {
        "type": "function",
        "name": "function-fallback"
      },
      {
        "type": "variable",
        "name": "config"
      }
    ],
    "file": {
      "path": "_button.scss",
      "name": "_button.scss"
    }
  },
  {
    "description": "Module Settings\n",
    "commentRange": {
      "start": 9,
      "end": 11
    },
    "context": {
      "type": "variable",
      "name": "config",
      "value": "(\n  \"responsive-change\": 0.5vw\n)",
      "scope": "default",
      "line": {
        "start": 13,
        "end": 15
      }
    },
    "type": "Map",
    "property": [
      {
        "type": "Number",
        "name": "$config.responsive-change",
        "description": "Default responsive amount to modify items using responsive-property mixin"
      }
    ],
    "group": [
      "calculate"
    ],
    "access": "public",
    "file": {
      "path": "_calculate.scss",
      "name": "_calculate.scss"
    }
  },
  {
    "description": "Change modules $config\n",
    "commentRange": {
      "start": 17,
      "end": 19
    },
    "context": {
      "type": "mixin",
      "name": "set",
      "code": "\n  $config: map.merge($config, $changes) !global;\n",
      "line": {
        "start": 20,
        "end": 22
      }
    },
    "parameter": [
      {
        "type": "Map",
        "name": "changes",
        "description": "Map of changes\n  @include module-name.set(( \"property\" : value ));"
      }
    ],
    "group": [
      "calculate"
    ],
    "access": "public",
    "require": [
      {
        "type": "variable",
        "name": "config"
      },
      {
        "type": "variable",
        "name": "config"
      }
    ],
    "file": {
      "path": "_calculate.scss",
      "name": "_calculate.scss"
    }
  },
  {
    "description": "Get a config option\n",
    "commentRange": {
      "start": 24,
      "end": 26
    },
    "context": {
      "type": "function",
      "name": "get",
      "code": "\n  @return utils.require-map-get($config, $name, \"calculate [config]\");\n",
      "line": {
        "start": 28,
        "end": 30
      }
    },
    "parameter": [
      {
        "type": "Map",
        "name": "name",
        "description": "Name of property\n  @include module-name.get(\"property\");"
      }
    ],
    "group": [
      "calculate"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "require-map-get"
      },
      {
        "type": "variable",
        "name": "config"
      }
    ],
    "file": {
      "path": "_calculate.scss",
      "name": "_calculate.scss"
    }
  },
  {
    "description": "Calculate the size of something at a given scale (percentage/exponential)\n",
    "commentRange": {
      "start": 32,
      "end": 37
    },
    "context": {
      "type": "function",
      "name": "ratio-scale-size",
      "code": "\n  @return $base * math.pow($ratio, math.div($size, $sizes));\n",
      "line": {
        "start": 39,
        "end": 41
      }
    },
    "parameter": [
      {
        "type": "Number",
        "name": "base",
        "description": "The number the scale starts at"
      },
      {
        "type": "Number",
        "name": "ratio",
        "description": "The amount the scale changes over one set"
      },
      {
        "type": "Number",
        "name": "sizes",
        "description": "The number of steps in the scale"
      },
      {
        "type": "Number",
        "name": "size",
        "description": "The step you are trying to calculate"
      }
    ],
    "return": {
      "type": "Number"
    },
    "group": [
      "calculate"
    ],
    "access": "public",
    "require": [
      {
        "type": "variable",
        "name": "sizes"
      }
    ],
    "file": {
      "path": "_calculate.scss",
      "name": "_calculate.scss"
    },
    "usedBy": [
      {
        "description": "Get scale of the base font-size\n",
        "context": {
          "type": "function",
          "name": "scale",
          "code": "\n  @return calculate.ratio-scale-size(get(\"font-size\"), get(\"size-ratio\"), get(\"scale-steps\"), $step);\n",
          "line": {
            "start": 75,
            "end": 77
          }
        }
      },
      {
        "description": "Get scale of the line-height\n",
        "context": {
          "type": "function",
          "name": "scale-line-height",
          "code": "\n  @return calculate.ratio-scale-size(get(\"line-height\"), get(\"size-line-height-ratio\"), get(\"scale-steps\"), $step);\n",
          "line": {
            "start": 84,
            "end": 86
          }
        }
      }
    ]
  },
  {
    "description": "Convert from pixel to em\n",
    "commentRange": {
      "start": 43,
      "end": 46
    },
    "context": {
      "type": "function",
      "name": "pixel-to-em",
      "code": "\n  @return math.div($pixels, $base) + 1em;\n",
      "line": {
        "start": 48,
        "end": 50
      }
    },
    "parameter": [
      {
        "type": "Number",
        "name": "pixels",
        "description": "The number the scale starts at"
      },
      {
        "type": "Number",
        "name": "base",
        "description": "How many pixels equal 1em"
      }
    ],
    "return": {
      "type": "Number",
      "description": "Em Conversion"
    },
    "group": [
      "calculate"
    ],
    "access": "public",
    "require": [],
    "file": {
      "path": "_calculate.scss",
      "name": "_calculate.scss"
    }
  },
  {
    "description": "Provides user with a fallback for a calc that's just an enhancement\n",
    "commentRange": {
      "start": 52,
      "end": 55
    },
    "context": {
      "type": "mixin",
      "name": "responsive-property",
      "code": "\n  #{ $property } : $value;\n  #{ $property } : calc(#{ $value } + #{ $responsive-change });\n",
      "line": {
        "start": 57,
        "end": 64
      }
    },
    "parameter": [
      {
        "type": "String",
        "name": "property",
        "description": "The CSS property to set"
      },
      {
        "type": "*",
        "name": "value",
        "description": "The value to set on the property"
      },
      {
        "type": "Css",
        "name": "responsive-change",
        "description": "The amount to change (vw or vh units) (combined with unit past)"
      }
    ],
    "group": [
      "calculate"
    ],
    "access": "public",
    "require": [],
    "file": {
      "path": "_calculate.scss",
      "name": "_calculate.scss"
    }
  },
  {
    "description": "The color palette map, can be extended or modified with set() and accessed with get()\n",
    "commentRange": {
      "start": 10,
      "end": 11
    },
    "context": {
      "type": "variable",
      "name": "palette",
      "value": "(\n  \"black\":        black,\n  \"white\":        white,\n  \"type\":         black,\n  \"focus\":        blue,\n  \"error\":        red,\n  \"accent\":       orange,\n  \"box-shadow\":   rgba(0, 0, 0, 0.349),\n  \"rule\":         gray,\n  \"rule-light\":   lightgray,\n  \"link\":         blue,\n  \"link:hover\":   darkblue,\n  \"link:active\":  darkblue,\n  \"link:visited\": purple,\n  \"bullet\":       inherit\n)",
      "scope": "default",
      "line": {
        "start": 13,
        "end": 28
      }
    },
    "type": "map",
    "group": [
      "color"
    ],
    "access": "public",
    "file": {
      "path": "_color.scss",
      "name": "_color.scss"
    },
    "usedBy": [
      {
        "description": "Used to override or extend the color palette\n",
        "context": {
          "type": "mixin",
          "name": "set",
          "code": "\n  $palette: map.merge($palette, $changes) !global;\n",
          "line": {
            "start": 64,
            "end": 66
          }
        }
      },
      {
        "description": "Used to override or extend the color palette\n",
        "context": {
          "type": "mixin",
          "name": "set",
          "code": "\n  $palette: map.merge($palette, $changes) !global;\n",
          "line": {
            "start": 64,
            "end": 66
          }
        }
      },
      {
        "description": "Get a color from the palette by name\n",
        "context": {
          "type": "function",
          "name": "get",
          "code": "\n  // Allow non lookup if the value is already a color (helps with code flow)\n  @if (meta.type-of($name) == \"color\") {\n    @return $name;\n  }\n  @return utils.require-map-get($palette, $name, 'color');\n",
          "line": {
            "start": 72,
            "end": 78
          }
        }
      }
    ]
  },
  {
    "description": "Pairs of background-color and color definitions\n",
    "commentRange": {
      "start": 30,
      "end": 34
    },
    "context": {
      "type": "variable",
      "name": "contexts",
      "value": "(\n  \"dark\" : (\n    \"background-color\" : \"black\",\n    \"color\" : \"white\",\n    \"base-class\" : true\n  ),\n  \"light\" : (\n    \"background-color\" : \"white\",\n    \"color\" : \"black\",\n    \"base-class\" : true\n  ),\n)",
      "scope": "private",
      "line": {
        "start": 36,
        "end": 47
      }
    },
    "type": "map",
    "property": [
      {
        "type": "Number|String",
        "name": "$contexts.name.background-color",
        "description": "Color value or name of color in $palette"
      },
      {
        "type": "Number|String",
        "name": "$contexts.name.color",
        "description": "Color value or name of color in $palette"
      },
      {
        "type": "Boolean",
        "name": "$contexts.name.base-class",
        "description": "Print this value in the base module as a class (if base prints)"
      }
    ],
    "group": [
      "color"
    ],
    "access": "public",
    "file": {
      "path": "_color.scss",
      "name": "_color.scss"
    },
    "usedBy": [
      {
        "description": "Set color contexts\n",
        "context": {
          "type": "mixin",
          "name": "set-contexts",
          "code": "\n  $contexts: utils.map-merge-or-overwrite($contexts, $changes, $deep, $overwrite) !global;\n",
          "line": {
            "start": 104,
            "end": 106
          }
        }
      },
      {
        "description": "Set color contexts\n",
        "context": {
          "type": "mixin",
          "name": "set-contexts",
          "code": "\n  $contexts: utils.map-merge-or-overwrite($contexts, $changes, $deep, $overwrite) !global;\n",
          "line": {
            "start": 104,
            "end": 106
          }
        }
      },
      {
        "description": "Get a context by name\n",
        "context": {
          "type": "function",
          "name": "get-context",
          "code": "\n  @return utils.require-map-get($contexts, $name, 'context');\n",
          "line": {
            "start": 112,
            "end": 114
          }
        }
      },
      {
        "description": "Prints all context styles \n",
        "context": {
          "type": "mixin",
          "name": "all-context-styles",
          "code": "\n  $prefix: selector.class(\"color-context\");\n  @each $name, $context in $contexts {\n    @if (not $with-prop or map.get($context, $with-prop)) {\n      #{ $prefix }-#{ $name } {\n        @include context-styles($name);\n      }\n    }\n  }\n",
          "line": {
            "start": 172,
            "end": 181
          }
        }
      }
    ]
  },
  {
    "description": "Palette entries that are output as classes when using all-color-class-styles\n",
    "commentRange": {
      "start": 49,
      "end": 49
    },
    "context": {
      "type": "variable",
      "name": "color-classes",
      "value": "(\n  \"black\" : true,\n  \"white\" : true,\n  \"type\": true\n)",
      "scope": "default",
      "line": {
        "start": 50,
        "end": 54
      }
    },
    "group": [
      "color"
    ],
    "access": "public",
    "file": {
      "path": "_color.scss",
      "name": "_color.scss"
    },
    "usedBy": [
      {
        "description": "Set ouput classes for all-color-class-styles\n",
        "context": {
          "type": "mixin",
          "name": "set-color-classes",
          "code": "\n  $color-classes: map.merge($color-classes, $changes) !global;\n",
          "line": {
            "start": 83,
            "end": 85
          }
        }
      },
      {
        "description": "Set ouput classes for all-color-class-styles\n",
        "context": {
          "type": "mixin",
          "name": "set-color-classes",
          "code": "\n  $color-classes: map.merge($color-classes, $changes) !global;\n",
          "line": {
            "start": 83,
            "end": 85
          }
        }
      },
      {
        "description": "Outputs all color classes\n",
        "context": {
          "type": "mixin",
          "name": "all-color-class-styles",
          "code": "\n  $prefix: selector.class(\"color\");\n  @each $name, $output in $color-classes {\n    @if ($output) {\n      #{ $prefix }-#{ $name } {\n        color: get($name);\n      }\n    }\n  }\n",
          "line": {
            "start": 188,
            "end": 197
          }
        }
      }
    ]
  },
  {
    "description": "Used to override or extend the color palette\n",
    "commentRange": {
      "start": 56,
      "end": 62
    },
    "context": {
      "type": "mixin",
      "name": "set",
      "code": "\n  $palette: map.merge($palette, $changes) !global;\n",
      "line": {
        "start": 64,
        "end": 66
      }
    },
    "parameter": [
      {
        "type": "Map",
        "name": "changes",
        "description": "A map to merge into the color palette"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "@include color.set((\n  \"type\" : #444,\n  \"error\" : orange,\n));",
        "description": "Setting the error and type color"
      }
    ],
    "group": [
      "color"
    ],
    "access": "public",
    "require": [
      {
        "type": "variable",
        "name": "palette"
      },
      {
        "type": "variable",
        "name": "palette"
      }
    ],
    "file": {
      "path": "_color.scss",
      "name": "_color.scss"
    }
  },
  {
    "description": "Get a color from the palette by name\n",
    "commentRange": {
      "start": 68,
      "end": 70
    },
    "context": {
      "type": "function",
      "name": "get",
      "code": "\n  // Allow non lookup if the value is already a color (helps with code flow)\n  @if (meta.type-of($name) == \"color\") {\n    @return $name;\n  }\n  @return utils.require-map-get($palette, $name, 'color');\n",
      "line": {
        "start": 72,
        "end": 78
      }
    },
    "parameter": [
      {
        "type": "String",
        "name": "name",
        "description": "Name of color to get"
      }
    ],
    "return": {
      "type": "Color"
    },
    "group": [
      "color"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "require-map-get"
      },
      {
        "type": "variable",
        "name": "palette"
      }
    ],
    "file": {
      "path": "_color.scss",
      "name": "_color.scss"
    }
  },
  {
    "description": "Set ouput classes for all-color-class-styles\n",
    "commentRange": {
      "start": 80,
      "end": 81
    },
    "context": {
      "type": "mixin",
      "name": "set-color-classes",
      "code": "\n  $color-classes: map.merge($color-classes, $changes) !global;\n",
      "line": {
        "start": 83,
        "end": 85
      }
    },
    "parameter": [
      {
        "type": "Map",
        "name": "changes",
        "description": "Map of changes (you can disable defaults this way)"
      }
    ],
    "group": [
      "color"
    ],
    "access": "public",
    "require": [
      {
        "type": "variable",
        "name": "color-classes"
      },
      {
        "type": "variable",
        "name": "color-classes"
      }
    ],
    "file": {
      "path": "_color.scss",
      "name": "_color.scss"
    }
  },
  {
    "description": "Set color contexts\n",
    "commentRange": {
      "start": 92,
      "end": 102
    },
    "context": {
      "type": "mixin",
      "name": "set-contexts",
      "code": "\n  $contexts: utils.map-merge-or-overwrite($contexts, $changes, $deep, $overwrite) !global;\n",
      "line": {
        "start": 104,
        "end": 106
      }
    },
    "parameter": [
      {
        "type": "Map",
        "name": "changes",
        "description": "A map to merge"
      },
      {
        "type": "Map",
        "name": "deep",
        "description": "Use deep merge"
      },
      {
        "type": "Map",
        "name": "overwrite",
        "description": "Overwrite the completly (cannot be used with deep)"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "@include color.set-contexts((\n  \"dark\" : (\n    \"background-color\" : red,\n    \"color\" : white,\n  )\n), false, true);",
        "description": "Overwriting contexts"
      }
    ],
    "group": [
      "color"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "map-merge-or-overwrite"
      },
      {
        "type": "variable",
        "name": "contexts"
      },
      {
        "type": "variable",
        "name": "contexts"
      }
    ],
    "file": {
      "path": "_color.scss",
      "name": "_color.scss"
    }
  },
  {
    "description": "Get a context by name\n",
    "commentRange": {
      "start": 108,
      "end": 110
    },
    "context": {
      "type": "function",
      "name": "get-context",
      "code": "\n  @return utils.require-map-get($contexts, $name, 'context');\n",
      "line": {
        "start": 112,
        "end": 114
      }
    },
    "parameter": [
      {
        "type": "String",
        "name": "name",
        "description": "Name of context"
      }
    ],
    "return": {
      "type": "Map"
    },
    "group": [
      "color"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "require-map-get"
      },
      {
        "type": "variable",
        "name": "contexts"
      }
    ],
    "file": {
      "path": "_color.scss",
      "name": "_color.scss"
    },
    "usedBy": [
      {
        "description": "Get a context's value'\n",
        "context": {
          "type": "function",
          "name": "get-context-value",
          "code": "\n  $context: get-context($name);\n  $value: map.get($context, $prop);\n  // Get from pallete by name\n  @if (meta.type-of($value) == \"string\") {\n    $value: get($value);\n  }\n  @return $value;\n",
          "line": {
            "start": 121,
            "end": 129
          }
        }
      },
      {
        "description": "Prints contexts styles\n",
        "context": {
          "type": "mixin",
          "name": "context-styles",
          "code": "\n  $context: get-context($name);\n  background-color: get-context-value($name, \"background-color\");\n  background: map.get($context, \"background\"); // Allow gradients/images\n  background-image: map.get($context, \"background-image\"); // Allow gradients/images\n  color: get-context-value($name, \"color\");\n",
          "line": {
            "start": 134,
            "end": 140
          }
        }
      }
    ]
  },
  {
    "description": "Get a context's value'\n",
    "commentRange": {
      "start": 116,
      "end": 119
    },
    "context": {
      "type": "function",
      "name": "get-context-value",
      "code": "\n  $context: get-context($name);\n  $value: map.get($context, $prop);\n  // Get from pallete by name\n  @if (meta.type-of($value) == \"string\") {\n    $value: get($value);\n  }\n  @return $value;\n",
      "line": {
        "start": 121,
        "end": 129
      }
    },
    "parameter": [
      {
        "type": "String",
        "name": "name",
        "description": "Name of context"
      },
      {
        "type": "String",
        "name": "prop",
        "description": "The property to get"
      }
    ],
    "return": {
      "type": "Color"
    },
    "group": [
      "color"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "get-context"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      }
    ],
    "file": {
      "path": "_color.scss",
      "name": "_color.scss"
    },
    "usedBy": [
      {
        "description": "Prints contexts styles\n",
        "context": {
          "type": "mixin",
          "name": "context-styles",
          "code": "\n  $context: get-context($name);\n  background-color: get-context-value($name, \"background-color\");\n  background: map.get($context, \"background\"); // Allow gradients/images\n  background-image: map.get($context, \"background-image\"); // Allow gradients/images\n  color: get-context-value($name, \"color\");\n",
          "line": {
            "start": 134,
            "end": 140
          }
        }
      },
      {
        "description": "Prints contexts styles\n",
        "context": {
          "type": "mixin",
          "name": "context-styles",
          "code": "\n  $context: get-context($name);\n  background-color: get-context-value($name, \"background-color\");\n  background: map.get($context, \"background\"); // Allow gradients/images\n  background-image: map.get($context, \"background-image\"); // Allow gradients/images\n  color: get-context-value($name, \"color\");\n",
          "line": {
            "start": 134,
            "end": 140
          }
        }
      }
    ]
  },
  {
    "description": "Prints contexts styles\n",
    "commentRange": {
      "start": 131,
      "end": 132
    },
    "context": {
      "type": "mixin",
      "name": "context-styles",
      "code": "\n  $context: get-context($name);\n  background-color: get-context-value($name, \"background-color\");\n  background: map.get($context, \"background\"); // Allow gradients/images\n  background-image: map.get($context, \"background-image\"); // Allow gradients/images\n  color: get-context-value($name, \"color\");\n",
      "line": {
        "start": 134,
        "end": 140
      }
    },
    "parameter": [
      {
        "type": "String",
        "name": "name",
        "description": "Name of context"
      }
    ],
    "group": [
      "color"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "get-context"
      },
      {
        "type": "function",
        "name": "get-context-value"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get-context-value"
      }
    ],
    "file": {
      "path": "_color.scss",
      "name": "_color.scss"
    },
    "usedBy": [
      {
        "description": "Prints all context styles \n",
        "context": {
          "type": "mixin",
          "name": "all-context-styles",
          "code": "\n  $prefix: selector.class(\"color-context\");\n  @each $name, $context in $contexts {\n    @if (not $with-prop or map.get($context, $with-prop)) {\n      #{ $prefix }-#{ $name } {\n        @include context-styles($name);\n      }\n    }\n  }\n",
          "line": {
            "start": 172,
            "end": 181
          }
        }
      }
    ]
  },
  {
    "description": "Lighten a color using the default white by a percentage\n",
    "commentRange": {
      "start": 142,
      "end": 147
    },
    "context": {
      "type": "function",
      "name": "tint",
      "code": "\n  @return mix(get(\"white\"), get($color), $percentage);\n",
      "line": {
        "start": 149,
        "end": 151
      }
    },
    "parameter": [
      {
        "type": "Color, String",
        "name": "color",
        "description": "Color/palette color name to apply to tint"
      },
      {
        "type": "Number",
        "name": "percentage",
        "description": "Percentage"
      }
    ],
    "return": {
      "type": "Color"
    },
    "author": [
      ""
    ],
    "link": [
      {
        "url": "https://css-tricks.com/snippets/sass/tint-shade-functions/",
        "caption": "Modified from source (CSS Tricks, Kitty Giraudel)"
      }
    ],
    "group": [
      "color"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      }
    ],
    "file": {
      "path": "_color.scss",
      "name": "_color.scss"
    }
  },
  {
    "description": "Darken a color with the default black by a percentage\n",
    "commentRange": {
      "start": 153,
      "end": 158
    },
    "context": {
      "type": "function",
      "name": "shade",
      "code": "\n  @return mix(get(\"black\"), get($color), $percentage);\n",
      "line": {
        "start": 160,
        "end": 162
      }
    },
    "parameter": [
      {
        "type": "Color, String",
        "name": "color",
        "description": "Color/palette color name to shade"
      },
      {
        "type": "Number",
        "name": "percentage",
        "description": "Percentage to shade"
      }
    ],
    "return": {
      "type": "Color"
    },
    "author": [
      "Kitty Giraudel"
    ],
    "link": [
      {
        "url": "https://css-tricks.com/snippets/sass/tint-shade-functions/",
        "caption": "Modified from source (CSS Tricks, Kitty Giraudel)"
      }
    ],
    "group": [
      "color"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      }
    ],
    "file": {
      "path": "_color.scss",
      "name": "_color.scss"
    }
  },
  {
    "description": "Prints all context styles \n",
    "commentRange": {
      "start": 164,
      "end": 171
    },
    "context": {
      "type": "mixin",
      "name": "all-context-styles",
      "code": "\n  $prefix: selector.class(\"color-context\");\n  @each $name, $context in $contexts {\n    @if (not $with-prop or map.get($context, $with-prop)) {\n      #{ $prefix }-#{ $name } {\n        @include context-styles($name);\n      }\n    }\n  }\n",
      "line": {
        "start": 172,
        "end": 181
      }
    },
    "parameter": [
      {
        "type": "String",
        "name": "with-prop",
        "description": "Checks the specific context for a certain prop (has to be truthy)(used for output in helper/base color modules)"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "@include ulu.all-context-styles();"
      },
      {
        "type": "html",
        "code": " <div class=\"color-context-dark\" style=\"padding: 1rem\">\n  Some text in dark context\n</div>",
        "description": "Example of a color-context"
      }
    ],
    "group": [
      "color"
    ],
    "access": "public",
    "require": [
      {
        "type": "mixin",
        "name": "context-styles"
      },
      {
        "type": "function",
        "name": "class"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "variable",
        "name": "contexts"
      }
    ],
    "file": {
      "path": "_color.scss",
      "name": "_color.scss"
    }
  },
  {
    "description": "Outputs all color classes\n",
    "commentRange": {
      "start": 183,
      "end": 187
    },
    "context": {
      "type": "mixin",
      "name": "all-color-class-styles",
      "code": "\n  $prefix: selector.class(\"color\");\n  @each $name, $output in $color-classes {\n    @if ($output) {\n      #{ $prefix }-#{ $name } {\n        color: get($name);\n      }\n    }\n  }\n",
      "line": {
        "start": 188,
        "end": 197
      }
    },
    "example": [
      {
        "type": "scss",
        "code": "@include ulu.all-color-class-styles();"
      },
      {
        "type": "html",
        "code": "<span class=\"color-name\">Some text</span>",
        "description": "Example of a color-context"
      }
    ],
    "group": [
      "color"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "class"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "variable",
        "name": "color-classes"
      }
    ],
    "file": {
      "path": "_color.scss",
      "name": "_color.scss"
    }
  },
  {
    "description": "Prints button component styles\n",
    "commentRange": {
      "start": 11,
      "end": 16
    },
    "context": {
      "type": "mixin",
      "name": "component-button-styles",
      "code": "\n  @include utils.file-header('component', 'button');\n\n  $prefix: selector.class(\"button\");\n  $icon-selector: \"#{ $prefix }--icon\";\n\n  #{ $prefix } {\n    @include button.default();\n  }\n  \n  @each $size, $values in button.$sizes {\n    #{ $prefix }--#{$size} {\n      @include button.size($size);\n    }\n  }\n\n  @each $style, $values in button.$styles {\n    #{ $prefix }--#{$style} {\n      @include button.style($style);\n    }\n  }\n\n  #{ $icon-selector } {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    min-width: 0;\n    max-width: none;\n    border-radius: button.get(\"icon-border-radius\");\n    font-size: button.get(\"icon-font-size\");\n    width: button.get(\"icon-size\");\n    height: button.get(\"icon-size\");\n    padding: 0 !important;\n  }\n\n  @each $size, $values in button.$sizes {\n    $icon-size: map.get($values, \"icon-size\");\n    $icon-font-size: map.get($values, \"icon-font-size\");\n    @if ($icon-size or $icon-font-size) {\n      #{ $prefix }--#{$size}#{ $icon-selector } {\n        width: $icon-size;\n        height: $icon-size;\n        font-size: $icon-font-size;\n      }\n    }\n  }\n",
      "line": {
        "start": 18,
        "end": 64
      }
    },
    "example": [
      {
        "type": "scss",
        "code": "@include ulu.component-button-styles();"
      },
      {
        "type": "html",
        "code": "<a class=\"button\" href=\"#\">Button Default</a>"
      }
    ],
    "group": [
      "components"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "class"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "variable",
        "name": "sizes"
      },
      {
        "type": "variable",
        "name": "styles"
      },
      {
        "type": "variable",
        "name": "sizes"
      }
    ],
    "file": {
      "path": "components/_button.scss",
      "name": "_button.scss"
    }
  },
  {
    "description": "Prints all Components styles\n",
    "commentRange": {
      "start": 27,
      "end": 31
    },
    "context": {
      "type": "mixin",
      "name": "component-styles",
      "code": "\n  @include utils.file-header(\"components\");\n  @if $includes {\n    @include utils.require-list-contains($-all-includes, $includes);\n    $-all-includes: map.merge($-all-includes, $includes) !global;\n  }\n  @if (map.get($-all-includes, \"links\")) {\n    @include links.styles;\n  }\n  @if (map.get($-all-includes, \"button\")) {\n    @include button.styles;\n  }\n  @if (map.get($-all-includes, \"rule\")) {\n    @include rule.styles;\n  }\n  @if (map.get($-all-includes, \"list-lines\")) {\n    @include list-lines.styles;\n  }\n  @if (map.get($-all-includes, \"list-bullet\")) {\n    @include list-bullet.styles;\n  }\n",
      "line": {
        "start": 33,
        "end": 54
      }
    },
    "parameter": [
      {
        "type": "List",
        "name": "includes",
        "description": "A list of changes to module includes"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "@include ulu.component-styles();"
      }
    ],
    "group": [
      "components"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      }
    ],
    "file": {
      "path": "components/_index.scss",
      "name": "_index.scss"
    }
  },
  {
    "description": "Link compontent styles (.link)\n- Contextual link styling\n- Styles all links within as normal text hyperlinks (hover, visited)\n",
    "commentRange": {
      "start": 8,
      "end": 13
    },
    "context": {
      "type": "mixin",
      "name": "component-links-styles",
      "code": "\n  $selector: selector.class(\"links\");\n  #{ $selector } {\n    a {\n      @include element.link(true, true);\n    }\n  }\n  #{ $selector }-no-visited {\n    a {\n      @include element.link();\n    }\n  }\n",
      "line": {
        "start": 15,
        "end": 27
      }
    },
    "example": [
      {
        "type": "scss",
        "code": "@include ulu.component-links-styles();"
      }
    ],
    "group": [
      "components"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "class"
      }
    ],
    "file": {
      "path": "components/_links.scss",
      "name": "_links.scss"
    }
  },
  {
    "description": "Output styles\n",
    "commentRange": {
      "start": 9,
      "end": 9
    },
    "context": {
      "type": "mixin",
      "name": "styles",
      "code": "\n  $prefix: selector.class(\"list-bullet\");\n  #{ $prefix } {\n    @include element.styles-unordered-list();\n    li {\n      &::marker {\n        color: color.get(\"bullet\");\n      }\n    }\n  }\n",
      "line": {
        "start": 11,
        "end": 21
      }
    },
    "group": [
      "components"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "class"
      },
      {
        "type": "function",
        "name": "get"
      }
    ],
    "file": {
      "path": "components/_list-bullet.scss",
      "name": "_list-bullet.scss"
    }
  },
  {
    "description": "Output styles\n",
    "commentRange": {
      "start": 9,
      "end": 9
    },
    "context": {
      "type": "mixin",
      "name": "styles",
      "code": "\n  $border: element.get-rule-style(\"light\") !default;\n  .list-lines {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n    border-top: $border;\n    >li {\n      border-bottom: $border;\n      padding: 1em 0;\n      >*:last-child {\n        margin-bottom: 0;\n      }\n      &:last-child {\n        border-bottom-width: 0;\n      }\n    }\n  }\n  .list-lines--dense {\n    >li {\n      padding: 0.5em 0;\n      line-height: typography.get(\"line-height-dense\");\n    }\n  }\n",
      "line": {
        "start": 11,
        "end": 35
      }
    },
    "group": [
      "components"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "get-rule-style"
      },
      {
        "type": "function",
        "name": "get"
      }
    ],
    "file": {
      "path": "components/_list-lines.scss",
      "name": "_list-lines.scss"
    }
  },
  {
    "description": "Module Settings\n",
    "commentRange": {
      "start": 11,
      "end": 14
    },
    "context": {
      "type": "variable",
      "name": "config",
      "value": "(\n  \"short-width\" : 2.75rem,\n  \"short-border-width\" : 4px\n)",
      "scope": "default",
      "line": {
        "start": 16,
        "end": 19
      }
    },
    "type": "Map",
    "property": [
      {
        "type": "Number",
        "name": "$config.short-width",
        "description": "Short rule width (like an inline rule, normally used above headings), Setting this to false will disable output"
      },
      {
        "type": "Number",
        "name": "$config.short-border-width",
        "description": "Short rule width of border"
      }
    ],
    "group": [
      "components"
    ],
    "access": "public",
    "file": {
      "path": "components/_rule.scss",
      "name": "_rule.scss"
    }
  },
  {
    "description": "Change modules $config\n",
    "commentRange": {
      "start": 21,
      "end": 24
    },
    "context": {
      "type": "mixin",
      "name": "set",
      "code": "\n  $config: map.merge($config, $changes) !global;\n",
      "line": {
        "start": 26,
        "end": 28
      }
    },
    "parameter": [
      {
        "type": "Map",
        "name": "changes",
        "description": "Map of changes"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "@include module-name.set(( \"property\" : value ));",
        "description": "General example, replace module-name with module's name"
      }
    ],
    "group": [
      "components"
    ],
    "access": "public",
    "require": [
      {
        "type": "variable",
        "name": "config"
      },
      {
        "type": "variable",
        "name": "config"
      }
    ],
    "file": {
      "path": "components/_rule.scss",
      "name": "_rule.scss"
    }
  },
  {
    "description": "Get a config option\n",
    "commentRange": {
      "start": 30,
      "end": 33
    },
    "context": {
      "type": "function",
      "name": "get",
      "code": "\n  @return utils.require-map-get($config, $name, \"rule [config]\");\n",
      "line": {
        "start": 35,
        "end": 37
      }
    },
    "parameter": [
      {
        "type": "Map",
        "name": "name",
        "description": "Name of property"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "@include module-name.get(\"property\");",
        "description": "General example, replace module-name with module's name"
      }
    ],
    "group": [
      "components"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "require-map-get"
      },
      {
        "type": "variable",
        "name": "config"
      }
    ],
    "file": {
      "path": "components/_rule.scss",
      "name": "_rule.scss"
    }
  },
  {
    "description": "Output styles\n",
    "commentRange": {
      "start": 39,
      "end": 39
    },
    "context": {
      "type": "mixin",
      "name": "styles",
      "code": "\n\n  $class: selector.class(\"rule\");\n  \n  #{ $class } {\n    @include element.rule();\n  }\n  // Output user's styles presets\n  @each $name, $value in element.$rule-styles {\n    #{ $class }--#{ $name } {\n      @include element.rule-style($name);\n    }\n  }\n  // Output user's margin presets\n  @each $name, $value in element.$rule-margins {\n    #{ $class }--margin-#{ $name } {\n      @include element.rule-margin($name);\n    }\n  }\n\n  // Meant to be user by tself without content\n  $short-width: get(\"short-width\");\n  @if ($short-width) {\n    #{ $class }--short {\n      width: $short-width;\n      max-width: 100%;\n      border-bottom-width: get(\"short-border-width\");\n    }\n  }\n",
      "line": {
        "start": 41,
        "end": 70
      }
    },
    "group": [
      "components"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "class"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "variable",
        "name": "rule-styles"
      },
      {
        "type": "variable",
        "name": "rule-margins"
      }
    ],
    "file": {
      "path": "components/_rule.scss",
      "name": "_rule.scss"
    }
  },
  {
    "description": "",
    "commentRange": {
      "start": 1,
      "end": 1
    },
    "context": {
      "type": "css",
      "name": "/// This is a sample function.\n/// You can actually put much more text in here,\n/// and include markdown.\n/// Lorem markdownum rapite neque loquentis pro inque; nullaque [triones\n/// promisistis](http://duabuset-tandem.com/denos) quaque. Non iura oves creatas\n/// mixta gente torum Caune. Huius sacra *corpora refert celeberrima* luctus tibi\n/// cornua, nec qui [illum poteram](http://puta-elementa.com/vocequoque), et eundi\n/// recalfecit efficiens isdem superi. Alii virginibusque vultus certa socios venae\n/// ferrove finis longave, pignus duros nubifer!\n///\n/// - Tenuatus percussae tanta iudice Hippolytus miseram inmunis\n/// - Ture Iovis holus est et vere\n/// - Domus cum quid meae erras\n/// - Quam apta fata puppis ergo solis praeteriti\n///\n/// @group demo_test-sassdoc\n/// @see",
      "value": "function",
      "line": {
        "start": 19,
        "end": 110
      }
    },
    "group": [
      "demo_test-sassdoc"
    ],
    "access": "public",
    "file": {
      "path": "_test-sassdocs.scss",
      "name": "_test-sassdocs.scss"
    }
  },
  {
    "description": "This is a sample function.\nYou can actually put much more text in here,\nand include markdown.\nLorem markdownum rapite neque loquentis pro inque; nullaque [triones\npromisistis](http://duabuset-tandem.com/denos) quaque. Non iura oves creatas\nmixta gente torum Caune. Huius sacra *corpora refert celeberrima* luctus tibi\ncornua, nec qui [illum poteram](http://puta-elementa.com/vocequoque), et eundi\nrecalfecit efficiens isdem superi. Alii virginibusque vultus certa socios venae\nferrove finis longave, pignus duros nubifer!\n\n- Tenuatus percussae tanta iudice Hippolytus miseram inmunis\n- Ture Iovis holus est et vere\n- Domus cum quid meae erras\n- Quam apta fata puppis ergo solis praeteriti\n\n",
    "commentRange": {
      "start": 3,
      "end": 35
    },
    "context": {
      "type": "function",
      "name": "herman-sample",
      "code": "\n  @if (not $one) or (not $two) or (not $three) {\n    @error 'Please provide values for all three parameters';\n  }\n\n  @return $one $two $three;\n",
      "line": {
        "start": 36,
        "end": 42
      }
    },
    "group": [
      "demo_test-sassdoc"
    ],
    "see": [
      {
        "description": "This is a sample function alias.\n",
        "context": {
          "type": "function",
          "name": "sample-alias",
          "code": "\n  @return herman-sample($one, $two, $three);\n",
          "line": {
            "start": 50,
            "end": 52
          }
        }
      }
    ],
    "link": [
      {
        "url": "https://www.oddbird.net",
        "caption": "OddBird Home Page"
      }
    ],
    "todo": [
      "Create more samples like this one",
      "Add more todo items"
    ],
    "author": [
      "[Miriam Suzanne](https://www.oddbird.net/authors/miriam/)"
    ],
    "since": [
      {
        "version": "1.0.0",
        "description": "Adding samples files to the documentation."
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".example::before {\n  content: samples.herman-sample(1, 2);\n}",
        "description": "describe examples if you want..."
      }
    ],
    "parameter": [
      {
        "type": "number",
        "name": "one",
        "description": "The first parameter is required, because no default is given"
      },
      {
        "type": "number",
        "name": "two",
        "default": "$one",
        "description": "Our second parameter defaults to the value of our first one"
      },
      {
        "type": "string",
        "name": "three",
        "default": "'three'",
        "description": "Looks like this one takes a string instead"
      }
    ],
    "return": {
      "type": "list",
      "description": "All three of the arguments in order"
    },
    "access": "public",
    "require": [],
    "throw": [
      "Please provide values for all three parameters"
    ],
    "file": {
      "path": "_test-sassdocs.scss",
      "name": "_test-sassdocs.scss"
    },
    "aliased": [
      "sample-alias",
      "sample-alias-two"
    ],
    "usedBy": [
      {
        "description": "This is a sample function alias.\n",
        "context": {
          "type": "function",
          "name": "sample-alias",
          "code": "\n  @return herman-sample($one, $two, $three);\n",
          "line": {
            "start": 50,
            "end": 52
          }
        }
      },
      {
        "description": "This is a sample function alias.\n",
        "context": {
          "type": "function",
          "name": "sample-alias-two",
          "code": "\n  @return herman-sample($one, $two, $three);\n",
          "line": {
            "start": 60,
            "end": 62
          }
        }
      }
    ]
  },
  {
    "description": "This is a sample function alias.\n",
    "commentRange": {
      "start": 46,
      "end": 49
    },
    "context": {
      "type": "function",
      "name": "sample-alias",
      "code": "\n  @return herman-sample($one, $two, $three);\n",
      "line": {
        "start": 50,
        "end": 52
      }
    },
    "group": [
      "demo_test-sassdoc"
    ],
    "alias": "herman-sample",
    "deprecated": "I don't think this alias is useful anymore",
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "herman-sample"
      }
    ],
    "file": {
      "path": "_test-sassdocs.scss",
      "name": "_test-sassdocs.scss"
    }
  },
  {
    "description": "This is a sample function alias.\n",
    "commentRange": {
      "start": 56,
      "end": 59
    },
    "context": {
      "type": "function",
      "name": "sample-alias-two",
      "code": "\n  @return herman-sample($one, $two, $three);\n",
      "line": {
        "start": 60,
        "end": 62
      }
    },
    "group": [
      "demo_test-sassdoc"
    ],
    "alias": "herman-sample",
    "deprecated": "Doesn't seem to work without a message",
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "herman-sample"
      }
    ],
    "file": {
      "path": "_test-sassdocs.scss",
      "name": "_test-sassdocs.scss"
    }
  },
  {
    "description": "Extra Commentary\n================\nHerman allows you to write \"prose\" markdown blocks,\nto help introduce groups,\nor add narrative flow between documented items.\n\nNote that while SassDoc allows annotation comments\nto be separated from the documented code by newlines,\nHerman considers documentation to be free-floating \"prose\" if\nit is separated from documented code by one or more newlines.\n\nProse blocks can also include examples, and other annotations.\n",
    "commentRange": {
      "start": 64,
      "end": 81
    },
    "context": {
      "type": "css",
      "name": "// Mixin with Content\n// ------------------\n/// Mixins can optionally accept a @content block,\n/// passed in brackets. This example creates\n/// a generated element `:before` the element it is used on.\n/// @group demo_test-sassdoc\n/// @param",
      "value": "String",
      "line": {
        "start": 89,
        "end": 110
      }
    },
    "example": [
      {
        "type": "scss",
        "code": ".private::after {\n  content: samples.$private;\n}"
      }
    ],
    "link": [
      {
        "url": "http://sassdoc.com/annotations/",
        "caption": ""
      }
    ],
    "group": [
      "demo_test-sassdoc"
    ],
    "access": "public",
    "file": {
      "path": "_test-sassdocs.scss",
      "name": "_test-sassdocs.scss"
    }
  },
  {
    "description": "Mixins can optionally accept a @content block,\npassed in brackets. This example creates\na generated element `:before` the element it is used on.\n",
    "commentRange": {
      "start": 85,
      "end": 104
    },
    "context": {
      "type": "mixin",
      "name": "before-sample",
      "code": "\n  &::before {\n    content: $content;\n    @content;\n  }\n",
      "line": {
        "start": 105,
        "end": 110
      }
    },
    "group": [
      "demo_test-sassdoc"
    ],
    "parameter": [
      {
        "type": "String",
        "name": "content",
        "description": "A value for the `content` property"
      },
      {
        "type": "arglist",
        "name": "list…",
        "description": "Sass also allows arglists!"
      }
    ],
    "content": "Any other styles that should be applied to the <code>::before</code> element",
    "output": "A <code>::before</code> pseudo-element,\n  with the <code>content</code> property established,\n  and any passed-in styled applied.",
    "example": [
      {
        "type": "scss",
        "code": ".item {\n  @include samples.before-sample('Test One: ') {\n    color: red;\n  }\n}"
      }
    ],
    "access": "public",
    "require": [],
    "file": {
      "path": "_test-sassdocs.scss",
      "name": "_test-sassdocs.scss"
    }
  },
  {
    "description": "Module Settings\n",
    "commentRange": {
      "start": 10,
      "end": 36
    },
    "context": {
      "type": "variable",
      "name": "config",
      "value": "(\n  \"backdrop-blur\":                    4px,\n  \"backdrop-color\":                   rgba(73, 73, 73, 0.459),\n  \"box-shadow\":                       0 1px 5px color.get('box-shadow'),\n  \"box-shadow-raised\":                0 1px 12px color.get('box-shadow'),\n  \"box-shadow-above\":                 0 1px 20px color.get('box-shadow'),\n  \"border-radius\":                    6px,\n  \"border-radius-small\":              3px,\n  \"border-radius-large\":              5%,\n  \"text-shadow\":                      0 1px 4px rgba(0,0,0,0.3),\n  \"margin-small\":                     0.65em,\n  \"margin\":                           1em,\n  \"margin-large\":                     2em,\n  \"ol-list-style-type\":               decimal,\n  \"ol-list-style-type-2\":             lower-alpha,\n  \"ol-list-style-type-3\":             lower-roman,\n  \"ul-list-style-type\":               disc,\n  \"ul-list-style-type-2\":             circle,\n  \"ul-list-style-type-3\":             square,\n  \"link-text-decoration-default\":     none,\n  \"link-text-decoration\":             underline,\n  \"link-text-decoration-style\":       dotted,\n  \"link-text-decoration-color\":       initial,\n  \"link-text-decoration-style-hover\": solid,\n  \"link-text-decoration-color-hover\": false,\n  \"link-text-decoration-thickness\":   0.1em\n)",
      "scope": "default",
      "line": {
        "start": 38,
        "end": 64
      }
    },
    "type": "Map",
    "property": [
      {
        "type": "Number",
        "name": "$config.backdrop-blur",
        "description": "Backdrop blur amount used on elements/components"
      },
      {
        "type": "Color",
        "name": "$config.backdrop-color",
        "description": "Backdrop color (modal overlays, etc)"
      },
      {
        "type": "List",
        "name": "$config.box-shadow",
        "description": "Box-shadow definition for elements that are on top of page"
      },
      {
        "type": "List",
        "name": "$config.box-shadow-raised",
        "description": "Box-shadow definition for elements that are raised off of the page (dropdowns, etc)"
      },
      {
        "type": "List",
        "name": "$config.box-shadow-above",
        "description": "Box-shadow definition for elements that are above the page (fixed items, etc)"
      },
      {
        "type": "Number",
        "name": "$config.border-radius",
        "description": "Common element border radius"
      },
      {
        "type": "Number",
        "name": "$config.border-radius-small",
        "description": "Common element border radius (small)"
      },
      {
        "type": "Number",
        "name": "$config.border-radius-large",
        "description": "Common element border radius (large)"
      },
      {
        "type": "List",
        "name": "$config.text-shadow",
        "description": "Common text shadow"
      },
      {
        "type": "Number",
        "name": "$config.margin-small",
        "description": "Common element margin (small) (default for lists)"
      },
      {
        "type": "Number",
        "name": "$config.margin",
        "description": "Common element margin"
      },
      {
        "type": "Number",
        "name": "$config.margin-large",
        "description": "Common element margin (large)"
      },
      {
        "type": "String",
        "name": "$config.ol-list-style-type",
        "description": "Ordered list type (level 1)"
      },
      {
        "type": "String",
        "name": "$config.ol-list-style-type-2",
        "description": "Ordered list type (level 2)"
      },
      {
        "type": "String",
        "name": "$config.ol-list-style-type-3",
        "description": "Ordered list type (level 3)"
      },
      {
        "type": "String",
        "name": "$config.ul-list-style-type"
      },
      {
        "type": "String",
        "name": "$config.ul-list-style-type-2"
      },
      {
        "type": "String",
        "name": "$config.ul-list-style-type-3"
      },
      {
        "type": "String",
        "name": "$config.link-text-decoration-default",
        "description": "Whether links use underline, remember that removing underline will create an accessiblity issue (not relying on color)"
      },
      {
        "type": "String",
        "name": "$config.link-text-decoration"
      },
      {
        "type": "String",
        "name": "$config.link-text-decoration-style"
      },
      {
        "type": "Color",
        "name": "$config.link-text-decoration-color"
      },
      {
        "type": "String",
        "name": "$config.link-text-decoration-style-hover"
      },
      {
        "type": "Color",
        "name": "$config.link-text-decoration-color-hover"
      },
      {
        "type": "Number",
        "name": "$config.link-text-decoration-thickness"
      }
    ],
    "group": [
      "element"
    ],
    "access": "public",
    "file": {
      "path": "_element.scss",
      "name": "_element.scss"
    }
  },
  {
    "description": "Rule style map, redifine defaults or add to\n",
    "commentRange": {
      "start": 66,
      "end": 67
    },
    "context": {
      "type": "variable",
      "name": "rule-styles",
      "value": "(\n  \"default\": 1px solid color.get(\"rule\"),\n  \"light\":   1px solid color.get(\"rule-light\"),\n)",
      "scope": "default",
      "line": {
        "start": 69,
        "end": 72
      }
    },
    "type": "Map",
    "group": [
      "element"
    ],
    "access": "public",
    "file": {
      "path": "_element.scss",
      "name": "_element.scss"
    },
    "usedBy": [
      {
        "description": "Output styles\n",
        "context": {
          "type": "mixin",
          "name": "styles",
          "code": "\n\n  $class: selector.class(\"rule\");\n  \n  #{ $class } {\n    @include element.rule();\n  }\n  // Output user's styles presets\n  @each $name, $value in element.$rule-styles {\n    #{ $class }--#{ $name } {\n      @include element.rule-style($name);\n    }\n  }\n  // Output user's margin presets\n  @each $name, $value in element.$rule-margins {\n    #{ $class }--margin-#{ $name } {\n      @include element.rule-margin($name);\n    }\n  }\n\n  // Meant to be user by tself without content\n  $short-width: get(\"short-width\");\n  @if ($short-width) {\n    #{ $class }--short {\n      width: $short-width;\n      max-width: 100%;\n      border-bottom-width: get(\"short-border-width\");\n    }\n  }\n",
          "line": {
            "start": 41,
            "end": 70
          }
        }
      },
      {
        "description": "Sets rule styles\n",
        "context": {
          "type": "mixin",
          "name": "set-rule-styles",
          "code": "\n  $rule-styles: map.merge($rule-styles, $changes) !global;\n",
          "line": {
            "start": 102,
            "end": 104
          }
        }
      },
      {
        "description": "Sets rule styles\n",
        "context": {
          "type": "mixin",
          "name": "set-rule-styles",
          "code": "\n  $rule-styles: map.merge($rule-styles, $changes) !global;\n",
          "line": {
            "start": 102,
            "end": 104
          }
        }
      },
      {
        "description": "Get a rule style\n",
        "context": {
          "type": "function",
          "name": "get-rule-style",
          "code": "\n  @return utils.require-map-get($rule-styles, $name, \"element [rule style]\");\n",
          "line": {
            "start": 116,
            "end": 118
          }
        }
      }
    ]
  },
  {
    "description": "Common rule margins (space between rule and type)\n",
    "commentRange": {
      "start": 74,
      "end": 75
    },
    "context": {
      "type": "variable",
      "name": "rule-margins",
      "value": "(\n  \"smallest\": 0.5rem,\n  \"small\":    1rem,\n  \"medium\":   2rem,\n  \"large\":    3rem\n)",
      "scope": "default",
      "line": {
        "start": 77,
        "end": 82
      }
    },
    "type": "Map",
    "group": [
      "element"
    ],
    "access": "public",
    "file": {
      "path": "_element.scss",
      "name": "_element.scss"
    },
    "usedBy": [
      {
        "description": "Output styles\n",
        "context": {
          "type": "mixin",
          "name": "styles",
          "code": "\n\n  $class: selector.class(\"rule\");\n  \n  #{ $class } {\n    @include element.rule();\n  }\n  // Output user's styles presets\n  @each $name, $value in element.$rule-styles {\n    #{ $class }--#{ $name } {\n      @include element.rule-style($name);\n    }\n  }\n  // Output user's margin presets\n  @each $name, $value in element.$rule-margins {\n    #{ $class }--margin-#{ $name } {\n      @include element.rule-margin($name);\n    }\n  }\n\n  // Meant to be user by tself without content\n  $short-width: get(\"short-width\");\n  @if ($short-width) {\n    #{ $class }--short {\n      width: $short-width;\n      max-width: 100%;\n      border-bottom-width: get(\"short-border-width\");\n    }\n  }\n",
          "line": {
            "start": 41,
            "end": 70
          }
        }
      },
      {
        "description": "Sets rule margins\n",
        "context": {
          "type": "mixin",
          "name": "set-rule-margins",
          "code": "\n  $rule-margins: map.merge($rule-margins, $changes) !global;\n",
          "line": {
            "start": 109,
            "end": 111
          }
        }
      },
      {
        "description": "Sets rule margins\n",
        "context": {
          "type": "mixin",
          "name": "set-rule-margins",
          "code": "\n  $rule-margins: map.merge($rule-margins, $changes) !global;\n",
          "line": {
            "start": 109,
            "end": 111
          }
        }
      },
      {
        "description": "Sets rule margin\n",
        "context": {
          "type": "function",
          "name": "get-rule-margin",
          "code": "\n  @return utils.require-map-get($rule-margins, $name, \"element [rule style]\");\n",
          "line": {
            "start": 123,
            "end": 125
          }
        }
      }
    ]
  },
  {
    "description": "Change modules $config\n",
    "commentRange": {
      "start": 84,
      "end": 86
    },
    "context": {
      "type": "mixin",
      "name": "set",
      "code": "\n  $config: map.merge($config, $changes) !global;\n",
      "line": {
        "start": 87,
        "end": 89
      }
    },
    "parameter": [
      {
        "type": "Map",
        "name": "changes",
        "description": "Map of changes\n  @include module-name.set(( \"property\" : value ));"
      }
    ],
    "group": [
      "element"
    ],
    "access": "public",
    "require": [
      {
        "type": "variable",
        "name": "config"
      },
      {
        "type": "variable",
        "name": "config"
      }
    ],
    "file": {
      "path": "_element.scss",
      "name": "_element.scss"
    }
  },
  {
    "description": "Get a config option\n",
    "commentRange": {
      "start": 91,
      "end": 93
    },
    "context": {
      "type": "function",
      "name": "get",
      "code": "\n  @return utils.require-map-get($config, $name, \"element [config]\");\n",
      "line": {
        "start": 95,
        "end": 97
      }
    },
    "parameter": [
      {
        "type": "Map",
        "name": "name",
        "description": "Name of property\n  @include module-name.get(\"property\");"
      }
    ],
    "group": [
      "element"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "require-map-get"
      },
      {
        "type": "variable",
        "name": "config"
      }
    ],
    "file": {
      "path": "_element.scss",
      "name": "_element.scss"
    }
  },
  {
    "description": "Sets rule styles\n",
    "commentRange": {
      "start": 99,
      "end": 100
    },
    "context": {
      "type": "mixin",
      "name": "set-rule-styles",
      "code": "\n  $rule-styles: map.merge($rule-styles, $changes) !global;\n",
      "line": {
        "start": 102,
        "end": 104
      }
    },
    "parameter": [
      {
        "type": "Map",
        "name": "changes",
        "description": "Map of changes"
      }
    ],
    "group": [
      "element"
    ],
    "access": "public",
    "require": [
      {
        "type": "variable",
        "name": "rule-styles"
      },
      {
        "type": "variable",
        "name": "rule-styles"
      }
    ],
    "file": {
      "path": "_element.scss",
      "name": "_element.scss"
    }
  },
  {
    "description": "Sets rule margins\n",
    "commentRange": {
      "start": 106,
      "end": 107
    },
    "context": {
      "type": "mixin",
      "name": "set-rule-margins",
      "code": "\n  $rule-margins: map.merge($rule-margins, $changes) !global;\n",
      "line": {
        "start": 109,
        "end": 111
      }
    },
    "parameter": [
      {
        "type": "Map",
        "name": "changes",
        "description": "Map of changes"
      }
    ],
    "group": [
      "element"
    ],
    "access": "public",
    "require": [
      {
        "type": "variable",
        "name": "rule-margins"
      },
      {
        "type": "variable",
        "name": "rule-margins"
      }
    ],
    "file": {
      "path": "_element.scss",
      "name": "_element.scss"
    }
  },
  {
    "description": "Get a rule style\n",
    "commentRange": {
      "start": 113,
      "end": 114
    },
    "context": {
      "type": "function",
      "name": "get-rule-style",
      "code": "\n  @return utils.require-map-get($rule-styles, $name, \"element [rule style]\");\n",
      "line": {
        "start": 116,
        "end": 118
      }
    },
    "parameter": [
      {
        "type": "Map",
        "name": "changes",
        "description": "Map of changes"
      }
    ],
    "group": [
      "element"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "require-map-get"
      },
      {
        "type": "variable",
        "name": "rule-styles"
      }
    ],
    "file": {
      "path": "_element.scss",
      "name": "_element.scss"
    },
    "usedBy": [
      {
        "description": "Prints elements base styles\n",
        "context": {
          "type": "mixin",
          "name": "base-elements-styles",
          "code": "\n\n  @include utils.file-header('base', 'elements');\n\n  *,\n  ::before,\n  ::after {\n    box-sizing: border-box;\n  }\n  html {\n    -webkit-text-size-adjust: 100%;\n    @media (prefers-reduced-motion: no-preference) {\n      scroll-behavior: smooth;\n    }\n  }\n  body {\n    color: color.get('type');\n    background-color: white;\n    font-family: typography.get(\"font-family\");\n    margin: 0;\n    // Note we are using relative units here instead of setting a \n    // pixel base like we use to on the HTML\n    // This will allow the user preference in font size\n    // Useful for accessibility\n    @include typography.size(\"base\");\n    @include breakpoint.embed-for-scripts();\n  }\n  h1, \n  h2, \n  h3, \n  h4, \n  h5, \n  h6, \n  ul, \n  ol, \n  li,\n  pre, \n  code,\n  p { \n    margin: 0;\n    padding: 0;\n    font-size: inherit;\n    font-family: inherit;\n    border-width: 0;\n    border-style: solid;\n    font-weight: inherit;\n  }\n  p {\n    $margin-top: typography.get(\"margin-top\");\n    margin-top: if($margin-top, $margin-top, 0);\n    margin-bottom: typography.get(\"margin-bottom\"); \n  }\n  sub, sup {\n    font-size: 75%;\n    line-height: 0;\n    position: relative;\n    vertical-align: baseline;\n  }\n  small { \n    @include typography.size(\"small\", (\"line-height\" : typography.get(\"line-height-dense\"))); \n  }\n  sub { \n    bottom: -0.25em; \n  }\n  sup { \n    top: -0.5em; \n  }\n  b, \n  strong { \n    font-weight: bold; \n  }\n  code,\n  kbd,\n  samp,\n  pre {\n    font-family: typography.get(\"font-family-monospace\");\n  }\n  hr {\n    height: 0;\n    border: 0;\n    box-sizing: content-box;\n    overflow: visible;\n    margin: element.get(\"margin\") 0;\n    border-bottom: element.get-rule-style();\n  }\n  iframe {\n    border: 0;\n    outline: 0;\n  }\n  figure {\n    margin: 0;\n  }\n  img {\n    display: block;\n    width: auto;\n    height: auto;\n    max-width: 100%;\n    border-style: none;\n  }\n  // Not styling ordered lists because they are used in navigation and other UI components\n  ul { \n    list-style: none; \n  }\n  // Style ordered lists since we don't use them much in the UI components\n  ol {\n    @include element.styles-ordered-list();\n  }\n  \n  a {\n    @if (get(\"links-state-styling\")) {\n      @include element.link();\n    } @else {\n      @include element.link-defaults();\n    }\n  }\n  // button,\n  // [type=\"button\"],\n  // [type=\"reset\"],\n  // [type=\"submit\"] {\n  //   @include button.reset();\n  // }\n  // For accessible tabs\n  [role=\"tab\"] {\n    cursor: pointer;\n  }\n  dt { \n    font-weight: bold;\n  }\n  [hidden], \n  template {\n    display: none;\n  }\n  blockquote {\n    margin: 0;\n  }\n",
          "line": {
            "start": 45,
            "end": 180
          }
        }
      },
      {
        "description": "Output styles\n",
        "context": {
          "type": "mixin",
          "name": "styles",
          "code": "\n  $border: element.get-rule-style(\"light\") !default;\n  .list-lines {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n    border-top: $border;\n    >li {\n      border-bottom: $border;\n      padding: 1em 0;\n      >*:last-child {\n        margin-bottom: 0;\n      }\n      &:last-child {\n        border-bottom-width: 0;\n      }\n    }\n  }\n  .list-lines--dense {\n    >li {\n      padding: 0.5em 0;\n      line-height: typography.get(\"line-height-dense\");\n    }\n  }\n",
          "line": {
            "start": 11,
            "end": 35
          }
        }
      }
    ]
  },
  {
    "description": "Sets rule margin\n",
    "commentRange": {
      "start": 120,
      "end": 121
    },
    "context": {
      "type": "function",
      "name": "get-rule-margin",
      "code": "\n  @return utils.require-map-get($rule-margins, $name, \"element [rule style]\");\n",
      "line": {
        "start": 123,
        "end": 125
      }
    },
    "parameter": [
      {
        "type": "Map",
        "name": "changes",
        "description": "Map of changes"
      }
    ],
    "group": [
      "element"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "require-map-get"
      },
      {
        "type": "variable",
        "name": "rule-margins"
      }
    ],
    "file": {
      "path": "_element.scss",
      "name": "_element.scss"
    }
  },
  {
    "description": "Get full rule CSS (style and margin)\n",
    "commentRange": {
      "start": 127,
      "end": 128
    },
    "context": {
      "type": "mixin",
      "name": "rule",
      "code": "\n  @include rule-style($style-name);\n  @include rule-margin($margin-name);\n",
      "line": {
        "start": 130,
        "end": 136
      }
    },
    "parameter": [
      {
        "type": "Map",
        "name": "changes",
        "description": "Map of changes"
      }
    ],
    "group": [
      "element"
    ],
    "access": "public",
    "require": [],
    "file": {
      "path": "_element.scss",
      "name": "_element.scss"
    }
  },
  {
    "description": "Print link styles\n",
    "commentRange": {
      "start": 146,
      "end": 148
    },
    "context": {
      "type": "mixin",
      "name": "link",
      "code": "\n  color: color.get(\"link\");\n  text-decoration: get(\"link-text-decoration\");\n  text-decoration-style: get(\"link-text-decoration-style\");\n  text-decoration-color: get(\"link-text-decoration-color\");\n  text-decoration-thickness: get(\"link-text-decoration-thickness\");\n  &:hover {\n    color: color.get(\"link:hover\");\n    text-decoration-style: get(\"link-text-decoration-style-hover\");\n    text-decoration-color: get(\"link-text-decoration-color-hover\");\n  }\n  @if ($visited) {\n    &:visited {\n      color: color.get(\"link:visited\");\n    }\n  }\n  @if ($active) {\n    &:active {\n      color: color.get(\"link:active\");\n    }\n  }\n",
      "line": {
        "start": 150,
        "end": 171
      }
    },
    "parameter": [
      {
        "type": "Boolean",
        "name": "visited",
        "description": "Include visited style"
      },
      {
        "type": "Boolean",
        "name": "active",
        "description": "Include active style"
      }
    ],
    "group": [
      "element"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      }
    ],
    "file": {
      "path": "_element.scss",
      "name": "_element.scss"
    }
  },
  {
    "description": "Print the defautl link styling (no hover and focus styles)\n",
    "commentRange": {
      "start": 173,
      "end": 173
    },
    "context": {
      "type": "mixin",
      "name": "link-defaults",
      "code": "\n  color: color.get(\"link\");\n  text-decoration: get(\"link-text-decoration-default\");\n",
      "line": {
        "start": 175,
        "end": 178
      }
    },
    "group": [
      "element"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      }
    ],
    "file": {
      "path": "_element.scss",
      "name": "_element.scss"
    }
  },
  {
    "description": "Print the ordered list items styling\n",
    "commentRange": {
      "start": 180,
      "end": 181
    },
    "context": {
      "type": "mixin",
      "name": "styles-ordered-list",
      "code": "\n  margin-bottom: get(\"margin\");\n  list-style: get(\"ol-list-style-type\") outside;\n  li {\n    margin-bottom: get(\"margin-small\");\n    margin-left: 1em;\n  }\n  > li {\n    &::marker {\n      color: color.get($bullet-color);\n    }\n  }\n  ol {\n    margin: get(\"margin-small\") 0 0 get(\"margin-small\");\n    list-style: get(\"ol-list-style-type-2\");\n    ol { \n      list-style-type: get(\"ol-list-style-type-3\");\n    }\n  }\n",
      "line": {
        "start": 183,
        "end": 202
      }
    },
    "parameter": [
      {
        "type": "Boolean",
        "name": "bullet-color",
        "description": "Optional bullet color (defaults to palette 'bullet')"
      }
    ],
    "group": [
      "element"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      }
    ],
    "file": {
      "path": "_element.scss",
      "name": "_element.scss"
    }
  },
  {
    "description": "Print the unordered list items styling\n",
    "commentRange": {
      "start": 204,
      "end": 205
    },
    "context": {
      "type": "mixin",
      "name": "styles-unordered-list",
      "code": "\n  list-style: get(\"ul-list-style-type\") outside;\n  > li {\n    margin-left: 1.5em;\n    margin-bottom: get(\"margin-small\");\n    &::marker {\n      color: color.get($bullet-color);\n    }\n  }\n  ul {\n    list-style-type: get(\"ul-list-style-type-2\");\n  }\n   ul ul {\n    list-style-type: get(\"ul-list-style-type-3\");\n  }\n",
      "line": {
        "start": 207,
        "end": 222
      }
    },
    "parameter": [
      {
        "type": "Boolean",
        "name": "bullet-color",
        "description": "Optional bullet color"
      }
    ],
    "group": [
      "element"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      }
    ],
    "file": {
      "path": "_element.scss",
      "name": "_element.scss"
    }
  },
  {
    "description": "Hide text for assistive devices\n",
    "commentRange": {
      "start": 224,
      "end": 229
    },
    "context": {
      "type": "mixin",
      "name": "hidden-visually",
      "code": "\n  @if $hidden {\n    clip: rect(0 0 0 0);\n    clip-path: inset(50%);\n    height: 1px;\n    overflow: hidden;\n    position: absolute;\n    white-space: nowrap;\n    width: 1px;\n  } @else {\n    clip: auto;\n    clip-path: none;\n    height: auto;\n    overflow: visible;\n    position: static;\n    white-space: normal;\n    width: auto;\n  }\n",
      "line": {
        "start": 231,
        "end": 249
      }
    },
    "parameter": [
      {
        "type": "Boolean",
        "name": "hidden",
        "description": "Defaults to true, pass false to override the hidden css (ie. on focus)"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "@include ulu.layout-hidden-visually()\n// Reset styling\n@include ulu.layout-hidden-visually(false)"
      }
    ],
    "group": [
      "element"
    ],
    "access": "public",
    "require": [],
    "file": {
      "path": "_element.scss",
      "name": "_element.scss"
    }
  },
  {
    "description": "Module Settings\n",
    "commentRange": {
      "start": 27,
      "end": 36
    },
    "context": {
      "type": "variable",
      "name": "config",
      "value": "(\n  \"columns\":            12,\n  \"attribute\":          \"data-grid\",\n  \"gutter\":             14px,\n  \"extra-breakpoints\" : (\n    \"medium\" : (\n      \"breakpoint\" : \"medium\",\n      \"gutter\" : 15px\n    ),\n    \"large\" : (\n      \"breakpoint\" : \"large\",\n      \"gutter\" : 20px\n    )\n  ),\n  \"position-class-column-first\": \"position-column-first\",\n  \"position-class-column-last\":  \"position-column-last\",\n  \"position-class-row-first\":    \"position-row-first\",\n  \"position-class-row-last\":     \"position-row-last\"\n)",
      "scope": "default",
      "line": {
        "start": 38,
        "end": 56
      }
    },
    "type": "Map",
    "property": [
      {
        "type": "Number",
        "name": "$config.columns",
        "description": "Default for grid mixin"
      },
      {
        "type": "String",
        "name": "$config.attribute",
        "description": "Default attribute to use for grid mixin"
      },
      {
        "type": "Number",
        "name": "$config.gutter",
        "description": "Default gutter for grid mixin"
      },
      {
        "type": "Map",
        "name": "$config.extra-breakpoints",
        "description": "Default extra breakpoints for grid mixin"
      },
      {
        "type": "MaStringp",
        "name": "$config.position-class-column-first",
        "description": "Classname for position system (JS) grid uses to display rules (layout can flow, script will update classes)"
      },
      {
        "type": "String",
        "name": "$config.position-class-column-last",
        "description": "See definition above"
      },
      {
        "type": "String",
        "name": "$config.position-class-row-first",
        "description": "See definition above"
      },
      {
        "type": "String",
        "name": "$config.position-class-row-last",
        "description": "See definition above"
      }
    ],
    "group": [
      "grid"
    ],
    "access": "public",
    "file": {
      "path": "_grid.scss",
      "name": "_grid.scss"
    }
  },
  {
    "description": "Change modules $config\n",
    "commentRange": {
      "start": 58,
      "end": 60
    },
    "context": {
      "type": "mixin",
      "name": "set",
      "code": "\n  $config: map.merge($config, $changes) !global;\n",
      "line": {
        "start": 61,
        "end": 63
      }
    },
    "parameter": [
      {
        "type": "Map",
        "name": "changes",
        "description": "Map of changes\n  @include module-name.set(( \"property\" : value ));"
      }
    ],
    "group": [
      "grid"
    ],
    "access": "public",
    "require": [
      {
        "type": "variable",
        "name": "config"
      },
      {
        "type": "variable",
        "name": "config"
      }
    ],
    "file": {
      "path": "_grid.scss",
      "name": "_grid.scss"
    }
  },
  {
    "description": "Get a config option\n",
    "commentRange": {
      "start": 65,
      "end": 67
    },
    "context": {
      "type": "function",
      "name": "get",
      "code": "\n  @return utils.require-map-get($config, $name, \"grid [config]\");\n",
      "line": {
        "start": 69,
        "end": 71
      }
    },
    "parameter": [
      {
        "type": "Map",
        "name": "name",
        "description": "Name of property\n  @include module-name.get(\"property\");"
      }
    ],
    "group": [
      "grid"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "require-map-get"
      },
      {
        "type": "variable",
        "name": "config"
      }
    ],
    "file": {
      "path": "_grid.scss",
      "name": "_grid.scss"
    }
  },
  {
    "description": "Creates grid css (variation of original data-grid)\n",
    "commentRange": {
      "start": 73,
      "end": 81
    },
    "context": {
      "type": "mixin",
      "name": "create",
      "code": "\n  $attribute-item: \"#{ $attribute }-item\";\n  $select-grid: '[#{ $attribute }*=\"columns: #{ $columns }\"]';\n  $select-item: '[#{ $attribute-item }]';\n  $select-rule-col: \":before\";\n  $select-rule-row: \":after\";\n  // These through off syntax highlighting when inside interpolation\n  $position-class-column-first: get(\"position-class-column-first\");\n  $position-class-column-last: get(\"position-class-column-last\");\n  $position-class-row-first: get(\"position-class-row-first\");\n  $position-class-row-last: get(\"position-class-row-last\");\n\n  #{ $select-grid } {\n    @include layout.clearfix(); // For legacy browsers\n\n    // Ensure empty elements still take up space in layout\n    > #{ $select-item } {\n      min-height: 1px; \n      width: 100%;\n    }\n    // This is for value of true and also covers all options below\n    &#{'[#{ $attribute }*=\"gutters-row:\"]'} { \n      > #{ $select-item } {\n        padding-top:  $gutter;\n        padding-bottom: $gutter;\n      }\n    }\n    &#{'[#{ $attribute }*=\"gutters-row: top\"]'} { \n      > #{ $select-item } {\n        &.#{ $position-class-row-last } {\n          padding-bottom: 0;\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"gutters-row: bottom\"]'} { \n      > #{ $select-item } {\n        &.#{ $position-class-row-first } {\n          padding-top: 0;\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"gutters-row: fit\"]'} { \n      margin-top: -$gutter;\n      margin-bottom: -$gutter;\n    }\n    // Rules: Row\n    &#{'[#{ $attribute }*=\"rules-row:\"]'} { \n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          position: absolute;\n          left: 0;\n          right: 0;\n          height: $rule-size;\n          background: color.get($rule-color);\n        }\n      }\n    }\n    // Rules: Applies to both column and row\n    &#{'[#{ $attribute }*=\"rules\"]'} { \n      > #{ $select-item } {\n        position: relative;\n      }\n    }\n    // Rules: Column\n    &#{'[#{ $attribute }*=\"rules-column:\"]'} { \n      > #{ $select-item } {\n        &#{ $select-rule-col } {\n          position: absolute;\n          top: 0;\n          bottom: 0;\n          width: $rule-size;\n          background: color.get($rule-color);\n        }\n      }\n    }\n    // Options for the left or right\n    @include -create-rule-col-position(\n      $position: \"left\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-col: $select-rule-col, \n      $end-class: $position-class-column-first\n    );\n    @include -create-rule-col-position(\n      $position: \"right\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-col: $select-rule-col, \n      $end-class: $position-class-column-last\n    );\n    // Override first or last column removing the rule using matching specificity\n    &#{'[#{ $attribute }*=\"rules-column:\"][#{ $attribute }*=\"rules-column-ends: true\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-col } {\n          content: '';\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"rules-column-align: gutter\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-col } {\n          top: $gutter;\n          bottom: $gutter;\n        }\n      }\n    }\n    // Options for the left or right\n    @include -create-rule-row-position(\n      $position: \"top\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-row: $select-rule-row, \n      $between: false\n    );\n    @include -create-rule-row-position(\n      $position: \"bottom\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-row: $select-rule-row, \n      $between: false\n    );\n\n    &#{'[#{ $attribute }*=\"rules-row: between\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          bottom: math.floor(math.div($rule-size, 2)) * -1;\n        }\n        // For removing the rule per row (via equal heights for now)\n        &.#{ $position-class-row-last } {\n          &#{ $select-rule-row } {\n            content: none;\n          }\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"rules-row-align: gutter\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          left: $gutter;\n          right: $gutter;\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"rules-row-persist: true\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          content: '';\n        }\n      }\n    }\n  }\n\n  @include breakpoint.min($breakpoint) {\n    // Select the attribute with matching column count\n    #{ $select-grid } {\n      // Defaults for grid an item\n      display: flex;\n      flex-flow: row wrap;\n      align-items: stretch;\n      margin-left: -$gutter;\n      margin-right: -$gutter;\n\n      > #{ $select-item } {\n        float: left; // Fallback\n        padding-left: $gutter;\n        padding-right: $gutter;\n      }\n      // Alignment options\n      &#{'[#{ $attribute }*=\"align: center\"]'} { \n        align-items: center;  \n      }\n      &#{'[#{ $attribute }*=\"align: end\"]'} { \n        align-items: flex-end;\n      }\n      &#{'[#{ $attribute }*=\"align: start\"]'} { \n        align-items: flex-start; \n      }\n      // Alignment of the children when using stretch\n      // - There is no stetch-start (that's defualt);\n      // - There is no stetch-middle (that's covered by stretch-);\n      &#{'[#{ $attribute }*=\"align: stretch-\"]'} { \n        // set the child to display as a single flex item\n        > #{ $select-item } {\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n        }\n      }\n      &#{'[#{ $attribute }*=\"align: stretch-end\"]'} { \n        > #{ $select-item } {\n          justify-content: flex-end;\n        }\n      }\n      // Other options\n      &#{'[#{ $attribute }*=\"gutters: false\"]'} { \n        margin-left: 0;\n        margin-right: 0;\n        > #{ $select-item } {\n          padding-left: 0;\n          padding-right: 0;\n        }\n      }\n      // Activate Rules\n      &#{'[#{ $attribute }*=\"rules-column:\"]'} {\n        > #{ $select-item } {\n          &#{ $select-rule-col } {\n            content: '';\n          }\n        }\n      }\n      &#{'[#{ $attribute }*=\"rules-row:\"]'} {\n        > #{ $select-item } {\n          &#{ $select-rule-row } {\n            content: '';\n          }\n        }\n      }\n      // Generated props for item\n      @include -create-column-widths(\n        $columns: $columns,\n        $attribute-item: $attribute-item,\n        $suffix: ''\n      );\n      @include -create-column-offsets(\n        $columns: $columns,\n        $attribute-item: $attribute-item,\n        $suffix: ''\n      );\n    }\n  }\n\n  @if $extra-breakpoints {\n    @each $name, $options in $extra-breakpoints {\n      $g: map.get($options, \"gutter\");\n      @include -create-extra-breakpoint(\n        $name: $name, \n        $breakpoint: map.get($options, \"breakpoint\"),\n        $gutter: if($g, $g, $gutter),\n        $columns: $columns,\n        $attribute-item: $attribute-item,\n        $select-grid: $select-grid,\n        $select-item: $select-item\n      );\n    }\n  }\n  @if $extra-rule-styles {\n    @each $name, $options in $extra-rule-styles {\n      $color: utils.require-map-get($options, \"color\", \"grid [extra rule style]\");\n      $size: utils.require-map-get($options, \"size\", \"grid [extra rule style]\");\n      #{ $select-grid } {\n\n        &#{'[#{_attr}*=\"rules-column-style: #{ $name }\"]'} {\n          > #{ $select-item } {\n            &#{ $select-rule-col } {\n              background-color: color.get($color);\n              width: $size;\n            }\n          }\n          @include -create-rule-col-position(\n            $position: \"left\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-col: $select-rule-col, \n            $end-class: false\n          );\n          @include -create-rule-col-position(\n            $position: \"right\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-col: $select-rule-col, \n            $end-class: false\n          );\n        }\n        &#{'[#{_attr}*=\"rules-row-style: #{ $name }\"]'} {\n          > #{ $select-item } {\n            &#{ $select-rule-row } {\n              background-color: $color;\n              height: $size;\n            }\n          }\n          @include -create-rule-row-position(\n            $position: \"top\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-row: $select-rule-row, \n            $between: false\n          );\n          @include -create-rule-row-position(\n            $position: \"bottom\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-row: $select-rule-row, \n            $between: false\n          );\n          @include -create-rule-row-position(\n            $position: \"bottom\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-row: $select-rule-row, \n            $between: true\n          );\n        }\n      }\n    }\n  }\n",
      "line": {
        "start": 83,
        "end": 407
      }
    },
    "parameter": [
      {
        "type": "Number",
        "name": "columns",
        "description": "Columns in grid"
      },
      {
        "type": "Number",
        "name": "breakpoint",
        "description": "Breakpoint key for starting the grid"
      },
      {
        "type": "Map",
        "name": "extra-breakpoints",
        "description": "Map with other breakpoints to add (map of breakpoint and gutter see config.extra-breakpoints for an example (smalles to largest)"
      },
      {
        "type": "Number",
        "name": "gutter",
        "description": "Size in pixels for the gutters"
      },
      {
        "type": "Boolean",
        "name": "include-rules",
        "description": "Print styles for including rules"
      },
      {
        "type": "Number",
        "name": "rule-size",
        "description": "Size of the rule (border/seperator)"
      },
      {
        "type": "Map",
        "name": "extra-rule-styles",
        "description": "Map of other rule styles to add (map of maps of size, and color), key is the styles name (\"name\": (\"size\" : 4px, \"color\" : \"color name\" || color))"
      },
      {
        "type": "String",
        "name": "attribute",
        "description": "Attribute to use for selecting grid and children. Children attribute get's \"-item\" as a suffix (\"ie. data-grid, data-grid-item\")"
      }
    ],
    "group": [
      "grid"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "require-map-get"
      },
      {
        "type": "function",
        "name": "require-map-get"
      },
      {
        "type": "function",
        "name": "get"
      }
    ],
    "file": {
      "path": "_grid.scss",
      "name": "_grid.scss"
    }
  },
  {
    "description": "Prints color-context and color-[name] styles as helper classes (bottom of stylesheet)\n",
    "commentRange": {
      "start": 8,
      "end": 8
    },
    "context": {
      "type": "mixin",
      "name": "styles",
      "code": "\n  @include utils.file-header('helpers', 'color');\n  @include color.all-context-styles(\"helper-class\");\n  @include color.all-color-class-styles();\n",
      "line": {
        "start": 10,
        "end": 14
      }
    },
    "group": [
      "helpers"
    ],
    "access": "public",
    "require": [],
    "file": {
      "path": "helpers/_color.scss",
      "name": "_color.scss"
    }
  },
  {
    "description": "Print utilities helper styles\n",
    "commentRange": {
      "start": 14,
      "end": 17
    },
    "context": {
      "type": "mixin",
      "name": "helper-display-styles",
      "code": "\n\n  @include utils.file-header('helpers', 'display');\n\n  $hiddenVisuallyPrefix: selector.class(\"hidden-visually\");\n\n  #{ $hiddenVisuallyPrefix } {\n    @include element.hidden-visually();\n  }\n  #{ $hiddenVisuallyPrefix }--focusable {\n    &:active,\n    &:focus {\n      @include element.hidden-visually(false);\n    }\n  }\n  // Consider removing\n  .clearfix,\n  .cf { \n    @include layout.clearfix();\n  }\n  .display-block {\n    display: block;\n  }\n  .display-inline {\n    display: inline;\n  }\n  .display-inline-block {\n    display: inline-block;\n  }\n  .hidden {\n    display: none;\n  }\n\n  // Display none per breakpoint\n  @each $name in map.keys(breakpoint.$sizes) {\n    @include breakpoint.min($name) {\n      .hidden-min-#{ $name } {\n        display: none;\n      }\n    }\n    @include breakpoint.max($name) {\n      .hidden-max-#{ $name } {\n        display: none;\n      }\n    }\n  }\n",
      "line": {
        "start": 19,
        "end": 65
      }
    },
    "example": [
      {
        "type": "scss",
        "code": "@include ulu.helper-display-styles();"
      }
    ],
    "group": [
      "helpers"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "class"
      },
      {
        "type": "variable",
        "name": "sizes"
      }
    ],
    "file": {
      "path": "helpers/_display.scss",
      "name": "_display.scss"
    }
  },
  {
    "description": "Prints all Helper styles\n",
    "commentRange": {
      "start": 32,
      "end": 36
    },
    "context": {
      "type": "mixin",
      "name": "helper-styles",
      "code": "\n  @include utils.file-header(\"helpers\");\n  @if $includes {\n    @include utils.require-list-contains($-all-includes, $includes);\n    $-all-includes: map.merge($-all-includes, $includes) !global;\n  }\n  @if (map.get($-all-includes, \"typography\")) {\n    @include typography.styles;\n  }\n  @if (map.get($-all-includes, \"units\")) {\n    @include units.styles;\n  }\n  @if (map.get($-all-includes, \"display\")) {\n    @include display.styles;\n  }\n  @if (map.get($-all-includes, \"utilities\")) {\n    @include utilities.styles;\n  }\n  @if (map.get($-all-includes, \"print\")) {\n    @include print.styles;\n  }\n  @if (map.get($-all-includes, \"color\")) {\n    @include color.styles;\n  }\n",
      "line": {
        "start": 38,
        "end": 62
      }
    },
    "parameter": [
      {
        "type": "List",
        "name": "includes",
        "description": "AA list of changes to this module's includes"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "@include ulu.helper-styles();"
      }
    ],
    "group": [
      "helpers"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      }
    ],
    "file": {
      "path": "helpers/_index.scss",
      "name": "_index.scss"
    }
  },
  {
    "description": "Printed Media Styles \n",
    "commentRange": {
      "start": 5,
      "end": 8
    },
    "context": {
      "type": "mixin",
      "name": "helper-print-styles",
      "code": "\n  // Note: this is an old framework stylesheet (may be outdated)\n  @media (print) {\n    .no-print { \n      display: none; \n    }\n    * {\n      background: transparent !important;\n      color: black !important;\n      box-shadow: none !important;\n      text-shadow: none !important;\n      filter: none !important;\n    }\n  \n    /* Black prints faster: h5bp.com/s */\n    a, \n    a:visited {\n      text-decoration: underline;\n    }\n  \n    /* Don't show links for images, or javascript/internal links */\n    pre, \n    blockquote {\n      border: 1px solid #999;\n      page-break-inside: avoid;\n    }\n  \n    /*thead {\n      display: table-header-group;\n    }*/\n  \n    /* h5bp.com/t */\n    tr, img {\n      page-break-inside: avoid;\n    }\n    img {\n      max-width: 100% !important;\n    }\n    p, \n    h2, \n    h3 {\n      orphans: 3;\n      widows: 3;\n    }\n    h2, \n    h3 {\n      page-break-after: avoid;\n    }\n  }\n",
      "line": {
        "start": 10,
        "end": 59
      }
    },
    "example": [
      {
        "type": "scss",
        "code": "@include ulu.helper-print-styles();"
      }
    ],
    "group": [
      "helpers"
    ],
    "access": "public",
    "require": [],
    "file": {
      "path": "helpers/_print.scss",
      "name": "_print.scss"
    }
  },
  {
    "description": "Prints Typography Helper styles\n",
    "commentRange": {
      "start": 10,
      "end": 21
    },
    "context": {
      "type": "mixin",
      "name": "helper-typography-styles",
      "code": "\n  \n  @include utils.file-header('helpers', 'typography');\n\n  $prefix: selector.class(\"type\");\n\n  @each $size, $values in typography.$sizes {\n    @if (map.get($values, \"helper-class\")) {\n      @if (map.get($values, \"helper-class-prefixed\")) {\n        #{ $prefix }-#{$size} {\n          @include typography.size($size);\n        }\n      } @else {\n        .#{$size} {\n          @include typography.size($size);\n        }\n      }\n    }\n  }\n  \n  #{ $prefix }-light    { font-weight: typography.get(\"font-weight-light\"); }\n  #{ $prefix }-normal   { font-weight: typography.get(\"font-weight-normal\"); }\n  #{ $prefix }-semibold { font-weight: typography.get(\"font-weight-semibold\"); }\n  #{ $prefix }-bold     { font-weight: typography.get(\"font-weight-bold\"); }\n  \n  #{ $prefix }-italic   { font-style: italic; }\n\n  #{ $prefix }-center   { text-align: center; }\n  #{ $prefix }-left     { text-align: left; }\n  #{ $prefix }-right    { text-align: right; }\n\n  #{ $prefix }-upper    { \n    text-transform: uppercase; \n    letter-spacing: typography.get(\"letter-spacing-uppercase\");\n  }\n  #{ $prefix }-lower    { text-transform: lowercase; }\n  #{ $prefix }-title    { text-transform: capitalize; }\n\n  #{ $prefix }-family { font-family: typography.get(\"font-family\"); }\n  #{ $prefix }-family-sans { font-family: typography.get(\"font-family-sans\"); }\n  #{ $prefix }-family-serif { font-family: typography.get(\"font-family-serif\"); }\n  #{ $prefix }-family-mono { font-family: typography.get(\"font-family-monospace\"); }\n\n  #{ $prefix }-word-break { @include typography.word-break(); }\n  #{ $prefix }-word-break-all { @include typography.word-break(true); }\n\n  #{ $prefix }-max-width { max-width: typography.get(\"max-width\"); }\n  #{ $prefix }-max-width-small { max-width: typography.get(\"max-width-small\"); }\n  #{ selector.class(\"line-height\") }-dense { line-height: typography.get(\"line-height-dense\"); }\n  #{ selector.class(\"line-height\") }-spaced { line-height: typography.get(\"line-height-spaced\"); }\n",
      "line": {
        "start": 23,
        "end": 73
      }
    },
    "example": [
      {
        "type": "scss",
        "code": "@include ulu.helper-typography-styles();"
      },
      {
        "type": "html",
        "code": "<span class=\"type-large-xxx\">A</span>\n<span class=\"type-large-xx\">A</span>\n<span class=\"type-large-x\">A</span>\n<span class=\"type-large\">A</span>\n<span class=\"type-base\">A</span>\n<span class=\"type-small\">A</span>\n<span class=\"type-small-x\">A</span>",
        "description": "Example of type size as helper prefixed"
      }
    ],
    "group": [
      "helpers"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "class"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "class"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "class"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "variable",
        "name": "sizes"
      }
    ],
    "file": {
      "path": "helpers/_typography.scss",
      "name": "_typography.scss"
    }
  },
  {
    "description": "Module Settings\n",
    "commentRange": {
      "start": 11,
      "end": 13
    },
    "context": {
      "type": "variable",
      "name": "config",
      "value": "(\n  \"sides\": (\"top\", \"bottom\", \"left\", \"right\")\n)",
      "scope": "default",
      "line": {
        "start": 15,
        "end": 17
      }
    },
    "type": "Map",
    "property": [
      {
        "type": "Number",
        "name": "$config.sides",
        "description": "Sides to print for helper classes (ie. reduce output of uneeded sides)"
      }
    ],
    "group": [
      "helpers"
    ],
    "access": "public",
    "file": {
      "path": "helpers/_units.scss",
      "name": "_units.scss"
    }
  },
  {
    "description": "Change modules $config\n",
    "commentRange": {
      "start": 19,
      "end": 22
    },
    "context": {
      "type": "mixin",
      "name": "set",
      "code": "\n  $config: map.merge($config, $changes) !global;\n",
      "line": {
        "start": 23,
        "end": 25
      }
    },
    "parameter": [
      {
        "type": "Map",
        "name": "changes",
        "description": "Map of changes"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "@include module-name.set(( \"property\" : value ));",
        "description": "General example, replace module-name with module's name"
      }
    ],
    "group": [
      "helpers"
    ],
    "access": "public",
    "require": [
      {
        "type": "variable",
        "name": "config"
      },
      {
        "type": "variable",
        "name": "config"
      }
    ],
    "file": {
      "path": "helpers/_units.scss",
      "name": "_units.scss"
    }
  },
  {
    "description": "Get a config option\n",
    "commentRange": {
      "start": 27,
      "end": 30
    },
    "context": {
      "type": "function",
      "name": "get",
      "code": "\n  @return utils.require-map-get($config, $name, \"units [config]\");\n",
      "line": {
        "start": 32,
        "end": 34
      }
    },
    "parameter": [
      {
        "type": "Map",
        "name": "name",
        "description": "Name of property"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "@include module-name.get(\"property\");",
        "description": "General example, replace module-name with module's name"
      }
    ],
    "group": [
      "helpers"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "require-map-get"
      },
      {
        "type": "variable",
        "name": "config"
      }
    ],
    "file": {
      "path": "helpers/_units.scss",
      "name": "_units.scss"
    }
  },
  {
    "description": "Prints all unit helper classes\n",
    "commentRange": {
      "start": 36,
      "end": 36
    },
    "context": {
      "type": "mixin",
      "name": "styles",
      "code": "\n  @include utils.file-header('helpers', 'leading');\n  @include create-property-classes(\"margin\", selector.class(\"margin\"));\n  @include create-property-classes(\"padding\", selector.class(\"padding\"));\n",
      "line": {
        "start": 38,
        "end": 42
      }
    },
    "group": [
      "helpers"
    ],
    "access": "public",
    "require": [
      {
        "type": "mixin",
        "name": "create-property-classes"
      },
      {
        "type": "mixin",
        "name": "create-property-classes"
      },
      {
        "type": "function",
        "name": "class"
      },
      {
        "type": "function",
        "name": "class"
      }
    ],
    "file": {
      "path": "helpers/_units.scss",
      "name": "_units.scss"
    }
  },
  {
    "description": "Creates the unit classes with all variations (from unit presets)\n- This can be used by itself if not outputing .styles() or if you wanted to change the default prefixes\n",
    "commentRange": {
      "start": 44,
      "end": 45
    },
    "context": {
      "type": "mixin",
      "name": "create-property-classes",
      "code": "\n  // On all sides\n  #{ $prefix } {\n    #{ $property } : units.get(1);\n  }\n  @each $name, $value in units.$config {\n    #{ $prefix }-#{ $name } {\n      #{ $property }: units.get($name);\n    }\n  }\n  // Individual sides\n  @each $side in get(\"sides\") {\n    $full-prop: #{ $property }-#{ $side };\n    #{ $prefix }-#{ $side } {\n      #{ $full-prop }: units.get(1);\n    }\n    @each $name, $value in units.$config {\n      #{ $prefix }-#{ $side }-#{ $name } {\n        #{ $full-prop }: units.get($name);\n      }\n    }\n  }\n",
      "line": {
        "start": 46,
        "end": 68
      }
    },
    "group": [
      "helpers"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "variable",
        "name": "config"
      },
      {
        "type": "variable",
        "name": "config"
      }
    ],
    "file": {
      "path": "helpers/_units.scss",
      "name": "_units.scss"
    },
    "usedBy": [
      {
        "description": "Prints all unit helper classes\n",
        "context": {
          "type": "mixin",
          "name": "styles",
          "code": "\n  @include utils.file-header('helpers', 'leading');\n  @include create-property-classes(\"margin\", selector.class(\"margin\"));\n  @include create-property-classes(\"padding\", selector.class(\"padding\"));\n",
          "line": {
            "start": 38,
            "end": 42
          }
        }
      },
      {
        "description": "Prints all unit helper classes\n",
        "context": {
          "type": "mixin",
          "name": "styles",
          "code": "\n  @include utils.file-header('helpers', 'leading');\n  @include create-property-classes(\"margin\", selector.class(\"margin\"));\n  @include create-property-classes(\"padding\", selector.class(\"padding\"));\n",
          "line": {
            "start": 38,
            "end": 42
          }
        }
      }
    ]
  },
  {
    "description": "Print utilities helper styles\n",
    "commentRange": {
      "start": 9,
      "end": 12
    },
    "context": {
      "type": "mixin",
      "name": "helper-utilities-styles",
      "code": "\n\n  @include utils.file-header('helpers', 'utilities');\n  \n  // Consider removing\n  .no-scroll-y { \n    overflow-y: hidden; \n  }\n  .no-scroll-x { \n    overflow-x: hidden; \n  }\n  .full-height {\n    height: 100%;\n  }\n  .full-min-height {\n    min-height: 100%;\n  }\n  .image-fill {\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n  }\n  .image-full-width img,\n  .image-full-width {\n    width: 100%;\n    height: auto;\n  }\n  .margin-auto,\n  .center {\n    margin-left: auto;\n    margin-right: auto;\n  }\n  .margin-left-auto {\n    margin-left: auto;\n  }\n  .margin-right-auto {\n    margin-right: auto;\n  }\n  .no-margin {\n    margin: 0;\n  }\n  .no-margin-top {\n    margin-top: 0;\n  }\n  .no-margin-bottom {\n    margin-bottom: 0;\n  }\n  .no-margin-left {\n    margin-left: 0;\n  }\n  .no-margin-right {\n    margin-right: 0;\n  }\n  .no-padding {\n    padding: 0;\n  }\n  .no-padding-top {\n    padding-top: 0;\n  }\n  .no-padding-bottom {\n    padding-bottom: 0;\n  }\n  .no-padding-left {\n    padding-left: 0;\n  }\n  .no-padding-right {\n    padding-right: 0;\n  }\n",
      "line": {
        "start": 14,
        "end": 82
      }
    },
    "example": [
      {
        "type": "scss",
        "code": "@include ulu.helper-utilities-styles();"
      }
    ],
    "group": [
      "helpers"
    ],
    "access": "public",
    "require": [],
    "file": {
      "path": "helpers/_utilities.scss",
      "name": "_utilities.scss"
    }
  },
  {
    "description": "Module Settings\n",
    "commentRange": {
      "start": 12,
      "end": 18
    },
    "context": {
      "type": "variable",
      "name": "config",
      "value": "(\n  \"max-width\":         90rem,\n  \"margin\":            2rem,\n  \"z-index-sticky\":    100,\n  \"z-index-above\":     500,\n  \"z-index-fixed\":     1000\n)",
      "scope": "default",
      "line": {
        "start": 20,
        "end": 26
      }
    },
    "type": "Map",
    "property": [
      {
        "type": "Number",
        "name": "$config.max-width",
        "description": "Common max-width for site"
      },
      {
        "type": "Number",
        "name": "$config.margin",
        "description": "Common margin for site"
      },
      {
        "type": "Number",
        "name": "$config.z-index-fixed",
        "description": "Common z-index, above everything"
      },
      {
        "type": "Number",
        "name": "$config.z-index-sticky",
        "description": "Common z-index for sticky or stuck items"
      },
      {
        "type": "Number",
        "name": "$config.z-index-above",
        "description": "Common z-index, below sticky"
      }
    ],
    "group": [
      "layout"
    ],
    "access": "public",
    "file": {
      "path": "_layout.scss",
      "name": "_layout.scss"
    }
  },
  {
    "description": "Change modules $config\n",
    "commentRange": {
      "start": 28,
      "end": 30
    },
    "context": {
      "type": "mixin",
      "name": "set",
      "code": "\n  $config: map.merge($config, $changes) !global;\n",
      "line": {
        "start": 31,
        "end": 33
      }
    },
    "parameter": [
      {
        "type": "Map",
        "name": "changes",
        "description": "Map of changes\n  @include module-name.set(( \"property\" : value ));"
      }
    ],
    "group": [
      "layout"
    ],
    "access": "public",
    "require": [
      {
        "type": "variable",
        "name": "config"
      },
      {
        "type": "variable",
        "name": "config"
      }
    ],
    "file": {
      "path": "_layout.scss",
      "name": "_layout.scss"
    }
  },
  {
    "description": "Get a config option\n",
    "commentRange": {
      "start": 35,
      "end": 37
    },
    "context": {
      "type": "function",
      "name": "get",
      "code": "\n  @return utils.require-map-get($config, $name, \"layout [config]\");\n",
      "line": {
        "start": 39,
        "end": 41
      }
    },
    "parameter": [
      {
        "type": "Map",
        "name": "name",
        "description": "Name of property\n  @include module-name.get(\"property\");"
      }
    ],
    "group": [
      "layout"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "require-map-get"
      },
      {
        "type": "variable",
        "name": "config"
      }
    ],
    "file": {
      "path": "_layout.scss",
      "name": "_layout.scss"
    }
  },
  {
    "description": "Returns padding to another property including breakpoints\nie. { top: $containers-padding; }\n",
    "commentRange": {
      "start": 67,
      "end": 68
    },
    "context": {
      "type": "mixin",
      "name": "match-container-padding",
      "code": "\n  $container: get-container($name);\n  $breakpoints: map.get($container, \"breakpoints\");\n  #{ $property }: get-container-padding($name, $sides);\n  @if $breakpoints {\n    @each $breakpoint, $props in $breakpoints {\n      $direction: map.get($props, \"direction\");\n      @include breakpoint.from($name, $direction) {\n        #{ $property }: get-container-padding($name, $sides, $breakpoint);\n      }\n    }\n  }\n",
      "line": {
        "start": 69,
        "end": 81
      }
    },
    "group": [
      "layout"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      }
    ],
    "file": {
      "path": "_layout.scss",
      "name": "_layout.scss"
    }
  },
  {
    "description": "Prints clearfix styles\n",
    "commentRange": {
      "start": 156,
      "end": 156
    },
    "context": {
      "type": "mixin",
      "name": "clearfix",
      "code": "\n  &:before,\n  &:after {\n    content: \"\";\n    display: table;\n    flex-basis: 0; // Flexbox, clear fix for pseudo elements in Safari\n    order: 1;\n  }\n  &:after { \n    clear: both; \n  }\n  *zoom: 1;\n",
      "line": {
        "start": 158,
        "end": 170
      }
    },
    "group": [
      "layout"
    ],
    "access": "public",
    "file": {
      "path": "_layout.scss",
      "name": "_layout.scss"
    }
  },
  {
    "description": "Aliases \n",
    "commentRange": {
      "start": 9,
      "end": 12
    },
    "context": {
      "type": "variable",
      "name": "aliases",
      "value": "(\n  \"#Images\" : \"/images\",\n)",
      "scope": "default",
      "line": {
        "start": 14,
        "end": 16
      }
    },
    "type": "Map\n- Important: alias could be used for directory or file so omit trailing slash for directories\n- All aliases must start with \"#\"",
    "group": [
      "path"
    ],
    "access": "public",
    "file": {
      "path": "_path.scss",
      "name": "_path.scss"
    },
    "usedBy": [
      {
        "description": "Set aliases or change defaults\n",
        "context": {
          "type": "mixin",
          "name": "set-aliases",
          "code": "\n  $aliases: map.merge($aliases, $changes) !global;\n",
          "line": {
            "start": 21,
            "end": 23
          }
        }
      },
      {
        "description": "Set aliases or change defaults\n",
        "context": {
          "type": "mixin",
          "name": "set-aliases",
          "code": "\n  $aliases: map.merge($aliases, $changes) !global;\n",
          "line": {
            "start": 21,
            "end": 23
          }
        }
      },
      {
        "description": "Get an aliase's path\n",
        "context": {
          "type": "function",
          "name": "get-alias",
          "code": "\n  @return utils.require-map-get($aliases, $name, '[path alias]');\n",
          "line": {
            "start": 28,
            "end": 30
          }
        }
      }
    ]
  },
  {
    "description": "Set aliases or change defaults\n",
    "commentRange": {
      "start": 18,
      "end": 19
    },
    "context": {
      "type": "mixin",
      "name": "set-aliases",
      "code": "\n  $aliases: map.merge($aliases, $changes) !global;\n",
      "line": {
        "start": 21,
        "end": 23
      }
    },
    "parameter": [
      {
        "type": "Map",
        "name": "changes",
        "description": "Map of changes"
      }
    ],
    "group": [
      "path"
    ],
    "access": "public",
    "require": [
      {
        "type": "variable",
        "name": "aliases"
      },
      {
        "type": "variable",
        "name": "aliases"
      }
    ],
    "file": {
      "path": "_path.scss",
      "name": "_path.scss"
    }
  },
  {
    "description": "Get an aliase's path\n",
    "commentRange": {
      "start": 25,
      "end": 26
    },
    "context": {
      "type": "function",
      "name": "get-alias",
      "code": "\n  @return utils.require-map-get($aliases, $name, '[path alias]');\n",
      "line": {
        "start": 28,
        "end": 30
      }
    },
    "parameter": [
      {
        "type": "String",
        "name": "Name",
        "description": "Name of alias"
      }
    ],
    "group": [
      "path"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "require-map-get"
      },
      {
        "type": "variable",
        "name": "aliases"
      }
    ],
    "file": {
      "path": "_path.scss",
      "name": "_path.scss"
    },
    "usedBy": [
      {
        "description": "Resolves a Path \n- Checks if path is an alias if so rewrite's it\n- Future could include rewrites for easier updating or rearranging of legacy things\n- Aliases work by starting with \"#\", Since it's an illegal uri character, needs to be escaped if used as literal, we felt that it was the safest way to mix aliases in with real URLs (so that a dev of a module using path.resolve can always pass paths through (user input unknown if alias)\n",
        "context": {
          "type": "function",
          "name": "resolve",
          "code": "\n  $is-alias: string.index($path, \"@\") == 1;\n  $dir-index: string.index($path, \"/\");\n  $resolved-path: $path;\n  @if $is-alias {\n    // Extract alias\n    @if $dir-index {\n      $alias: string.slice($path, 1, $dir-index - 1);\n      @return \"#{ get-alias($alias) }#{ string.slice($path, $dir-index) }\";\n    // Must just be only an alias\n    } @else {\n      @return \"#{ get-alias($path) }\";\n    }\n  } @else {\n    @return $path;\n  }\n",
          "line": {
            "start": 42,
            "end": 58
          }
        }
      },
      {
        "description": "Resolves a Path \n- Checks if path is an alias if so rewrite's it\n- Future could include rewrites for easier updating or rearranging of legacy things\n- Aliases work by starting with \"#\", Since it's an illegal uri character, needs to be escaped if used as literal, we felt that it was the safest way to mix aliases in with real URLs (so that a dev of a module using path.resolve can always pass paths through (user input unknown if alias)\n",
        "context": {
          "type": "function",
          "name": "resolve",
          "code": "\n  $is-alias: string.index($path, \"@\") == 1;\n  $dir-index: string.index($path, \"/\");\n  $resolved-path: $path;\n  @if $is-alias {\n    // Extract alias\n    @if $dir-index {\n      $alias: string.slice($path, 1, $dir-index - 1);\n      @return \"#{ get-alias($alias) }#{ string.slice($path, $dir-index) }\";\n    // Must just be only an alias\n    } @else {\n      @return \"#{ get-alias($path) }\";\n    }\n  } @else {\n    @return $path;\n  }\n",
          "line": {
            "start": 42,
            "end": 58
          }
        }
      }
    ]
  },
  {
    "description": "Resolves a Path \n- Checks if path is an alias if so rewrite's it\n- Future could include rewrites for easier updating or rearranging of legacy things\n- Aliases work by starting with \"#\", Since it's an illegal uri character, needs to be escaped if used as literal, we felt that it was the safest way to mix aliases in with real URLs (so that a dev of a module using path.resolve can always pass paths through (user input unknown if alias)\n",
    "commentRange": {
      "start": 32,
      "end": 40
    },
    "context": {
      "type": "function",
      "name": "resolve",
      "code": "\n  $is-alias: string.index($path, \"@\") == 1;\n  $dir-index: string.index($path, \"/\");\n  $resolved-path: $path;\n  @if $is-alias {\n    // Extract alias\n    @if $dir-index {\n      $alias: string.slice($path, 1, $dir-index - 1);\n      @return \"#{ get-alias($alias) }#{ string.slice($path, $dir-index) }\";\n    // Must just be only an alias\n    } @else {\n      @return \"#{ get-alias($path) }\";\n    }\n  } @else {\n    @return $path;\n  }\n",
      "line": {
        "start": 42,
        "end": 58
      }
    },
    "example": [
      {
        "type": "scss",
        "code": ".img {\n  background-image: url(path.resolve(\"#Images/branding/logo\"));\n}"
      }
    ],
    "group": [
      "path"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "get-alias"
      },
      {
        "type": "function",
        "name": "get-alias"
      }
    ],
    "file": {
      "path": "_path.scss",
      "name": "_path.scss"
    }
  },
  {
    "description": "Module Settings\n- This module can be used for dynamic classnames (used in base and some components). Some components selectors are too complex or coupled for dynamic classnames. \n",
    "commentRange": {
      "start": 8,
      "end": 12
    },
    "context": {
      "type": "variable",
      "name": "config",
      "value": "(\n  \"prefix\" : \"\"\n)",
      "scope": "default",
      "line": {
        "start": 14,
        "end": 16
      }
    },
    "todo": [
      "See about documenting when a component doesn't run through the selecotr module to get it's base classname"
    ],
    "type": "Map",
    "property": [
      {
        "type": "String",
        "name": "$config.prefix",
        "description": "Global prefix for selectors (would be used for classname prefix for example)"
      }
    ],
    "group": [
      "selector"
    ],
    "access": "public",
    "file": {
      "path": "_selector.scss",
      "name": "_selector.scss"
    }
  },
  {
    "description": "Change modules $config\n",
    "commentRange": {
      "start": 21,
      "end": 24
    },
    "context": {
      "type": "mixin",
      "name": "set",
      "code": "\n  $config: map.merge($config, $changes) !global;\n",
      "line": {
        "start": 25,
        "end": 27
      }
    },
    "parameter": [
      {
        "type": "Map",
        "name": "changes",
        "description": "Map of changes"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "@include module-name.set(( \"property\" : value ));",
        "description": "General example, replace module-name with module's name"
      }
    ],
    "group": [
      "selector"
    ],
    "access": "public",
    "require": [
      {
        "type": "variable",
        "name": "config"
      },
      {
        "type": "variable",
        "name": "config"
      }
    ],
    "file": {
      "path": "_selector.scss",
      "name": "_selector.scss"
    }
  },
  {
    "description": "Get a config option\n",
    "commentRange": {
      "start": 29,
      "end": 32
    },
    "context": {
      "type": "function",
      "name": "get",
      "code": "\n  @return utils.require-map-get($config, $name, \"selector [config]\");\n",
      "line": {
        "start": 34,
        "end": 36
      }
    },
    "parameter": [
      {
        "type": "Map",
        "name": "name",
        "description": "Name of property"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "@include module-name.get(\"property\");",
        "description": "General example, replace module-name with module's name"
      }
    ],
    "group": [
      "selector"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "require-map-get"
      },
      {
        "type": "variable",
        "name": "config"
      }
    ],
    "file": {
      "path": "_selector.scss",
      "name": "_selector.scss"
    }
  },
  {
    "description": "Set the class selector overrides\n",
    "commentRange": {
      "start": 38,
      "end": 39
    },
    "context": {
      "type": "mixin",
      "name": "set-class-overrides",
      "code": "\n  $-class-overrides: map.merge($-class-overrides, $changes) !global;\n",
      "line": {
        "start": 41,
        "end": 43
      }
    },
    "parameter": [
      {
        "type": "Map",
        "name": "changes",
        "description": "Changes to merge"
      }
    ],
    "group": [
      "selector"
    ],
    "access": "public",
    "require": [],
    "file": {
      "path": "_selector.scss",
      "name": "_selector.scss"
    }
  },
  {
    "description": "Used to allow global prefixing of classes, and also the ability to \nChange a class used in the system (ie. like a component for example)\n",
    "commentRange": {
      "start": 45,
      "end": 47
    },
    "context": {
      "type": "function",
      "name": "class",
      "code": "\n  $override: map.get($-class-overrides, $class);\n  @return \".#{ get(\"prefix\") }#{ if($override, $override, $class) }\";\n",
      "line": {
        "start": 49,
        "end": 52
      }
    },
    "parameter": [
      {
        "type": "String",
        "name": "class",
        "description": "The classname to set"
      }
    ],
    "group": [
      "selector"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      }
    ],
    "file": {
      "path": "_selector.scss",
      "name": "_selector.scss"
    },
    "usedBy": [
      {
        "description": "Prints elements base styles\n",
        "context": {
          "type": "mixin",
          "name": "base-typography-styles",
          "code": "\n\n  @include utils.file-header('base', 'typography');\n\n  $prefix: selector.class(\"type\");\n\n  // Print base typographic sizes\n  @each $size, $values in typography.$sizes {\n    @if (map.get($values, \"base-class\")) {\n      @if (map.get($values, \"base-class-prefixed\")) {\n        #{ $prefix }-#{$size} {\n          @include typography.size($size);\n        }\n      } @else {\n        .#{$size} {\n          @include typography.size($size);\n        }\n      }\n    }\n  }\n",
          "line": {
            "start": 22,
            "end": 42
          }
        }
      },
      {
        "description": "Prints all context styles \n",
        "context": {
          "type": "mixin",
          "name": "all-context-styles",
          "code": "\n  $prefix: selector.class(\"color-context\");\n  @each $name, $context in $contexts {\n    @if (not $with-prop or map.get($context, $with-prop)) {\n      #{ $prefix }-#{ $name } {\n        @include context-styles($name);\n      }\n    }\n  }\n",
          "line": {
            "start": 172,
            "end": 181
          }
        }
      },
      {
        "description": "Outputs all color classes\n",
        "context": {
          "type": "mixin",
          "name": "all-color-class-styles",
          "code": "\n  $prefix: selector.class(\"color\");\n  @each $name, $output in $color-classes {\n    @if ($output) {\n      #{ $prefix }-#{ $name } {\n        color: get($name);\n      }\n    }\n  }\n",
          "line": {
            "start": 188,
            "end": 197
          }
        }
      },
      {
        "description": "Prints button component styles\n",
        "context": {
          "type": "mixin",
          "name": "component-button-styles",
          "code": "\n  @include utils.file-header('component', 'button');\n\n  $prefix: selector.class(\"button\");\n  $icon-selector: \"#{ $prefix }--icon\";\n\n  #{ $prefix } {\n    @include button.default();\n  }\n  \n  @each $size, $values in button.$sizes {\n    #{ $prefix }--#{$size} {\n      @include button.size($size);\n    }\n  }\n\n  @each $style, $values in button.$styles {\n    #{ $prefix }--#{$style} {\n      @include button.style($style);\n    }\n  }\n\n  #{ $icon-selector } {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    min-width: 0;\n    max-width: none;\n    border-radius: button.get(\"icon-border-radius\");\n    font-size: button.get(\"icon-font-size\");\n    width: button.get(\"icon-size\");\n    height: button.get(\"icon-size\");\n    padding: 0 !important;\n  }\n\n  @each $size, $values in button.$sizes {\n    $icon-size: map.get($values, \"icon-size\");\n    $icon-font-size: map.get($values, \"icon-font-size\");\n    @if ($icon-size or $icon-font-size) {\n      #{ $prefix }--#{$size}#{ $icon-selector } {\n        width: $icon-size;\n        height: $icon-size;\n        font-size: $icon-font-size;\n      }\n    }\n  }\n",
          "line": {
            "start": 18,
            "end": 64
          }
        }
      },
      {
        "description": "Link compontent styles (.link)\n- Contextual link styling\n- Styles all links within as normal text hyperlinks (hover, visited)\n",
        "context": {
          "type": "mixin",
          "name": "component-links-styles",
          "code": "\n  $selector: selector.class(\"links\");\n  #{ $selector } {\n    a {\n      @include element.link(true, true);\n    }\n  }\n  #{ $selector }-no-visited {\n    a {\n      @include element.link();\n    }\n  }\n",
          "line": {
            "start": 15,
            "end": 27
          }
        }
      },
      {
        "description": "Output styles\n",
        "context": {
          "type": "mixin",
          "name": "styles",
          "code": "\n  $prefix: selector.class(\"list-bullet\");\n  #{ $prefix } {\n    @include element.styles-unordered-list();\n    li {\n      &::marker {\n        color: color.get(\"bullet\");\n      }\n    }\n  }\n",
          "line": {
            "start": 11,
            "end": 21
          }
        }
      },
      {
        "description": "Output styles\n",
        "context": {
          "type": "mixin",
          "name": "styles",
          "code": "\n\n  $class: selector.class(\"rule\");\n  \n  #{ $class } {\n    @include element.rule();\n  }\n  // Output user's styles presets\n  @each $name, $value in element.$rule-styles {\n    #{ $class }--#{ $name } {\n      @include element.rule-style($name);\n    }\n  }\n  // Output user's margin presets\n  @each $name, $value in element.$rule-margins {\n    #{ $class }--margin-#{ $name } {\n      @include element.rule-margin($name);\n    }\n  }\n\n  // Meant to be user by tself without content\n  $short-width: get(\"short-width\");\n  @if ($short-width) {\n    #{ $class }--short {\n      width: $short-width;\n      max-width: 100%;\n      border-bottom-width: get(\"short-border-width\");\n    }\n  }\n",
          "line": {
            "start": 41,
            "end": 70
          }
        }
      },
      {
        "description": "Print utilities helper styles\n",
        "context": {
          "type": "mixin",
          "name": "helper-display-styles",
          "code": "\n\n  @include utils.file-header('helpers', 'display');\n\n  $hiddenVisuallyPrefix: selector.class(\"hidden-visually\");\n\n  #{ $hiddenVisuallyPrefix } {\n    @include element.hidden-visually();\n  }\n  #{ $hiddenVisuallyPrefix }--focusable {\n    &:active,\n    &:focus {\n      @include element.hidden-visually(false);\n    }\n  }\n  // Consider removing\n  .clearfix,\n  .cf { \n    @include layout.clearfix();\n  }\n  .display-block {\n    display: block;\n  }\n  .display-inline {\n    display: inline;\n  }\n  .display-inline-block {\n    display: inline-block;\n  }\n  .hidden {\n    display: none;\n  }\n\n  // Display none per breakpoint\n  @each $name in map.keys(breakpoint.$sizes) {\n    @include breakpoint.min($name) {\n      .hidden-min-#{ $name } {\n        display: none;\n      }\n    }\n    @include breakpoint.max($name) {\n      .hidden-max-#{ $name } {\n        display: none;\n      }\n    }\n  }\n",
          "line": {
            "start": 19,
            "end": 65
          }
        }
      },
      {
        "description": "Prints Typography Helper styles\n",
        "context": {
          "type": "mixin",
          "name": "helper-typography-styles",
          "code": "\n  \n  @include utils.file-header('helpers', 'typography');\n\n  $prefix: selector.class(\"type\");\n\n  @each $size, $values in typography.$sizes {\n    @if (map.get($values, \"helper-class\")) {\n      @if (map.get($values, \"helper-class-prefixed\")) {\n        #{ $prefix }-#{$size} {\n          @include typography.size($size);\n        }\n      } @else {\n        .#{$size} {\n          @include typography.size($size);\n        }\n      }\n    }\n  }\n  \n  #{ $prefix }-light    { font-weight: typography.get(\"font-weight-light\"); }\n  #{ $prefix }-normal   { font-weight: typography.get(\"font-weight-normal\"); }\n  #{ $prefix }-semibold { font-weight: typography.get(\"font-weight-semibold\"); }\n  #{ $prefix }-bold     { font-weight: typography.get(\"font-weight-bold\"); }\n  \n  #{ $prefix }-italic   { font-style: italic; }\n\n  #{ $prefix }-center   { text-align: center; }\n  #{ $prefix }-left     { text-align: left; }\n  #{ $prefix }-right    { text-align: right; }\n\n  #{ $prefix }-upper    { \n    text-transform: uppercase; \n    letter-spacing: typography.get(\"letter-spacing-uppercase\");\n  }\n  #{ $prefix }-lower    { text-transform: lowercase; }\n  #{ $prefix }-title    { text-transform: capitalize; }\n\n  #{ $prefix }-family { font-family: typography.get(\"font-family\"); }\n  #{ $prefix }-family-sans { font-family: typography.get(\"font-family-sans\"); }\n  #{ $prefix }-family-serif { font-family: typography.get(\"font-family-serif\"); }\n  #{ $prefix }-family-mono { font-family: typography.get(\"font-family-monospace\"); }\n\n  #{ $prefix }-word-break { @include typography.word-break(); }\n  #{ $prefix }-word-break-all { @include typography.word-break(true); }\n\n  #{ $prefix }-max-width { max-width: typography.get(\"max-width\"); }\n  #{ $prefix }-max-width-small { max-width: typography.get(\"max-width-small\"); }\n  #{ selector.class(\"line-height\") }-dense { line-height: typography.get(\"line-height-dense\"); }\n  #{ selector.class(\"line-height\") }-spaced { line-height: typography.get(\"line-height-spaced\"); }\n",
          "line": {
            "start": 23,
            "end": 73
          }
        }
      },
      {
        "description": "Prints Typography Helper styles\n",
        "context": {
          "type": "mixin",
          "name": "helper-typography-styles",
          "code": "\n  \n  @include utils.file-header('helpers', 'typography');\n\n  $prefix: selector.class(\"type\");\n\n  @each $size, $values in typography.$sizes {\n    @if (map.get($values, \"helper-class\")) {\n      @if (map.get($values, \"helper-class-prefixed\")) {\n        #{ $prefix }-#{$size} {\n          @include typography.size($size);\n        }\n      } @else {\n        .#{$size} {\n          @include typography.size($size);\n        }\n      }\n    }\n  }\n  \n  #{ $prefix }-light    { font-weight: typography.get(\"font-weight-light\"); }\n  #{ $prefix }-normal   { font-weight: typography.get(\"font-weight-normal\"); }\n  #{ $prefix }-semibold { font-weight: typography.get(\"font-weight-semibold\"); }\n  #{ $prefix }-bold     { font-weight: typography.get(\"font-weight-bold\"); }\n  \n  #{ $prefix }-italic   { font-style: italic; }\n\n  #{ $prefix }-center   { text-align: center; }\n  #{ $prefix }-left     { text-align: left; }\n  #{ $prefix }-right    { text-align: right; }\n\n  #{ $prefix }-upper    { \n    text-transform: uppercase; \n    letter-spacing: typography.get(\"letter-spacing-uppercase\");\n  }\n  #{ $prefix }-lower    { text-transform: lowercase; }\n  #{ $prefix }-title    { text-transform: capitalize; }\n\n  #{ $prefix }-family { font-family: typography.get(\"font-family\"); }\n  #{ $prefix }-family-sans { font-family: typography.get(\"font-family-sans\"); }\n  #{ $prefix }-family-serif { font-family: typography.get(\"font-family-serif\"); }\n  #{ $prefix }-family-mono { font-family: typography.get(\"font-family-monospace\"); }\n\n  #{ $prefix }-word-break { @include typography.word-break(); }\n  #{ $prefix }-word-break-all { @include typography.word-break(true); }\n\n  #{ $prefix }-max-width { max-width: typography.get(\"max-width\"); }\n  #{ $prefix }-max-width-small { max-width: typography.get(\"max-width-small\"); }\n  #{ selector.class(\"line-height\") }-dense { line-height: typography.get(\"line-height-dense\"); }\n  #{ selector.class(\"line-height\") }-spaced { line-height: typography.get(\"line-height-spaced\"); }\n",
          "line": {
            "start": 23,
            "end": 73
          }
        }
      },
      {
        "description": "Prints Typography Helper styles\n",
        "context": {
          "type": "mixin",
          "name": "helper-typography-styles",
          "code": "\n  \n  @include utils.file-header('helpers', 'typography');\n\n  $prefix: selector.class(\"type\");\n\n  @each $size, $values in typography.$sizes {\n    @if (map.get($values, \"helper-class\")) {\n      @if (map.get($values, \"helper-class-prefixed\")) {\n        #{ $prefix }-#{$size} {\n          @include typography.size($size);\n        }\n      } @else {\n        .#{$size} {\n          @include typography.size($size);\n        }\n      }\n    }\n  }\n  \n  #{ $prefix }-light    { font-weight: typography.get(\"font-weight-light\"); }\n  #{ $prefix }-normal   { font-weight: typography.get(\"font-weight-normal\"); }\n  #{ $prefix }-semibold { font-weight: typography.get(\"font-weight-semibold\"); }\n  #{ $prefix }-bold     { font-weight: typography.get(\"font-weight-bold\"); }\n  \n  #{ $prefix }-italic   { font-style: italic; }\n\n  #{ $prefix }-center   { text-align: center; }\n  #{ $prefix }-left     { text-align: left; }\n  #{ $prefix }-right    { text-align: right; }\n\n  #{ $prefix }-upper    { \n    text-transform: uppercase; \n    letter-spacing: typography.get(\"letter-spacing-uppercase\");\n  }\n  #{ $prefix }-lower    { text-transform: lowercase; }\n  #{ $prefix }-title    { text-transform: capitalize; }\n\n  #{ $prefix }-family { font-family: typography.get(\"font-family\"); }\n  #{ $prefix }-family-sans { font-family: typography.get(\"font-family-sans\"); }\n  #{ $prefix }-family-serif { font-family: typography.get(\"font-family-serif\"); }\n  #{ $prefix }-family-mono { font-family: typography.get(\"font-family-monospace\"); }\n\n  #{ $prefix }-word-break { @include typography.word-break(); }\n  #{ $prefix }-word-break-all { @include typography.word-break(true); }\n\n  #{ $prefix }-max-width { max-width: typography.get(\"max-width\"); }\n  #{ $prefix }-max-width-small { max-width: typography.get(\"max-width-small\"); }\n  #{ selector.class(\"line-height\") }-dense { line-height: typography.get(\"line-height-dense\"); }\n  #{ selector.class(\"line-height\") }-spaced { line-height: typography.get(\"line-height-spaced\"); }\n",
          "line": {
            "start": 23,
            "end": 73
          }
        }
      },
      {
        "description": "Prints all unit helper classes\n",
        "context": {
          "type": "mixin",
          "name": "styles",
          "code": "\n  @include utils.file-header('helpers', 'leading');\n  @include create-property-classes(\"margin\", selector.class(\"margin\"));\n  @include create-property-classes(\"padding\", selector.class(\"padding\"));\n",
          "line": {
            "start": 38,
            "end": 42
          }
        }
      },
      {
        "description": "Prints all unit helper classes\n",
        "context": {
          "type": "mixin",
          "name": "styles",
          "code": "\n  @include utils.file-header('helpers', 'leading');\n  @include create-property-classes(\"margin\", selector.class(\"margin\"));\n  @include create-property-classes(\"padding\", selector.class(\"padding\"));\n",
          "line": {
            "start": 38,
            "end": 42
          }
        }
      }
    ]
  },
  {
    "description": "Module Settings\n",
    "commentRange": {
      "start": 17,
      "end": 27
    },
    "context": {
      "type": "variable",
      "name": "config",
      "value": "(\n  \"font-size\" : 16px, \n  \"font-family\" : (ui-sans-serif, \"Open Sans\", Helvetica, Arial, sans-serif),\n  \"font-family-sans\" : (ui-sans-serif, \"Open Sans\", Helvetica, Arial, sans-serif),\n  \"font-family-serif\" : (Cambria, Georgia, serif),\n  \"font-family-monospace\" : (Menlo, Consolas, Monaco, monospace),\n  \"font-weight\" : inherit,\n  \"font-weight-headline\" : bold,\n  \"font-weight-light\" : 300,\n  \"font-weight-normal\" : normal,\n  \"font-weight-semibold\" : 600,\n  \"font-weight-bold\" : bold,\n  \"line-height\" : 1.5,\n  \"line-height-dense\": 1.3,\n  \"line-height-spaced\": 1.75,\n  \"size-ratio\": 2,\n  \"size-line-height-ratio\": 0.97,\n  \"scale-steps\": 5,\n  \"responsive-change\": 0.05vw, \n  \"margin-bottom\":  1em,\n  \"margin-top\":  false,\n  \"letter-spacing-uppercase\" : 0.04em,\n  \"max-width\" : 60rem,\n  \"max-width-small\" : 50rem\n)",
      "scope": "default",
      "line": {
        "start": 29,
        "end": 53
      }
    },
    "type": "Map",
    "property": [
      {
        "type": "Number",
        "name": "$config.font-size",
        "description": "Default font size (use pixels, converted, is used for rem base)"
      },
      {
        "type": "Number",
        "name": "$config.font-family",
        "description": "Default font family"
      },
      {
        "type": "Number",
        "name": "$config.font-family-monospace",
        "description": "Base font-family for monospace"
      },
      {
        "type": "Number",
        "name": "$config.line-height",
        "description": "Default line height"
      },
      {
        "type": "Number",
        "name": "$config.line-height-dense",
        "description": "Default dense line height"
      },
      {
        "type": "Number",
        "name": "$config.size-ratio",
        "description": "Font size scale when using preset sizes, ratio mixin)"
      },
      {
        "type": "Number",
        "name": "$config.size-line-height-ratio",
        "description": "Default line height scaling (when using preset sizes, ratio mixin). Can shrink line-height as size increase if desrireable"
      },
      {
        "type": "Number",
        "name": "$config.responsive-change",
        "description": "Amount to scale typography by browser's width (use viewport units)"
      },
      {
        "type": "Number",
        "name": "$config.margin",
        "description": "Default margin for typography (like paragraphs)"
      }
    ],
    "group": [
      "typography"
    ],
    "todo": [
      "Idea: Should the maps value be processes when using the set-sizes, set? Instead of recalculated each time get-size is or get is used."
    ],
    "access": "public",
    "file": {
      "path": "_typography.scss",
      "name": "_typography.scss"
    }
  },
  {
    "description": "Change modules $config\n",
    "commentRange": {
      "start": 55,
      "end": 57
    },
    "context": {
      "type": "mixin",
      "name": "set",
      "code": "\n  $config: map.merge($config, $changes) !global;\n",
      "line": {
        "start": 59,
        "end": 61
      }
    },
    "parameter": [
      {
        "type": "Map",
        "name": "changes",
        "description": "Map of changes\n  @include typography.set-options(( \"font-size\" : 14px ));"
      }
    ],
    "group": [
      "typography"
    ],
    "todo": [
      "Idea: Should the maps value be processes when using the set-sizes, set? Instead of recalculated each time get-size is or get is used."
    ],
    "access": "public",
    "require": [
      {
        "type": "variable",
        "name": "config"
      },
      {
        "type": "variable",
        "name": "config"
      }
    ],
    "file": {
      "path": "_typography.scss",
      "name": "_typography.scss"
    }
  },
  {
    "description": "Get a config option\n",
    "commentRange": {
      "start": 63,
      "end": 65
    },
    "context": {
      "type": "function",
      "name": "get",
      "code": "\n  @return utils.require-map-get($config, $name, 'typography [config]');\n",
      "line": {
        "start": 67,
        "end": 69
      }
    },
    "parameter": [
      {
        "type": "Map",
        "name": "changes",
        "description": "Map of changes\n  @include typography.set-options(( \"font-size\" : 14px ));"
      }
    ],
    "group": [
      "typography"
    ],
    "todo": [
      "Idea: Should the maps value be processes when using the set-sizes, set? Instead of recalculated each time get-size is or get is used."
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "require-map-get"
      },
      {
        "type": "variable",
        "name": "config"
      }
    ],
    "file": {
      "path": "_typography.scss",
      "name": "_typography.scss"
    }
  },
  {
    "description": "Get scale of the base font-size\n",
    "commentRange": {
      "start": 71,
      "end": 73
    },
    "context": {
      "type": "function",
      "name": "scale",
      "code": "\n  @return calculate.ratio-scale-size(get(\"font-size\"), get(\"size-ratio\"), get(\"scale-steps\"), $step);\n",
      "line": {
        "start": 75,
        "end": 77
      }
    },
    "parameter": [
      {
        "type": "Number",
        "name": "step",
        "description": "Current size in the scale you want to calculate"
      }
    ],
    "return": {
      "type": "Number",
      "description": "Scaled value"
    },
    "group": [
      "typography"
    ],
    "todo": [
      "Idea: Should the maps value be processes when using the set-sizes, set? Instead of recalculated each time get-size is or get is used."
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "ratio-scale-size"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      }
    ],
    "file": {
      "path": "_typography.scss",
      "name": "_typography.scss"
    },
    "usedBy": [
      {
        "description": "Prints CSS keyframes\n",
        "context": {
          "type": "mixin",
          "name": "base-keyframes-styles",
          "code": "\n  @include utils.file-header('base', 'keyframes');\n  @keyframes fadeIn {\n    0% {\n      opacity: 0; \n    }\n    100% {\n      opacity: 1; \n    }\n  }\n  @keyframes FadeDownIn {\n    0% {\n      opacity: 0; \n      transform: translateY(-10px);\n    }\n    100%  {\n      opacity: 1; \n      transform: translateY(0);\n    }\n  }\n  @keyframes fadeInLeft {\n    0% {\n      opacity: 0; \n      transform: translatex(-10px);\n    }\n    100% {\n      opacity: 1; \n      transform: translatex(0);\n    }\n  }\n  @keyframes fadeInZoom {\n    // Delay\n    0% {\n      opacity: 0; \n      transform: scale(0);\n    }\n    // Start\n    50% {\n      opacity: 0; \n      transform: scale(0);\n    }\n    100%  {\n      opacity: 1; \n      transform: scale(1);\n    }\n  }\n  @keyframes rotate {\n    0% {\n      transform: rotate(0deg);\n    }\n    100%  {\n      transform: rotate(360deg);\n    }\n  }\n  @keyframes spin {\n    from {\n      transform:rotate(0deg);\n    }\n    to {\n      transform:rotate(360deg);\n    }\n  }\n",
          "line": {
            "start": 12,
            "end": 74
          }
        }
      },
      {
        "description": "Prints CSS keyframes\n",
        "context": {
          "type": "mixin",
          "name": "base-keyframes-styles",
          "code": "\n  @include utils.file-header('base', 'keyframes');\n  @keyframes fadeIn {\n    0% {\n      opacity: 0; \n    }\n    100% {\n      opacity: 1; \n    }\n  }\n  @keyframes FadeDownIn {\n    0% {\n      opacity: 0; \n      transform: translateY(-10px);\n    }\n    100%  {\n      opacity: 1; \n      transform: translateY(0);\n    }\n  }\n  @keyframes fadeInLeft {\n    0% {\n      opacity: 0; \n      transform: translatex(-10px);\n    }\n    100% {\n      opacity: 1; \n      transform: translatex(0);\n    }\n  }\n  @keyframes fadeInZoom {\n    // Delay\n    0% {\n      opacity: 0; \n      transform: scale(0);\n    }\n    // Start\n    50% {\n      opacity: 0; \n      transform: scale(0);\n    }\n    100%  {\n      opacity: 1; \n      transform: scale(1);\n    }\n  }\n  @keyframes rotate {\n    0% {\n      transform: rotate(0deg);\n    }\n    100%  {\n      transform: rotate(360deg);\n    }\n  }\n  @keyframes spin {\n    from {\n      transform:rotate(0deg);\n    }\n    to {\n      transform:rotate(360deg);\n    }\n  }\n",
          "line": {
            "start": 12,
            "end": 74
          }
        }
      },
      {
        "description": "Prints CSS keyframes\n",
        "context": {
          "type": "mixin",
          "name": "base-keyframes-styles",
          "code": "\n  @include utils.file-header('base', 'keyframes');\n  @keyframes fadeIn {\n    0% {\n      opacity: 0; \n    }\n    100% {\n      opacity: 1; \n    }\n  }\n  @keyframes FadeDownIn {\n    0% {\n      opacity: 0; \n      transform: translateY(-10px);\n    }\n    100%  {\n      opacity: 1; \n      transform: translateY(0);\n    }\n  }\n  @keyframes fadeInLeft {\n    0% {\n      opacity: 0; \n      transform: translatex(-10px);\n    }\n    100% {\n      opacity: 1; \n      transform: translatex(0);\n    }\n  }\n  @keyframes fadeInZoom {\n    // Delay\n    0% {\n      opacity: 0; \n      transform: scale(0);\n    }\n    // Start\n    50% {\n      opacity: 0; \n      transform: scale(0);\n    }\n    100%  {\n      opacity: 1; \n      transform: scale(1);\n    }\n  }\n  @keyframes rotate {\n    0% {\n      transform: rotate(0deg);\n    }\n    100%  {\n      transform: rotate(360deg);\n    }\n  }\n  @keyframes spin {\n    from {\n      transform:rotate(0deg);\n    }\n    to {\n      transform:rotate(360deg);\n    }\n  }\n",
          "line": {
            "start": 12,
            "end": 74
          }
        }
      }
    ]
  },
  {
    "description": "Get scale of the line-height\n",
    "commentRange": {
      "start": 79,
      "end": 82
    },
    "context": {
      "type": "function",
      "name": "scale-line-height",
      "code": "\n  @return calculate.ratio-scale-size(get(\"line-height\"), get(\"size-line-height-ratio\"), get(\"scale-steps\"), $step);\n",
      "line": {
        "start": 84,
        "end": 86
      }
    },
    "parameter": [
      {
        "type": "Number",
        "name": "step",
        "description": "Current size in the scale you want to calculate"
      }
    ],
    "return": {
      "type": "Number",
      "description": "Scaled value"
    },
    "todo": [
      "Setup breakpoints"
    ],
    "group": [
      "typography"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "ratio-scale-size"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      }
    ],
    "file": {
      "path": "_typography.scss",
      "name": "_typography.scss"
    }
  },
  {
    "description": "Convert pixel value to rem value based on typography $font-size\n",
    "commentRange": {
      "start": 88,
      "end": 90
    },
    "context": {
      "type": "function",
      "name": "rem",
      "code": "\n  @if math.unit($pixels) == \"px\"  {\n    @return math.div($pixels, get(\"font-size\")) * 1rem;\n  } @else {\n    @return $pixels + 1rem;\n  }\n",
      "line": {
        "start": 92,
        "end": 98
      }
    },
    "parameter": [
      {
        "type": "Number",
        "name": "pixels",
        "description": "Pixel value to convert from"
      }
    ],
    "return": {
      "type": "Number",
      "description": "Rem value"
    },
    "group": [
      "typography"
    ],
    "todo": [
      "Idea: Should the maps value be processes when using the set-sizes, set? Instead of recalculated each time get-size is or get is used."
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "get"
      }
    ],
    "file": {
      "path": "_typography.scss",
      "name": "_typography.scss"
    },
    "usedBy": [
      {
        "description": "Print a font-size for a given size\n",
        "context": {
          "type": "function",
          "name": "font-size",
          "code": "\n  $size: get-size($name);\n  $font-size: map.get($size, \"font-size\");\n  @return rem($font-size);\n",
          "line": {
            "start": 195,
            "end": 199
          }
        }
      },
      {
        "description": "Forces conversion to unitless line-height\n",
        "context": {
          "type": "function",
          "name": "unitless-line-height",
          "code": "\n  // Font size is rems, line-height is unkown\n  @if (math.is-unitless($line-height)) {\n    @return $line-height;\n  }\n  $unit: math.unit($line-height);\n  @if ($unit == \"em\") {\n    @return utility.strip-unit($line-height);\n  } @else if ($unit == \"pixels\" or $unit == \"rem\") {\n    $calc: math.div(rem($line-height), rem($font-size));\n    @return utility.strip-unit($calc);\n  } @else {\n    @error \"ULU: Unable to convert to unitless line-height for: #{ $line-height }\";\n  }\n",
          "line": {
            "start": 205,
            "end": 219
          }
        }
      },
      {
        "description": "Forces conversion to unitless line-height\n",
        "context": {
          "type": "function",
          "name": "unitless-line-height",
          "code": "\n  // Font size is rems, line-height is unkown\n  @if (math.is-unitless($line-height)) {\n    @return $line-height;\n  }\n  $unit: math.unit($line-height);\n  @if ($unit == \"em\") {\n    @return utility.strip-unit($line-height);\n  } @else if ($unit == \"pixels\" or $unit == \"rem\") {\n    $calc: math.div(rem($line-height), rem($font-size));\n    @return utility.strip-unit($calc);\n  } @else {\n    @error \"ULU: Unable to convert to unitless line-height for: #{ $line-height }\";\n  }\n",
          "line": {
            "start": 205,
            "end": 219
          }
        }
      },
      {
        "description": "Print a value from the size and convert it (to appropriate unit for framework)\n",
        "context": {
          "type": "function",
          "name": "get-size-converted-value",
          "code": "\n  // Font size is calculated differently\n  $value: map.get($size, $prop);\n  $font-size: map.get($size, \"font-size\");\n  $type: meta.type-of($value);\n  \n  @if ($value == false or $value == null) {\n    @return null;\n  // Numbers and true (default) need to be converted\n  } @else if ($value == true or $type == number) {\n    // Get default value\n    @if ($value == true)  {\n      $value: get($prop);\n    }\n    // Force line-height to be unitless\n    @if ($prop == \"line-height\") {\n      @return unitless-line-height($value, $font-size);\n    }\n    // Convert to REM\n    @if (math.unit($value) == \"px\") {\n      $value: rem($value);\n    }\n    @return $value;\n  } @else {\n    @return $value;\n  }\n",
          "line": {
            "start": 224,
            "end": 250
          }
        }
      }
    ]
  },
  {
    "description": "Changes pixels to em\n",
    "commentRange": {
      "start": 100,
      "end": 103
    },
    "context": {
      "type": "function",
      "name": "em",
      "code": "\n  @if (math.unit($value) == \"px\") {\n    $base: if($base, $base, get(\"font-size\"));\n    @return math.div($base, $value) * 1em;\n  } @else  {\n    @return $value;\n  }\n",
      "line": {
        "start": 105,
        "end": 112
      }
    },
    "parameter": [
      {
        "type": "Number",
        "name": "value",
        "description": "Pixel value to convert from"
      },
      {
        "type": "Number",
        "name": "base",
        "description": "Conversion base (defaults to font-size)"
      }
    ],
    "return": {
      "type": "Number",
      "description": "Rem value"
    },
    "group": [
      "typography"
    ],
    "todo": [
      "Idea: Should the maps value be processes when using the set-sizes, set? Instead of recalculated each time get-size is or get is used."
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "get"
      }
    ],
    "file": {
      "path": "_typography.scss",
      "name": "_typography.scss"
    }
  },
  {
    "description": "Break word stradegy\n",
    "commentRange": {
      "start": 114,
      "end": 115
    },
    "context": {
      "type": "mixin",
      "name": "word-break",
      "code": "\n  word-break: if($force, break-all, normal);\n  word-break: break-word;\n  hyphens: auto;\n",
      "line": {
        "start": 117,
        "end": 121
      }
    },
    "parameter": [
      {
        "type": "Boolean",
        "name": "force",
        "description": "Force words to break (will have unusual breaks)"
      }
    ],
    "group": [
      "typography"
    ],
    "todo": [
      "Idea: Should the maps value be processes when using the set-sizes, set? Instead of recalculated each time get-size is or get is used."
    ],
    "access": "public",
    "require": [],
    "file": {
      "path": "_typography.scss",
      "name": "_typography.scss"
    }
  },
  {
    "description": "Creates a size map \n- This is just an accelerator for creating a size map\n- You can pass your own size maps using set-sizes()\n",
    "commentRange": {
      "start": 123,
      "end": 128
    },
    "context": {
      "type": "function",
      "name": "new-size",
      "code": "\n  @return (\n    \"font-size\": $font-size,\n    \"font-weight\" : if($is-headline, get(\"font-weight-headline\"), null), \n    \"line-height\": $line-height,\n    \"responsive\" : true,\n    \"helper-class\" : if($is-headline, false, true),\n    \"helper-class-prefixed\" : true,\n    \"base-class\" : if($is-headline, true, false),\n    \"base-class-prefixed\" : false\n  );\n",
      "line": {
        "start": 130,
        "end": 141
      }
    },
    "parameter": [
      {
        "type": "Number",
        "name": "font-size",
        "description": "Font size"
      },
      {
        "type": "Number",
        "name": "line-height",
        "description": "Line height"
      },
      {
        "type": "Boolean",
        "name": "is-headline",
        "description": "Is a headline"
      }
    ],
    "group": [
      "typography"
    ],
    "todo": [
      "Idea: Should the maps value be processes when using the set-sizes, set? Instead of recalculated each time get-size is or get is used."
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "get"
      }
    ],
    "file": {
      "path": "_typography.scss",
      "name": "_typography.scss"
    }
  },
  {
    "description": "Default size presets\n",
    "commentRange": {
      "start": 143,
      "end": 152
    },
    "context": {
      "type": "variable",
      "name": "sizes",
      "value": "(\n  \"small-x\" :       new-size(scale(-2)),\n  \"small\" :         new-size(scale(-1)),\n  \"base\" :          new-size(scale(0)),\n  \"large\" :         new-size(scale(1),   scale-line-height(1)),\n  \"large-x\" :       new-size(scale(2),   scale-line-height(2)),\n  \"large-xx\" :      new-size(scale(3),   scale-line-height(3)),\n  \"large-xxx\" :     new-size(scale(4),   scale-line-height(4)),\n  \"h1\" :            new-size(scale(6),   scale-line-height(6),   true),\n  \"h2\" :            new-size(scale(5),   scale-line-height(5),   true),\n  \"h3\" :            new-size(scale(4),   scale-line-height(4),   true),\n  \"h4\" :            new-size(scale(3),   scale-line-height(3),   true),\n  \"h5\" :            new-size(scale(2),   scale-line-height(2),   true),\n  \"h6\" :            new-size(scale(1),   scale-line-height(1),   true)\n)",
      "scope": "default",
      "line": {
        "start": 154,
        "end": 168
      }
    },
    "type": "Map",
    "property": [
      {
        "type": "Number",
        "name": "$size.name",
        "description": "Name of size"
      },
      {
        "type": "Number",
        "name": "$size.name.font-size",
        "description": "Font size in rems or pixels"
      },
      {
        "type": "Number",
        "name": "$size.name.line-height",
        "description": "Line height (unitless)"
      },
      {
        "type": "Number",
        "name": "$size.name.responsive",
        "description": "Apply responsive sizes"
      },
      {
        "type": "Boolean",
        "name": "$size.name.base-class",
        "description": "This style should be included in the base (top can be overriden)"
      },
      {
        "type": "Boolean",
        "name": "$size.name.helper-class",
        "description": "This style should be included in the helpers (overrides)"
      }
    ],
    "todo": [
      "Add adaptive and use a map of breakpoints and whether it's up or down",
      "Add headlines"
    ],
    "group": [
      "typography"
    ],
    "access": "public",
    "file": {
      "path": "_typography.scss",
      "name": "_typography.scss"
    }
  },
  {
    "description": "Update the typography presets map\n",
    "commentRange": {
      "start": 170,
      "end": 177
    },
    "context": {
      "type": "mixin",
      "name": "set-sizes",
      "code": "\n  $sizes: utils.map-merge-or-overwrite($sizes, $changes, $deep, $overwrite) !global;\n",
      "line": {
        "start": 179,
        "end": 181
      }
    },
    "parameter": [
      {
        "type": "Map",
        "name": "changes",
        "description": "A map to merge into the color palette"
      },
      {
        "type": "Map",
        "name": "deep",
        "description": "Use deep merge"
      },
      {
        "type": "Map",
        "name": "overwrite",
        "description": "Overwrite the presets completly (cannot be used with deep)"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "@include typography.set((\n  \"small\" : 0.8rem\n));",
        "description": "Setting the error and type color"
      }
    ],
    "group": [
      "typography"
    ],
    "todo": [
      "Idea: Should the maps value be processes when using the set-sizes, set? Instead of recalculated each time get-size is or get is used."
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "map-merge-or-overwrite"
      },
      {
        "type": "variable",
        "name": "sizes"
      },
      {
        "type": "variable",
        "name": "sizes"
      }
    ],
    "file": {
      "path": "_typography.scss",
      "name": "_typography.scss"
    }
  },
  {
    "description": "Get a size's map\n",
    "commentRange": {
      "start": 183,
      "end": 185
    },
    "context": {
      "type": "function",
      "name": "get-size",
      "code": "\n  @return utils.require-map-get($sizes, $name, 'typography [size]');\n",
      "line": {
        "start": 187,
        "end": 189
      }
    },
    "parameter": [
      {
        "type": "String",
        "name": "name",
        "description": "Name of size"
      }
    ],
    "return": {
      "type": "Map"
    },
    "group": [
      "typography"
    ],
    "todo": [
      "Idea: Should the maps value be processes when using the set-sizes, set? Instead of recalculated each time get-size is or get is used."
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "require-map-get"
      },
      {
        "type": "variable",
        "name": "sizes"
      }
    ],
    "file": {
      "path": "_typography.scss",
      "name": "_typography.scss"
    },
    "usedBy": [
      {
        "description": "Print a font-size for a given size\n",
        "context": {
          "type": "function",
          "name": "font-size",
          "code": "\n  $size: get-size($name);\n  $font-size: map.get($size, \"font-size\");\n  @return rem($font-size);\n",
          "line": {
            "start": 195,
            "end": 199
          }
        }
      },
      {
        "description": "Print a typography size (font-size, line-height)\n",
        "context": {
          "type": "mixin",
          "name": "size",
          "code": "\n  $size: $name;\n  // Allow custom maps\n  @if (meta.type-of($name) == \"string\") {\n    $size: get-size($name);\n  }\n  @if ($changes) {\n    $size: map.merge($size, $changes);\n  }\n  $font-size: get-size-converted-value($size, \"font-size\");\n  $breakpoints: map.get($size, \"breakpoints\");\n  $responsive: map.get($size, \"responsive\");\n  $color: map.get($size, \"color\");\n\n  font-size: $font-size;\n  @if ($responsive) {\n    @include font-size-responsive($font-size, $responsive);\n  }\n  @if (not $only-font-size) {\n    font-weight: get-size-value($size, \"font-weight\");\n    font-family: get-size-value($size, \"font-family\");\n    line-height: get-size-converted-value($size, \"line-height\");\n    margin-top: get-size-converted-value($size, \"margin-top\");\n    margin-bottom: get-size-converted-value($size, \"margin-bottom\");\n    color: if($color, color.get($color), null);\n  }\n\n  // If they have breakpoints, process them\n  @if $breakpoints {\n    @each $name, $breakpoint in $breakpoints {\n      $direction: map.get($breakpoint, \"direction\");\n      @include breakpoint.from($name, $direction) {\n        @include size($breakpoint, null, $only-font-size);\n      }\n    }\n  }\n",
          "line": {
            "start": 282,
            "end": 318
          }
        }
      }
    ]
  },
  {
    "description": "Print a font-size for a given size\n",
    "commentRange": {
      "start": 191,
      "end": 193
    },
    "context": {
      "type": "function",
      "name": "font-size",
      "code": "\n  $size: get-size($name);\n  $font-size: map.get($size, \"font-size\");\n  @return rem($font-size);\n",
      "line": {
        "start": 195,
        "end": 199
      }
    },
    "todo": [
      "Remove doesn't work for breakpoints or responsive"
    ],
    "parameter": [
      {
        "type": "String",
        "name": "value",
        "description": "Size name"
      }
    ],
    "group": [
      "typography"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "get-size"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "rem"
      }
    ],
    "file": {
      "path": "_typography.scss",
      "name": "_typography.scss"
    }
  },
  {
    "description": "Forces conversion to unitless line-height\n",
    "commentRange": {
      "start": 201,
      "end": 203
    },
    "context": {
      "type": "function",
      "name": "unitless-line-height",
      "code": "\n  // Font size is rems, line-height is unkown\n  @if (math.is-unitless($line-height)) {\n    @return $line-height;\n  }\n  $unit: math.unit($line-height);\n  @if ($unit == \"em\") {\n    @return utility.strip-unit($line-height);\n  } @else if ($unit == \"pixels\" or $unit == \"rem\") {\n    $calc: math.div(rem($line-height), rem($font-size));\n    @return utility.strip-unit($calc);\n  } @else {\n    @error \"ULU: Unable to convert to unitless line-height for: #{ $line-height }\";\n  }\n",
      "line": {
        "start": 205,
        "end": 219
      }
    },
    "parameter": [
      {
        "type": "Number",
        "name": "line-height",
        "description": "Line height size in px, em, or rem"
      },
      {
        "type": "Number",
        "name": "font-size",
        "description": "Font size in px, em, or rem"
      }
    ],
    "group": [
      "typography"
    ],
    "todo": [
      "Idea: Should the maps value be processes when using the set-sizes, set? Instead of recalculated each time get-size is or get is used."
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "strip-unit"
      },
      {
        "type": "function",
        "name": "rem"
      },
      {
        "type": "function",
        "name": "rem"
      },
      {
        "type": "function",
        "name": "strip-unit"
      }
    ],
    "throw": [
      "ULU: Unable to convert to unitless line-height for: #{ $line-height }"
    ],
    "file": {
      "path": "_typography.scss",
      "name": "_typography.scss"
    },
    "usedBy": [
      {
        "description": "Print a value from the size and convert it (to appropriate unit for framework)\n",
        "context": {
          "type": "function",
          "name": "get-size-converted-value",
          "code": "\n  // Font size is calculated differently\n  $value: map.get($size, $prop);\n  $font-size: map.get($size, \"font-size\");\n  $type: meta.type-of($value);\n  \n  @if ($value == false or $value == null) {\n    @return null;\n  // Numbers and true (default) need to be converted\n  } @else if ($value == true or $type == number) {\n    // Get default value\n    @if ($value == true)  {\n      $value: get($prop);\n    }\n    // Force line-height to be unitless\n    @if ($prop == \"line-height\") {\n      @return unitless-line-height($value, $font-size);\n    }\n    // Convert to REM\n    @if (math.unit($value) == \"px\") {\n      $value: rem($value);\n    }\n    @return $value;\n  } @else {\n    @return $value;\n  }\n",
          "line": {
            "start": 224,
            "end": 250
          }
        }
      }
    ]
  },
  {
    "description": "Print a value from the size and convert it (to appropriate unit for framework)\n",
    "commentRange": {
      "start": 220,
      "end": 222
    },
    "context": {
      "type": "function",
      "name": "get-size-converted-value",
      "code": "\n  // Font size is calculated differently\n  $value: map.get($size, $prop);\n  $font-size: map.get($size, \"font-size\");\n  $type: meta.type-of($value);\n  \n  @if ($value == false or $value == null) {\n    @return null;\n  // Numbers and true (default) need to be converted\n  } @else if ($value == true or $type == number) {\n    // Get default value\n    @if ($value == true)  {\n      $value: get($prop);\n    }\n    // Force line-height to be unitless\n    @if ($prop == \"line-height\") {\n      @return unitless-line-height($value, $font-size);\n    }\n    // Convert to REM\n    @if (math.unit($value) == \"px\") {\n      $value: rem($value);\n    }\n    @return $value;\n  } @else {\n    @return $value;\n  }\n",
      "line": {
        "start": 224,
        "end": 250
      }
    },
    "parameter": [
      {
        "type": "Map",
        "name": "size",
        "description": "Size's map"
      },
      {
        "type": "String",
        "name": "props",
        "description": "The property to get"
      }
    ],
    "group": [
      "typography"
    ],
    "todo": [
      "Idea: Should the maps value be processes when using the set-sizes, set? Instead of recalculated each time get-size is or get is used."
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "unitless-line-height"
      },
      {
        "type": "function",
        "name": "rem"
      }
    ],
    "file": {
      "path": "_typography.scss",
      "name": "_typography.scss"
    },
    "usedBy": [
      {
        "description": "Print a typography size (font-size, line-height)\n",
        "context": {
          "type": "mixin",
          "name": "size",
          "code": "\n  $size: $name;\n  // Allow custom maps\n  @if (meta.type-of($name) == \"string\") {\n    $size: get-size($name);\n  }\n  @if ($changes) {\n    $size: map.merge($size, $changes);\n  }\n  $font-size: get-size-converted-value($size, \"font-size\");\n  $breakpoints: map.get($size, \"breakpoints\");\n  $responsive: map.get($size, \"responsive\");\n  $color: map.get($size, \"color\");\n\n  font-size: $font-size;\n  @if ($responsive) {\n    @include font-size-responsive($font-size, $responsive);\n  }\n  @if (not $only-font-size) {\n    font-weight: get-size-value($size, \"font-weight\");\n    font-family: get-size-value($size, \"font-family\");\n    line-height: get-size-converted-value($size, \"line-height\");\n    margin-top: get-size-converted-value($size, \"margin-top\");\n    margin-bottom: get-size-converted-value($size, \"margin-bottom\");\n    color: if($color, color.get($color), null);\n  }\n\n  // If they have breakpoints, process them\n  @if $breakpoints {\n    @each $name, $breakpoint in $breakpoints {\n      $direction: map.get($breakpoint, \"direction\");\n      @include breakpoint.from($name, $direction) {\n        @include size($breakpoint, null, $only-font-size);\n      }\n    }\n  }\n",
          "line": {
            "start": 282,
            "end": 318
          }
        }
      },
      {
        "description": "Print a typography size (font-size, line-height)\n",
        "context": {
          "type": "mixin",
          "name": "size",
          "code": "\n  $size: $name;\n  // Allow custom maps\n  @if (meta.type-of($name) == \"string\") {\n    $size: get-size($name);\n  }\n  @if ($changes) {\n    $size: map.merge($size, $changes);\n  }\n  $font-size: get-size-converted-value($size, \"font-size\");\n  $breakpoints: map.get($size, \"breakpoints\");\n  $responsive: map.get($size, \"responsive\");\n  $color: map.get($size, \"color\");\n\n  font-size: $font-size;\n  @if ($responsive) {\n    @include font-size-responsive($font-size, $responsive);\n  }\n  @if (not $only-font-size) {\n    font-weight: get-size-value($size, \"font-weight\");\n    font-family: get-size-value($size, \"font-family\");\n    line-height: get-size-converted-value($size, \"line-height\");\n    margin-top: get-size-converted-value($size, \"margin-top\");\n    margin-bottom: get-size-converted-value($size, \"margin-bottom\");\n    color: if($color, color.get($color), null);\n  }\n\n  // If they have breakpoints, process them\n  @if $breakpoints {\n    @each $name, $breakpoint in $breakpoints {\n      $direction: map.get($breakpoint, \"direction\");\n      @include breakpoint.from($name, $direction) {\n        @include size($breakpoint, null, $only-font-size);\n      }\n    }\n  }\n",
          "line": {
            "start": 282,
            "end": 318
          }
        }
      },
      {
        "description": "Print a typography size (font-size, line-height)\n",
        "context": {
          "type": "mixin",
          "name": "size",
          "code": "\n  $size: $name;\n  // Allow custom maps\n  @if (meta.type-of($name) == \"string\") {\n    $size: get-size($name);\n  }\n  @if ($changes) {\n    $size: map.merge($size, $changes);\n  }\n  $font-size: get-size-converted-value($size, \"font-size\");\n  $breakpoints: map.get($size, \"breakpoints\");\n  $responsive: map.get($size, \"responsive\");\n  $color: map.get($size, \"color\");\n\n  font-size: $font-size;\n  @if ($responsive) {\n    @include font-size-responsive($font-size, $responsive);\n  }\n  @if (not $only-font-size) {\n    font-weight: get-size-value($size, \"font-weight\");\n    font-family: get-size-value($size, \"font-family\");\n    line-height: get-size-converted-value($size, \"line-height\");\n    margin-top: get-size-converted-value($size, \"margin-top\");\n    margin-bottom: get-size-converted-value($size, \"margin-bottom\");\n    color: if($color, color.get($color), null);\n  }\n\n  // If they have breakpoints, process them\n  @if $breakpoints {\n    @each $name, $breakpoint in $breakpoints {\n      $direction: map.get($breakpoint, \"direction\");\n      @include breakpoint.from($name, $direction) {\n        @include size($breakpoint, null, $only-font-size);\n      }\n    }\n  }\n",
          "line": {
            "start": 282,
            "end": 318
          }
        }
      },
      {
        "description": "Print a typography size (font-size, line-height)\n",
        "context": {
          "type": "mixin",
          "name": "size",
          "code": "\n  $size: $name;\n  // Allow custom maps\n  @if (meta.type-of($name) == \"string\") {\n    $size: get-size($name);\n  }\n  @if ($changes) {\n    $size: map.merge($size, $changes);\n  }\n  $font-size: get-size-converted-value($size, \"font-size\");\n  $breakpoints: map.get($size, \"breakpoints\");\n  $responsive: map.get($size, \"responsive\");\n  $color: map.get($size, \"color\");\n\n  font-size: $font-size;\n  @if ($responsive) {\n    @include font-size-responsive($font-size, $responsive);\n  }\n  @if (not $only-font-size) {\n    font-weight: get-size-value($size, \"font-weight\");\n    font-family: get-size-value($size, \"font-family\");\n    line-height: get-size-converted-value($size, \"line-height\");\n    margin-top: get-size-converted-value($size, \"margin-top\");\n    margin-bottom: get-size-converted-value($size, \"margin-bottom\");\n    color: if($color, color.get($color), null);\n  }\n\n  // If they have breakpoints, process them\n  @if $breakpoints {\n    @each $name, $breakpoint in $breakpoints {\n      $direction: map.get($breakpoint, \"direction\");\n      @include breakpoint.from($name, $direction) {\n        @include size($breakpoint, null, $only-font-size);\n      }\n    }\n  }\n",
          "line": {
            "start": 282,
            "end": 318
          }
        }
      }
    ]
  },
  {
    "description": "Get a sizes property value that doesn't need conversion \n- Reason: Will map to default if user set's size prop to true\n",
    "commentRange": {
      "start": 253,
      "end": 256
    },
    "context": {
      "type": "function",
      "name": "get-size-value",
      "code": "\n  $value: map.get($size, $prop);\n  // Default\n  @if ($value == true) {\n    $value: get($prop);\n  }\n  @return $value;\n",
      "line": {
        "start": 258,
        "end": 265
      }
    },
    "parameter": [
      {
        "type": "Map",
        "name": "size",
        "description": "Size's map"
      },
      {
        "type": "String",
        "name": "props",
        "description": "The property to get"
      }
    ],
    "group": [
      "typography"
    ],
    "todo": [
      "Idea: Should the maps value be processes when using the set-sizes, set? Instead of recalculated each time get-size is or get is used."
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      }
    ],
    "file": {
      "path": "_typography.scss",
      "name": "_typography.scss"
    },
    "usedBy": [
      {
        "description": "Print a typography size (font-size, line-height)\n",
        "context": {
          "type": "mixin",
          "name": "size",
          "code": "\n  $size: $name;\n  // Allow custom maps\n  @if (meta.type-of($name) == \"string\") {\n    $size: get-size($name);\n  }\n  @if ($changes) {\n    $size: map.merge($size, $changes);\n  }\n  $font-size: get-size-converted-value($size, \"font-size\");\n  $breakpoints: map.get($size, \"breakpoints\");\n  $responsive: map.get($size, \"responsive\");\n  $color: map.get($size, \"color\");\n\n  font-size: $font-size;\n  @if ($responsive) {\n    @include font-size-responsive($font-size, $responsive);\n  }\n  @if (not $only-font-size) {\n    font-weight: get-size-value($size, \"font-weight\");\n    font-family: get-size-value($size, \"font-family\");\n    line-height: get-size-converted-value($size, \"line-height\");\n    margin-top: get-size-converted-value($size, \"margin-top\");\n    margin-bottom: get-size-converted-value($size, \"margin-bottom\");\n    color: if($color, color.get($color), null);\n  }\n\n  // If they have breakpoints, process them\n  @if $breakpoints {\n    @each $name, $breakpoint in $breakpoints {\n      $direction: map.get($breakpoint, \"direction\");\n      @include breakpoint.from($name, $direction) {\n        @include size($breakpoint, null, $only-font-size);\n      }\n    }\n  }\n",
          "line": {
            "start": 282,
            "end": 318
          }
        }
      },
      {
        "description": "Print a typography size (font-size, line-height)\n",
        "context": {
          "type": "mixin",
          "name": "size",
          "code": "\n  $size: $name;\n  // Allow custom maps\n  @if (meta.type-of($name) == \"string\") {\n    $size: get-size($name);\n  }\n  @if ($changes) {\n    $size: map.merge($size, $changes);\n  }\n  $font-size: get-size-converted-value($size, \"font-size\");\n  $breakpoints: map.get($size, \"breakpoints\");\n  $responsive: map.get($size, \"responsive\");\n  $color: map.get($size, \"color\");\n\n  font-size: $font-size;\n  @if ($responsive) {\n    @include font-size-responsive($font-size, $responsive);\n  }\n  @if (not $only-font-size) {\n    font-weight: get-size-value($size, \"font-weight\");\n    font-family: get-size-value($size, \"font-family\");\n    line-height: get-size-converted-value($size, \"line-height\");\n    margin-top: get-size-converted-value($size, \"margin-top\");\n    margin-bottom: get-size-converted-value($size, \"margin-bottom\");\n    color: if($color, color.get($color), null);\n  }\n\n  // If they have breakpoints, process them\n  @if $breakpoints {\n    @each $name, $breakpoint in $breakpoints {\n      $direction: map.get($breakpoint, \"direction\");\n      @include breakpoint.from($name, $direction) {\n        @include size($breakpoint, null, $only-font-size);\n      }\n    }\n  }\n",
          "line": {
            "start": 282,
            "end": 318
          }
        }
      }
    ]
  },
  {
    "description": "Print's the responsive type formula\n",
    "commentRange": {
      "start": 267,
      "end": 269
    },
    "context": {
      "type": "mixin",
      "name": "font-size-responsive",
      "code": "\n  @if (meta.type-of($amount) != \"number\") {\n    $amount: get(\"responsive-change\");\n  }\n  font-size: calc(#{ $font-size } + #{ $amount });\n",
      "line": {
        "start": 271,
        "end": 276
      }
    },
    "parameter": [
      {
        "type": "String",
        "name": "font-size",
        "description": "Name to retrieve from sizes map or a unique size map that follows the API"
      },
      {
        "type": "Map",
        "name": "changes",
        "description": "Modifications to be merged into size before using"
      }
    ],
    "group": [
      "typography"
    ],
    "todo": [
      "Idea: Should the maps value be processes when using the set-sizes, set? Instead of recalculated each time get-size is or get is used."
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "get"
      }
    ],
    "file": {
      "path": "_typography.scss",
      "name": "_typography.scss"
    },
    "usedBy": [
      {
        "description": "Print a typography size (font-size, line-height)\n",
        "context": {
          "type": "mixin",
          "name": "size",
          "code": "\n  $size: $name;\n  // Allow custom maps\n  @if (meta.type-of($name) == \"string\") {\n    $size: get-size($name);\n  }\n  @if ($changes) {\n    $size: map.merge($size, $changes);\n  }\n  $font-size: get-size-converted-value($size, \"font-size\");\n  $breakpoints: map.get($size, \"breakpoints\");\n  $responsive: map.get($size, \"responsive\");\n  $color: map.get($size, \"color\");\n\n  font-size: $font-size;\n  @if ($responsive) {\n    @include font-size-responsive($font-size, $responsive);\n  }\n  @if (not $only-font-size) {\n    font-weight: get-size-value($size, \"font-weight\");\n    font-family: get-size-value($size, \"font-family\");\n    line-height: get-size-converted-value($size, \"line-height\");\n    margin-top: get-size-converted-value($size, \"margin-top\");\n    margin-bottom: get-size-converted-value($size, \"margin-bottom\");\n    color: if($color, color.get($color), null);\n  }\n\n  // If they have breakpoints, process them\n  @if $breakpoints {\n    @each $name, $breakpoint in $breakpoints {\n      $direction: map.get($breakpoint, \"direction\");\n      @include breakpoint.from($name, $direction) {\n        @include size($breakpoint, null, $only-font-size);\n      }\n    }\n  }\n",
          "line": {
            "start": 282,
            "end": 318
          }
        }
      }
    ]
  },
  {
    "description": "Print a typography size (font-size, line-height)\n",
    "commentRange": {
      "start": 278,
      "end": 280
    },
    "context": {
      "type": "mixin",
      "name": "size",
      "code": "\n  $size: $name;\n  // Allow custom maps\n  @if (meta.type-of($name) == \"string\") {\n    $size: get-size($name);\n  }\n  @if ($changes) {\n    $size: map.merge($size, $changes);\n  }\n  $font-size: get-size-converted-value($size, \"font-size\");\n  $breakpoints: map.get($size, \"breakpoints\");\n  $responsive: map.get($size, \"responsive\");\n  $color: map.get($size, \"color\");\n\n  font-size: $font-size;\n  @if ($responsive) {\n    @include font-size-responsive($font-size, $responsive);\n  }\n  @if (not $only-font-size) {\n    font-weight: get-size-value($size, \"font-weight\");\n    font-family: get-size-value($size, \"font-family\");\n    line-height: get-size-converted-value($size, \"line-height\");\n    margin-top: get-size-converted-value($size, \"margin-top\");\n    margin-bottom: get-size-converted-value($size, \"margin-bottom\");\n    color: if($color, color.get($color), null);\n  }\n\n  // If they have breakpoints, process them\n  @if $breakpoints {\n    @each $name, $breakpoint in $breakpoints {\n      $direction: map.get($breakpoint, \"direction\");\n      @include breakpoint.from($name, $direction) {\n        @include size($breakpoint, null, $only-font-size);\n      }\n    }\n  }\n",
      "line": {
        "start": 282,
        "end": 318
      }
    },
    "parameter": [
      {
        "type": "String",
        "name": "nameOrMap",
        "description": "Name to retrieve from sizes map or a unique size map that follows the API"
      },
      {
        "type": "Map",
        "name": "changes",
        "description": "Modifications to be merged into size before using"
      }
    ],
    "group": [
      "typography"
    ],
    "todo": [
      "Idea: Should the maps value be processes when using the set-sizes, set? Instead of recalculated each time get-size is or get is used."
    ],
    "access": "public",
    "require": [
      {
        "type": "mixin",
        "name": "font-size-responsive"
      },
      {
        "type": "function",
        "name": "get-size"
      },
      {
        "type": "function",
        "name": "get-size-converted-value"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get-size-value"
      },
      {
        "type": "function",
        "name": "get-size-value"
      },
      {
        "type": "function",
        "name": "get-size-converted-value"
      },
      {
        "type": "function",
        "name": "get-size-converted-value"
      },
      {
        "type": "function",
        "name": "get-size-converted-value"
      },
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      }
    ],
    "file": {
      "path": "_typography.scss",
      "name": "_typography.scss"
    }
  },
  {
    "description": "Module Settings\n",
    "commentRange": {
      "start": 9,
      "end": 16
    },
    "context": {
      "type": "variable",
      "name": "config",
      "value": "(\n  \"small-x\" : 1rem * 0.5,\n  \"small\" : 1rem * 0.75,\n  \"default\" : 1rem,\n  \"large\" : 1rem * 2,\n  \"large-x\" : 1rem * 3,\n  \"large-xx\" : 1rem * 4\n)",
      "scope": "default",
      "line": {
        "start": 18,
        "end": 25
      }
    },
    "type": "Map",
    "property": [
      {
        "type": "Number",
        "name": "$config.small-x"
      },
      {
        "type": "Number",
        "name": "$config.small"
      },
      {
        "type": "Number",
        "name": "$config.default",
        "description": "Base unit of measurent"
      },
      {
        "type": "Number",
        "name": "$config.large"
      },
      {
        "type": "Number",
        "name": "$config.large-x"
      },
      {
        "type": "Number",
        "name": "$config.large-xx"
      }
    ],
    "group": [
      "units"
    ],
    "access": "public",
    "file": {
      "path": "_units.scss",
      "name": "_units.scss"
    }
  },
  {
    "description": "Update the units preset map\n",
    "commentRange": {
      "start": 27,
      "end": 32
    },
    "context": {
      "type": "mixin",
      "name": "set",
      "code": "\n  $config: map.merge($config, $changes) !global;\n",
      "line": {
        "start": 34,
        "end": 36
      }
    },
    "parameter": [
      {
        "type": "Map",
        "name": "changes",
        "description": "A map to merge into the color palette"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "@include units.set((\n  \"margin\" : 2.5em\n));",
        "description": "Setting the error and type color"
      }
    ],
    "group": [
      "units"
    ],
    "access": "public",
    "require": [
      {
        "type": "variable",
        "name": "config"
      },
      {
        "type": "variable",
        "name": "config"
      }
    ],
    "file": {
      "path": "_units.scss",
      "name": "_units.scss"
    }
  },
  {
    "description": "Get a unit by name (preset) or number (multiplier of base)\n",
    "commentRange": {
      "start": 38,
      "end": 40
    },
    "context": {
      "type": "function",
      "name": "get",
      "code": "\n  @if (meta.type-of($value) == string) {\n    @return utils.require-map-get($config, $value, 'unit [config]');\n  }\n  @return get(\"default\") * $value;\n",
      "line": {
        "start": 42,
        "end": 47
      }
    },
    "parameter": [
      {
        "type": "Number|String",
        "name": "value",
        "description": "if a number is passed it is used as a multiplier of the base, if a string is passed it is used to lookup a value from unit presets @see $config"
      }
    ],
    "return": {
      "type": "Number"
    },
    "group": [
      "units"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "require-map-get"
      },
      {
        "type": "variable",
        "name": "config"
      }
    ],
    "file": {
      "path": "_units.scss",
      "name": "_units.scss"
    }
  },
  {
    "description": "Strips the unit from the number\n",
    "commentRange": {
      "start": 7,
      "end": 8
    },
    "context": {
      "type": "function",
      "name": "strip-unit",
      "code": "\n  @return math.div($value, ($value * 0 + 1));\n",
      "line": {
        "start": 10,
        "end": 12
      }
    },
    "link": [
      {
        "url": "https://stackoverflow.com/questions/12328259/how-do-you-strip-the-unit-from-any-number-in-sass/12335841#12335841",
        "caption": "Orginal source (Miriam Suzanne)"
      }
    ],
    "group": [
      "utility"
    ],
    "access": "public",
    "require": [],
    "file": {
      "path": "_utility.scss",
      "name": "_utility.scss"
    },
    "usedBy": [
      {
        "description": "Forces conversion to unitless line-height\n",
        "context": {
          "type": "function",
          "name": "unitless-line-height",
          "code": "\n  // Font size is rems, line-height is unkown\n  @if (math.is-unitless($line-height)) {\n    @return $line-height;\n  }\n  $unit: math.unit($line-height);\n  @if ($unit == \"em\") {\n    @return utility.strip-unit($line-height);\n  } @else if ($unit == \"pixels\" or $unit == \"rem\") {\n    $calc: math.div(rem($line-height), rem($font-size));\n    @return utility.strip-unit($calc);\n  } @else {\n    @error \"ULU: Unable to convert to unitless line-height for: #{ $line-height }\";\n  }\n",
          "line": {
            "start": 205,
            "end": 219
          }
        }
      },
      {
        "description": "Forces conversion to unitless line-height\n",
        "context": {
          "type": "function",
          "name": "unitless-line-height",
          "code": "\n  // Font size is rems, line-height is unkown\n  @if (math.is-unitless($line-height)) {\n    @return $line-height;\n  }\n  $unit: math.unit($line-height);\n  @if ($unit == \"em\") {\n    @return utility.strip-unit($line-height);\n  } @else if ($unit == \"pixels\" or $unit == \"rem\") {\n    $calc: math.div(rem($line-height), rem($font-size));\n    @return utility.strip-unit($calc);\n  } @else {\n    @error \"ULU: Unable to convert to unitless line-height for: #{ $line-height }\";\n  }\n",
          "line": {
            "start": 205,
            "end": 219
          }
        }
      }
    ]
  },
  {
    "description": "Test\n",
    "commentRange": {
      "start": 10,
      "end": 11
    },
    "context": {
      "type": "variable",
      "name": "test",
      "value": "true",
      "scope": "default",
      "line": {
        "start": 12,
        "end": 12
      }
    },
    "type": "Boolean",
    "group": [
      "utils"
    ],
    "access": "public",
    "file": {
      "path": "_utils.scss",
      "name": "_utils.scss"
    }
  },
  {
    "description": "Module Settings\n",
    "commentRange": {
      "start": 14,
      "end": 17
    },
    "context": {
      "type": "variable",
      "name": "config",
      "value": "(\n  \"debug-maps\": true,\n  \"file-header-comments\": true\n)",
      "scope": "default",
      "line": {
        "start": 19,
        "end": 22
      }
    },
    "type": "Map",
    "property": [
      {
        "type": "Boolean",
        "name": "$config.debug-maps",
        "description": "Debugs include map print outs"
      },
      {
        "type": "Boolean",
        "name": "$config.file-header-comments",
        "description": "Remove comment headers if you'd like"
      }
    ],
    "group": [
      "utils"
    ],
    "access": "public",
    "file": {
      "path": "_utils.scss",
      "name": "_utils.scss"
    }
  },
  {
    "description": "Change modules $config\n",
    "commentRange": {
      "start": 24,
      "end": 27
    },
    "context": {
      "type": "mixin",
      "name": "set",
      "code": "\n  $config: map.merge($config, $changes) !global;\n",
      "line": {
        "start": 28,
        "end": 30
      }
    },
    "parameter": [
      {
        "type": "Map",
        "name": "changes",
        "description": "Map of changes"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "@include module-name.set(( \"property\" : value ));",
        "description": "General example, replace module-name with module's name"
      }
    ],
    "group": [
      "utils"
    ],
    "access": "public",
    "require": [
      {
        "type": "variable",
        "name": "config"
      },
      {
        "type": "variable",
        "name": "config"
      }
    ],
    "file": {
      "path": "_utils.scss",
      "name": "_utils.scss"
    }
  },
  {
    "description": "Get a config option\n",
    "commentRange": {
      "start": 32,
      "end": 35
    },
    "context": {
      "type": "function",
      "name": "get",
      "code": "\n  @return require-map-get($config, $name, 'utils');\n",
      "line": {
        "start": 37,
        "end": 39
      }
    },
    "parameter": [
      {
        "type": "Map",
        "name": "name",
        "description": "Name of property"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "@include module-name.get(\"property\");",
        "description": "General example, replace module-name with module's name"
      }
    ],
    "group": [
      "utils"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "require-map-get"
      },
      {
        "type": "variable",
        "name": "config"
      }
    ],
    "file": {
      "path": "_utils.scss",
      "name": "_utils.scss"
    }
  },
  {
    "description": "Get a required value from a map, throw an error if not found\n- Remeber that that maps cannot intentionally use null (use false instead, if trying to avoid output if unconfigured)\n",
    "commentRange": {
      "start": 41,
      "end": 46
    },
    "context": {
      "type": "function",
      "name": "require-map-get",
      "code": "\n  $value: map.get($map, $key);\n  @if ($value != null) {\n    @return $value;\n  } @else {\n    @if (get(\"debug-maps\")) {\n      @debug $map;\n    }\n    @error 'ULU: Unable to find  \"#{ $key }\" in #{ $context } map.';\n  }\n",
      "line": {
        "start": 48,
        "end": 58
      }
    },
    "parameter": [
      {
        "type": "Map",
        "name": "map",
        "description": "The map to get the value from"
      },
      {
        "type": "String",
        "name": "key",
        "description": "The key in the map to get value from"
      },
      {
        "type": "String",
        "name": "context",
        "description": "The context of using this function for debugging help"
      }
    ],
    "return": {
      "type": "*",
      "description": "The value from the map"
    },
    "group": [
      "utils"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "get"
      },
      {
        "type": "function",
        "name": "get"
      }
    ],
    "throw": [
      "ULU: Unable to find  "
    ],
    "file": {
      "path": "_utils.scss",
      "name": "_utils.scss"
    },
    "usedBy": [
      {
        "description": "Get a config option\n",
        "context": {
          "type": "function",
          "name": "get",
          "code": "\n  @return utils.require-map-get($config, $name, \"element [config]\");\n",
          "line": {
            "start": 36,
            "end": 38
          }
        }
      },
      {
        "description": "Get a config option\n",
        "context": {
          "type": "function",
          "name": "get",
          "code": "\n  @return utils.require-map-get($config, $name, 'breakpoint [config]');\n",
          "line": {
            "start": 34,
            "end": 36
          }
        }
      },
      {
        "description": "Create a media query that matches the min-width for a given size\n",
        "context": {
          "type": "mixin",
          "name": "min",
          "code": "\n  // Adding the small fraction to prevent overlap\n  $min: utils.require-map-get($sizes, $size, \"breakpoints\"); \n  @media screen and (min-width: $min) {\n    @content;\n  }\n",
          "line": {
            "start": 72,
            "end": 78
          }
        }
      },
      {
        "description": "Create a media query that matches the max-width for a given size\n",
        "context": {
          "type": "mixin",
          "name": "max",
          "code": "\n  // Adding the small fraction to prevent overlap\n  $max: utils.require-map-get($sizes, $size) - get(\"gap\"); \n  @media screen and (max-width: $max) {\n    @content;\n  }\n",
          "line": {
            "start": 87,
            "end": 93
          }
        }
      },
      {
        "description": "Create a media query that matches the min-width and max-width sizes\n",
        "context": {
          "type": "mixin",
          "name": "min-max",
          "code": "\n  // Adding the small fraction to prevent overlap\n  $min: utils.require-map-get($sizes, $size-min, \"breakpoints\"); \n  $max: utils.require-map-get($sizes, $size-max, \"breakpoints\") - get(\"gap\"); \n  @media screen and (min-width: $min) and (max-width: $max) {\n    @content;\n  }\n",
          "line": {
            "start": 102,
            "end": 109
          }
        }
      },
      {
        "description": "Create a media query that matches the min-width and max-width sizes\n",
        "context": {
          "type": "mixin",
          "name": "min-max",
          "code": "\n  // Adding the small fraction to prevent overlap\n  $min: utils.require-map-get($sizes, $size-min, \"breakpoints\"); \n  $max: utils.require-map-get($sizes, $size-max, \"breakpoints\") - get(\"gap\"); \n  @media screen and (min-width: $min) and (max-width: $max) {\n    @content;\n  }\n",
          "line": {
            "start": 102,
            "end": 109
          }
        }
      },
      {
        "description": "Get a config option\n",
        "context": {
          "type": "function",
          "name": "get",
          "code": "\n  $value: utils.require-map-get($config, $name, \"button [config]\");\n  @return utils.function-fallback($name, $value, $-fallbacks);\n",
          "line": {
            "start": 105,
            "end": 109
          }
        }
      },
      {
        "description": "Get a config option\n",
        "context": {
          "type": "function",
          "name": "get",
          "code": "\n  @return utils.require-map-get($config, $name, \"calculate [config]\");\n",
          "line": {
            "start": 28,
            "end": 30
          }
        }
      },
      {
        "description": "Get a color from the palette by name\n",
        "context": {
          "type": "function",
          "name": "get",
          "code": "\n  // Allow non lookup if the value is already a color (helps with code flow)\n  @if (meta.type-of($name) == \"color\") {\n    @return $name;\n  }\n  @return utils.require-map-get($palette, $name, 'color');\n",
          "line": {
            "start": 72,
            "end": 78
          }
        }
      },
      {
        "description": "Get a context by name\n",
        "context": {
          "type": "function",
          "name": "get-context",
          "code": "\n  @return utils.require-map-get($contexts, $name, 'context');\n",
          "line": {
            "start": 112,
            "end": 114
          }
        }
      },
      {
        "description": "Get a config option\n",
        "context": {
          "type": "function",
          "name": "get",
          "code": "\n  @return utils.require-map-get($config, $name, \"rule [config]\");\n",
          "line": {
            "start": 35,
            "end": 37
          }
        }
      },
      {
        "description": "Get a config option\n",
        "context": {
          "type": "function",
          "name": "get",
          "code": "\n  @return utils.require-map-get($config, $name, \"element [config]\");\n",
          "line": {
            "start": 95,
            "end": 97
          }
        }
      },
      {
        "description": "Get a rule style\n",
        "context": {
          "type": "function",
          "name": "get-rule-style",
          "code": "\n  @return utils.require-map-get($rule-styles, $name, \"element [rule style]\");\n",
          "line": {
            "start": 116,
            "end": 118
          }
        }
      },
      {
        "description": "Sets rule margin\n",
        "context": {
          "type": "function",
          "name": "get-rule-margin",
          "code": "\n  @return utils.require-map-get($rule-margins, $name, \"element [rule style]\");\n",
          "line": {
            "start": 123,
            "end": 125
          }
        }
      },
      {
        "description": "Get a config option\n",
        "context": {
          "type": "function",
          "name": "get",
          "code": "\n  @return utils.require-map-get($config, $name, \"grid [config]\");\n",
          "line": {
            "start": 69,
            "end": 71
          }
        }
      },
      {
        "description": "Creates grid css (variation of original data-grid)\n",
        "context": {
          "type": "mixin",
          "name": "create",
          "code": "\n  $attribute-item: \"#{ $attribute }-item\";\n  $select-grid: '[#{ $attribute }*=\"columns: #{ $columns }\"]';\n  $select-item: '[#{ $attribute-item }]';\n  $select-rule-col: \":before\";\n  $select-rule-row: \":after\";\n  // These through off syntax highlighting when inside interpolation\n  $position-class-column-first: get(\"position-class-column-first\");\n  $position-class-column-last: get(\"position-class-column-last\");\n  $position-class-row-first: get(\"position-class-row-first\");\n  $position-class-row-last: get(\"position-class-row-last\");\n\n  #{ $select-grid } {\n    @include layout.clearfix(); // For legacy browsers\n\n    // Ensure empty elements still take up space in layout\n    > #{ $select-item } {\n      min-height: 1px; \n      width: 100%;\n    }\n    // This is for value of true and also covers all options below\n    &#{'[#{ $attribute }*=\"gutters-row:\"]'} { \n      > #{ $select-item } {\n        padding-top:  $gutter;\n        padding-bottom: $gutter;\n      }\n    }\n    &#{'[#{ $attribute }*=\"gutters-row: top\"]'} { \n      > #{ $select-item } {\n        &.#{ $position-class-row-last } {\n          padding-bottom: 0;\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"gutters-row: bottom\"]'} { \n      > #{ $select-item } {\n        &.#{ $position-class-row-first } {\n          padding-top: 0;\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"gutters-row: fit\"]'} { \n      margin-top: -$gutter;\n      margin-bottom: -$gutter;\n    }\n    // Rules: Row\n    &#{'[#{ $attribute }*=\"rules-row:\"]'} { \n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          position: absolute;\n          left: 0;\n          right: 0;\n          height: $rule-size;\n          background: color.get($rule-color);\n        }\n      }\n    }\n    // Rules: Applies to both column and row\n    &#{'[#{ $attribute }*=\"rules\"]'} { \n      > #{ $select-item } {\n        position: relative;\n      }\n    }\n    // Rules: Column\n    &#{'[#{ $attribute }*=\"rules-column:\"]'} { \n      > #{ $select-item } {\n        &#{ $select-rule-col } {\n          position: absolute;\n          top: 0;\n          bottom: 0;\n          width: $rule-size;\n          background: color.get($rule-color);\n        }\n      }\n    }\n    // Options for the left or right\n    @include -create-rule-col-position(\n      $position: \"left\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-col: $select-rule-col, \n      $end-class: $position-class-column-first\n    );\n    @include -create-rule-col-position(\n      $position: \"right\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-col: $select-rule-col, \n      $end-class: $position-class-column-last\n    );\n    // Override first or last column removing the rule using matching specificity\n    &#{'[#{ $attribute }*=\"rules-column:\"][#{ $attribute }*=\"rules-column-ends: true\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-col } {\n          content: '';\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"rules-column-align: gutter\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-col } {\n          top: $gutter;\n          bottom: $gutter;\n        }\n      }\n    }\n    // Options for the left or right\n    @include -create-rule-row-position(\n      $position: \"top\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-row: $select-rule-row, \n      $between: false\n    );\n    @include -create-rule-row-position(\n      $position: \"bottom\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-row: $select-rule-row, \n      $between: false\n    );\n\n    &#{'[#{ $attribute }*=\"rules-row: between\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          bottom: math.floor(math.div($rule-size, 2)) * -1;\n        }\n        // For removing the rule per row (via equal heights for now)\n        &.#{ $position-class-row-last } {\n          &#{ $select-rule-row } {\n            content: none;\n          }\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"rules-row-align: gutter\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          left: $gutter;\n          right: $gutter;\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"rules-row-persist: true\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          content: '';\n        }\n      }\n    }\n  }\n\n  @include breakpoint.min($breakpoint) {\n    // Select the attribute with matching column count\n    #{ $select-grid } {\n      // Defaults for grid an item\n      display: flex;\n      flex-flow: row wrap;\n      align-items: stretch;\n      margin-left: -$gutter;\n      margin-right: -$gutter;\n\n      > #{ $select-item } {\n        float: left; // Fallback\n        padding-left: $gutter;\n        padding-right: $gutter;\n      }\n      // Alignment options\n      &#{'[#{ $attribute }*=\"align: center\"]'} { \n        align-items: center;  \n      }\n      &#{'[#{ $attribute }*=\"align: end\"]'} { \n        align-items: flex-end;\n      }\n      &#{'[#{ $attribute }*=\"align: start\"]'} { \n        align-items: flex-start; \n      }\n      // Alignment of the children when using stretch\n      // - There is no stetch-start (that's defualt);\n      // - There is no stetch-middle (that's covered by stretch-);\n      &#{'[#{ $attribute }*=\"align: stretch-\"]'} { \n        // set the child to display as a single flex item\n        > #{ $select-item } {\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n        }\n      }\n      &#{'[#{ $attribute }*=\"align: stretch-end\"]'} { \n        > #{ $select-item } {\n          justify-content: flex-end;\n        }\n      }\n      // Other options\n      &#{'[#{ $attribute }*=\"gutters: false\"]'} { \n        margin-left: 0;\n        margin-right: 0;\n        > #{ $select-item } {\n          padding-left: 0;\n          padding-right: 0;\n        }\n      }\n      // Activate Rules\n      &#{'[#{ $attribute }*=\"rules-column:\"]'} {\n        > #{ $select-item } {\n          &#{ $select-rule-col } {\n            content: '';\n          }\n        }\n      }\n      &#{'[#{ $attribute }*=\"rules-row:\"]'} {\n        > #{ $select-item } {\n          &#{ $select-rule-row } {\n            content: '';\n          }\n        }\n      }\n      // Generated props for item\n      @include -create-column-widths(\n        $columns: $columns,\n        $attribute-item: $attribute-item,\n        $suffix: ''\n      );\n      @include -create-column-offsets(\n        $columns: $columns,\n        $attribute-item: $attribute-item,\n        $suffix: ''\n      );\n    }\n  }\n\n  @if $extra-breakpoints {\n    @each $name, $options in $extra-breakpoints {\n      $g: map.get($options, \"gutter\");\n      @include -create-extra-breakpoint(\n        $name: $name, \n        $breakpoint: map.get($options, \"breakpoint\"),\n        $gutter: if($g, $g, $gutter),\n        $columns: $columns,\n        $attribute-item: $attribute-item,\n        $select-grid: $select-grid,\n        $select-item: $select-item\n      );\n    }\n  }\n  @if $extra-rule-styles {\n    @each $name, $options in $extra-rule-styles {\n      $color: utils.require-map-get($options, \"color\", \"grid [extra rule style]\");\n      $size: utils.require-map-get($options, \"size\", \"grid [extra rule style]\");\n      #{ $select-grid } {\n\n        &#{'[#{_attr}*=\"rules-column-style: #{ $name }\"]'} {\n          > #{ $select-item } {\n            &#{ $select-rule-col } {\n              background-color: color.get($color);\n              width: $size;\n            }\n          }\n          @include -create-rule-col-position(\n            $position: \"left\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-col: $select-rule-col, \n            $end-class: false\n          );\n          @include -create-rule-col-position(\n            $position: \"right\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-col: $select-rule-col, \n            $end-class: false\n          );\n        }\n        &#{'[#{_attr}*=\"rules-row-style: #{ $name }\"]'} {\n          > #{ $select-item } {\n            &#{ $select-rule-row } {\n              background-color: $color;\n              height: $size;\n            }\n          }\n          @include -create-rule-row-position(\n            $position: \"top\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-row: $select-rule-row, \n            $between: false\n          );\n          @include -create-rule-row-position(\n            $position: \"bottom\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-row: $select-rule-row, \n            $between: false\n          );\n          @include -create-rule-row-position(\n            $position: \"bottom\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-row: $select-rule-row, \n            $between: true\n          );\n        }\n      }\n    }\n  }\n",
          "line": {
            "start": 83,
            "end": 407
          }
        }
      },
      {
        "description": "Creates grid css (variation of original data-grid)\n",
        "context": {
          "type": "mixin",
          "name": "create",
          "code": "\n  $attribute-item: \"#{ $attribute }-item\";\n  $select-grid: '[#{ $attribute }*=\"columns: #{ $columns }\"]';\n  $select-item: '[#{ $attribute-item }]';\n  $select-rule-col: \":before\";\n  $select-rule-row: \":after\";\n  // These through off syntax highlighting when inside interpolation\n  $position-class-column-first: get(\"position-class-column-first\");\n  $position-class-column-last: get(\"position-class-column-last\");\n  $position-class-row-first: get(\"position-class-row-first\");\n  $position-class-row-last: get(\"position-class-row-last\");\n\n  #{ $select-grid } {\n    @include layout.clearfix(); // For legacy browsers\n\n    // Ensure empty elements still take up space in layout\n    > #{ $select-item } {\n      min-height: 1px; \n      width: 100%;\n    }\n    // This is for value of true and also covers all options below\n    &#{'[#{ $attribute }*=\"gutters-row:\"]'} { \n      > #{ $select-item } {\n        padding-top:  $gutter;\n        padding-bottom: $gutter;\n      }\n    }\n    &#{'[#{ $attribute }*=\"gutters-row: top\"]'} { \n      > #{ $select-item } {\n        &.#{ $position-class-row-last } {\n          padding-bottom: 0;\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"gutters-row: bottom\"]'} { \n      > #{ $select-item } {\n        &.#{ $position-class-row-first } {\n          padding-top: 0;\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"gutters-row: fit\"]'} { \n      margin-top: -$gutter;\n      margin-bottom: -$gutter;\n    }\n    // Rules: Row\n    &#{'[#{ $attribute }*=\"rules-row:\"]'} { \n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          position: absolute;\n          left: 0;\n          right: 0;\n          height: $rule-size;\n          background: color.get($rule-color);\n        }\n      }\n    }\n    // Rules: Applies to both column and row\n    &#{'[#{ $attribute }*=\"rules\"]'} { \n      > #{ $select-item } {\n        position: relative;\n      }\n    }\n    // Rules: Column\n    &#{'[#{ $attribute }*=\"rules-column:\"]'} { \n      > #{ $select-item } {\n        &#{ $select-rule-col } {\n          position: absolute;\n          top: 0;\n          bottom: 0;\n          width: $rule-size;\n          background: color.get($rule-color);\n        }\n      }\n    }\n    // Options for the left or right\n    @include -create-rule-col-position(\n      $position: \"left\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-col: $select-rule-col, \n      $end-class: $position-class-column-first\n    );\n    @include -create-rule-col-position(\n      $position: \"right\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-col: $select-rule-col, \n      $end-class: $position-class-column-last\n    );\n    // Override first or last column removing the rule using matching specificity\n    &#{'[#{ $attribute }*=\"rules-column:\"][#{ $attribute }*=\"rules-column-ends: true\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-col } {\n          content: '';\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"rules-column-align: gutter\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-col } {\n          top: $gutter;\n          bottom: $gutter;\n        }\n      }\n    }\n    // Options for the left or right\n    @include -create-rule-row-position(\n      $position: \"top\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-row: $select-rule-row, \n      $between: false\n    );\n    @include -create-rule-row-position(\n      $position: \"bottom\", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-row: $select-rule-row, \n      $between: false\n    );\n\n    &#{'[#{ $attribute }*=\"rules-row: between\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          bottom: math.floor(math.div($rule-size, 2)) * -1;\n        }\n        // For removing the rule per row (via equal heights for now)\n        &.#{ $position-class-row-last } {\n          &#{ $select-rule-row } {\n            content: none;\n          }\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"rules-row-align: gutter\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          left: $gutter;\n          right: $gutter;\n        }\n      }\n    }\n    &#{'[#{ $attribute }*=\"rules-row-persist: true\"]'} {\n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          content: '';\n        }\n      }\n    }\n  }\n\n  @include breakpoint.min($breakpoint) {\n    // Select the attribute with matching column count\n    #{ $select-grid } {\n      // Defaults for grid an item\n      display: flex;\n      flex-flow: row wrap;\n      align-items: stretch;\n      margin-left: -$gutter;\n      margin-right: -$gutter;\n\n      > #{ $select-item } {\n        float: left; // Fallback\n        padding-left: $gutter;\n        padding-right: $gutter;\n      }\n      // Alignment options\n      &#{'[#{ $attribute }*=\"align: center\"]'} { \n        align-items: center;  \n      }\n      &#{'[#{ $attribute }*=\"align: end\"]'} { \n        align-items: flex-end;\n      }\n      &#{'[#{ $attribute }*=\"align: start\"]'} { \n        align-items: flex-start; \n      }\n      // Alignment of the children when using stretch\n      // - There is no stetch-start (that's defualt);\n      // - There is no stetch-middle (that's covered by stretch-);\n      &#{'[#{ $attribute }*=\"align: stretch-\"]'} { \n        // set the child to display as a single flex item\n        > #{ $select-item } {\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n        }\n      }\n      &#{'[#{ $attribute }*=\"align: stretch-end\"]'} { \n        > #{ $select-item } {\n          justify-content: flex-end;\n        }\n      }\n      // Other options\n      &#{'[#{ $attribute }*=\"gutters: false\"]'} { \n        margin-left: 0;\n        margin-right: 0;\n        > #{ $select-item } {\n          padding-left: 0;\n          padding-right: 0;\n        }\n      }\n      // Activate Rules\n      &#{'[#{ $attribute }*=\"rules-column:\"]'} {\n        > #{ $select-item } {\n          &#{ $select-rule-col } {\n            content: '';\n          }\n        }\n      }\n      &#{'[#{ $attribute }*=\"rules-row:\"]'} {\n        > #{ $select-item } {\n          &#{ $select-rule-row } {\n            content: '';\n          }\n        }\n      }\n      // Generated props for item\n      @include -create-column-widths(\n        $columns: $columns,\n        $attribute-item: $attribute-item,\n        $suffix: ''\n      );\n      @include -create-column-offsets(\n        $columns: $columns,\n        $attribute-item: $attribute-item,\n        $suffix: ''\n      );\n    }\n  }\n\n  @if $extra-breakpoints {\n    @each $name, $options in $extra-breakpoints {\n      $g: map.get($options, \"gutter\");\n      @include -create-extra-breakpoint(\n        $name: $name, \n        $breakpoint: map.get($options, \"breakpoint\"),\n        $gutter: if($g, $g, $gutter),\n        $columns: $columns,\n        $attribute-item: $attribute-item,\n        $select-grid: $select-grid,\n        $select-item: $select-item\n      );\n    }\n  }\n  @if $extra-rule-styles {\n    @each $name, $options in $extra-rule-styles {\n      $color: utils.require-map-get($options, \"color\", \"grid [extra rule style]\");\n      $size: utils.require-map-get($options, \"size\", \"grid [extra rule style]\");\n      #{ $select-grid } {\n\n        &#{'[#{_attr}*=\"rules-column-style: #{ $name }\"]'} {\n          > #{ $select-item } {\n            &#{ $select-rule-col } {\n              background-color: color.get($color);\n              width: $size;\n            }\n          }\n          @include -create-rule-col-position(\n            $position: \"left\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-col: $select-rule-col, \n            $end-class: false\n          );\n          @include -create-rule-col-position(\n            $position: \"right\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-col: $select-rule-col, \n            $end-class: false\n          );\n        }\n        &#{'[#{_attr}*=\"rules-row-style: #{ $name }\"]'} {\n          > #{ $select-item } {\n            &#{ $select-rule-row } {\n              background-color: $color;\n              height: $size;\n            }\n          }\n          @include -create-rule-row-position(\n            $position: \"top\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-row: $select-rule-row, \n            $between: false\n          );\n          @include -create-rule-row-position(\n            $position: \"bottom\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-row: $select-rule-row, \n            $between: false\n          );\n          @include -create-rule-row-position(\n            $position: \"bottom\", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-row: $select-rule-row, \n            $between: true\n          );\n        }\n      }\n    }\n  }\n",
          "line": {
            "start": 83,
            "end": 407
          }
        }
      },
      {
        "description": "Get a config option\n",
        "context": {
          "type": "function",
          "name": "get",
          "code": "\n  @return utils.require-map-get($config, $name, \"units [config]\");\n",
          "line": {
            "start": 32,
            "end": 34
          }
        }
      },
      {
        "description": "Get a config option\n",
        "context": {
          "type": "function",
          "name": "get",
          "code": "\n  @return utils.require-map-get($config, $name, \"layout [config]\");\n",
          "line": {
            "start": 39,
            "end": 41
          }
        }
      },
      {
        "description": "Get an aliase's path\n",
        "context": {
          "type": "function",
          "name": "get-alias",
          "code": "\n  @return utils.require-map-get($aliases, $name, '[path alias]');\n",
          "line": {
            "start": 28,
            "end": 30
          }
        }
      },
      {
        "description": "Get a config option\n",
        "context": {
          "type": "function",
          "name": "get",
          "code": "\n  @return utils.require-map-get($config, $name, \"selector [config]\");\n",
          "line": {
            "start": 34,
            "end": 36
          }
        }
      },
      {
        "description": "Get a config option\n",
        "context": {
          "type": "function",
          "name": "get",
          "code": "\n  @return utils.require-map-get($config, $name, 'typography [config]');\n",
          "line": {
            "start": 67,
            "end": 69
          }
        }
      },
      {
        "description": "Get a size's map\n",
        "context": {
          "type": "function",
          "name": "get-size",
          "code": "\n  @return utils.require-map-get($sizes, $name, 'typography [size]');\n",
          "line": {
            "start": 187,
            "end": 189
          }
        }
      },
      {
        "description": "Get a unit by name (preset) or number (multiplier of base)\n",
        "context": {
          "type": "function",
          "name": "get",
          "code": "\n  @if (meta.type-of($value) == string) {\n    @return utils.require-map-get($config, $value, 'unit [config]');\n  }\n  @return get(\"default\") * $value;\n",
          "line": {
            "start": 42,
            "end": 47
          }
        }
      },
      {
        "description": "Get a config option\n",
        "context": {
          "type": "function",
          "name": "get",
          "code": "\n  @return require-map-get($config, $name, 'utils');\n",
          "line": {
            "start": 37,
            "end": 39
          }
        }
      }
    ]
  },
  {
    "description": "Ensure a value is present in the list, throw an error if not found\n",
    "commentRange": {
      "start": 60,
      "end": 63
    },
    "context": {
      "type": "mixin",
      "name": "require-list-has",
      "code": "\n  $index: list.index($list, $value) != null;\n  @if ($index == null) {\n    @error 'ULU: Unable to find item \"#{ $value }\" in #{ $context } list.';\n  }\n",
      "line": {
        "start": 65,
        "end": 70
      }
    },
    "parameter": [
      {
        "type": "List",
        "name": "list",
        "description": "The map to get the value from"
      },
      {
        "type": "String",
        "name": "value",
        "description": "The value to search for in the list"
      },
      {
        "type": "String",
        "name": "context",
        "description": "The context of using this function for debugging help"
      }
    ],
    "group": [
      "utils"
    ],
    "access": "public",
    "require": [],
    "throw": [
      "ULU: Unable to find item "
    ],
    "file": {
      "path": "_utils.scss",
      "name": "_utils.scss"
    },
    "usedBy": [
      {
        "description": "Require that the list only is only made up of allowed items\n",
        "context": {
          "type": "mixin",
          "name": "require-list-contains",
          "code": "\n  @each $item in $list {\n    @include require-list-has($allowed, $item, $context);\n  }\n",
          "line": {
            "start": 76,
            "end": 80
          }
        }
      }
    ]
  },
  {
    "description": "Require that the list only is only made up of allowed items\n",
    "commentRange": {
      "start": 72,
      "end": 74
    },
    "context": {
      "type": "mixin",
      "name": "require-list-contains",
      "code": "\n  @each $item in $list {\n    @include require-list-has($allowed, $item, $context);\n  }\n",
      "line": {
        "start": 76,
        "end": 80
      }
    },
    "parameter": [
      {
        "type": "List",
        "name": "allowed",
        "description": "The list of allowed items"
      },
      {
        "type": "String",
        "name": "list",
        "description": "The list to test allowed against"
      }
    ],
    "group": [
      "utils"
    ],
    "access": "public",
    "require": [
      {
        "type": "mixin",
        "name": "require-list-has"
      }
    ],
    "file": {
      "path": "_utils.scss",
      "name": "_utils.scss"
    }
  },
  {
    "description": "Returns true if we should include something (map of booleans)\n",
    "commentRange": {
      "start": 82,
      "end": 84
    },
    "context": {
      "type": "function",
      "name": "included",
      "code": "\n  $value: map.get($includes, $name);\n  @return $value == true;\n",
      "line": {
        "start": 86,
        "end": 89
      }
    },
    "parameter": [
      {
        "type": "String",
        "name": "name",
        "description": "Name of item to see if it's included"
      },
      {
        "type": "Map",
        "name": "includes",
        "description": "Map of includes"
      }
    ],
    "group": [
      "utils"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "get"
      }
    ],
    "file": {
      "path": "_utils.scss",
      "name": "_utils.scss"
    }
  },
  {
    "description": "Returns true if we should include something (used for output checking)\n",
    "commentRange": {
      "start": 91,
      "end": 93
    },
    "context": {
      "type": "mixin",
      "name": "file-header",
      "code": "\n  @if (\"file-header-comments\") {\n/* \n=============================================================================\n#{ $context }:#{ $name }\n============================================================================= \n*/\n  }\n",
      "line": {
        "start": 95,
        "end": 103
      }
    },
    "parameter": [
      {
        "type": "List",
        "name": "context",
        "description": "The root area of the framework this file comes from"
      },
      {
        "type": "List",
        "name": "name",
        "description": "The name of the specific area/file (optional)"
      }
    ],
    "group": [
      "utils"
    ],
    "access": "public",
    "require": [],
    "file": {
      "path": "_utils.scss",
      "name": "_utils.scss"
    }
  },
  {
    "description": "",
    "commentRange": {
      "start": 106,
      "end": 108
    },
    "context": {
      "type": "function",
      "name": "if-type",
      "code": "\n  @if meta.type-of($value) == $type {\n    @return $value;\n  } @else {\n    @return $fallback;\n  }\n",
      "line": {
        "start": 110,
        "end": 116
      }
    },
    "parameter": [
      {
        "type": "String",
        "name": "type",
        "description": "type of value it should be"
      },
      {
        "type": "String",
        "name": "value",
        "description": "the value to provide if it is that type"
      },
      {
        "type": "String",
        "name": "fallback",
        "description": "the fallback value"
      }
    ],
    "group": [
      "utils"
    ],
    "access": "public",
    "require": [],
    "file": {
      "path": "_utils.scss",
      "name": "_utils.scss"
    }
  },
  {
    "description": "",
    "commentRange": {
      "start": 119,
      "end": 120
    },
    "context": {
      "type": "function",
      "name": "number-info",
      "code": "\n  $is-number: meta.type-of($number) != 'number';\n  $is-unitless: math.is-unitless($number);\n  @if ($is-unitless or not $is-number) {\n    @return (\n      \"unit\": null,\n      \"value\": $number \n    );\n  } @else {\n    @return (\n      \"unit\" : math.unit($value), \n      \"value\": math.div($number, ($number * 0 + 1))\n    );\n  }\n",
      "line": {
        "start": 122,
        "end": 136
      }
    },
    "parameter": [
      {
        "type": "String",
        "name": "number",
        "description": "Number to get meta info for"
      }
    ],
    "return": {
      "type": "Map",
      "description": "With properties (unit, value)"
    },
    "group": [
      "utils"
    ],
    "access": "public",
    "require": [],
    "file": {
      "path": "_utils.scss",
      "name": "_utils.scss"
    }
  },
  {
    "description": "Repeatable pattern in core\n",
    "commentRange": {
      "start": 138,
      "end": 138
    },
    "context": {
      "type": "function",
      "name": "map-merge-or-overwrite",
      "code": "\n  @if $deep {\n    @return map.deep-merge($original, $changes);\n  } @else if $overwrite {\n    @return $changes;\n  } @else {\n    @return map.merge($original, $changes);\n  }\n",
      "line": {
        "start": 140,
        "end": 148
      }
    },
    "group": [
      "utils"
    ],
    "access": "public",
    "require": [],
    "file": {
      "path": "_utils.scss",
      "name": "_utils.scss"
    },
    "usedBy": [
      {
        "description": "Set color contexts\n",
        "context": {
          "type": "mixin",
          "name": "set-contexts",
          "code": "\n  $contexts: utils.map-merge-or-overwrite($contexts, $changes, $deep, $overwrite) !global;\n",
          "line": {
            "start": 104,
            "end": 106
          }
        }
      },
      {
        "description": "Update the typography presets map\n",
        "context": {
          "type": "mixin",
          "name": "set-sizes",
          "code": "\n  $sizes: utils.map-merge-or-overwrite($sizes, $changes, $deep, $overwrite) !global;\n",
          "line": {
            "start": 179,
            "end": 181
          }
        }
      }
    ]
  },
  {
    "description": "Helps in providing a dynamic fallback for modules whose defaults should come from another\n",
    "commentRange": {
      "start": 150,
      "end": 154
    },
    "context": {
      "type": "function",
      "name": "function-fallback",
      "code": "\n  // If there was already a value return it else resolve through passed function\n  @if ($value == true)  {\n    $fn: map.get($lookup, $prop);\n    @if ($fn) {\n      @return meta.call($fn, $prop);\n    } \n  }\n  @return $value;\n",
      "line": {
        "start": 156,
        "end": 165
      }
    },
    "parameter": [
      {
        "type": "String",
        "name": "prop",
        "description": "Property trying to get fallback for"
      },
      {
        "type": "*",
        "name": "value",
        "description": "The value that may need the fallback"
      },
      {
        "type": "Map",
        "name": "lookup",
        "description": "Map of properties to functions (use sass:meta > meta.get-function to populate)"
      }
    ],
    "return": {
      "type": "*",
      "description": "The user's original value, or if the value is true get the default value from the provided function"
    },
    "group": [
      "utils"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "get"
      }
    ],
    "file": {
      "path": "_utils.scss",
      "name": "_utils.scss"
    },
    "usedBy": [
      {
        "description": "Get a config option\n",
        "context": {
          "type": "function",
          "name": "get",
          "code": "\n  $value: utils.require-map-get($config, $name, \"button [config]\");\n  @return utils.function-fallback($name, $value, $-fallbacks);\n",
          "line": {
            "start": 105,
            "end": 109
          }
        }
      }
    ]
  }
]