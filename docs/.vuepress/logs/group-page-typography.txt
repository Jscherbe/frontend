
# Typography



## Variables




### $config <badge text="variable" type="tip" vertical="top" />  {#variable-config} 

  

Module Settings
    
    

<SassdocDetails summary="Meta Information">

- **File:** _typography.scss
- **Group:** typography
- **Type:** variable
- **Lines (comment range):** 17-27
- **Lines (code):** 29-53


</SassdocDetails>
  

#### Map Properties


|Name|Type|Description|
|:--|:--|:--|
|$config.font-size|`Number`|Default font size (use pixels, converted, is used for rem base)|
|$config.font-family|`Number`|Default font family|
|$config.font-family-monospace|`Number`|Base font-family for monospace|
|$config.line-height|`Number`|Default line height|
|$config.line-height-dense|`Number`|Default dense line height|
|$config.size-ratio|`Number`|Font size scale when using preset sizes, ratio mixin)|
|$config.size-line-height-ratio|`Number`|Default line height scaling (when using preset sizes, ratio mixin). Can shrink line-height as size increase if desrireable|
|$config.responsive-change|`Number`|Amount to scale typography by browser's width (use viewport units)|
|$config.margin|`Number`|Default margin for typography (like paragraphs)|

    

#### Todos

- Idea: Should the maps value be processes when using the set-sizes, set? Instead of recalculated each time get-size is or get is used.
    


### $sizes <badge text="variable" type="tip" vertical="top" />  {#variable-sizes} 

  

Default size presets
    
    

<SassdocDetails summary="Meta Information">

- **File:** _typography.scss
- **Group:** typography
- **Type:** variable
- **Lines (comment range):** 143-152
- **Lines (code):** 154-168


</SassdocDetails>
  

#### Map Properties


|Name|Type|Description|
|:--|:--|:--|
|$size.name|`Number`|Name of size|
|$size.name.font-size|`Number`|Font size in rems or pixels|
|$size.name.line-height|`Number`|Line height (unitless)|
|$size.name.responsive|`Number`|Apply responsive sizes|
|$size.name.base-class|`Boolean`|This style should be included in the base (top can be overriden)|
|$size.name.helper-class|`Boolean`|This style should be included in the helpers (overrides)|

    

#### Todos

- Add adaptive and use a map of breakpoints and whether it's up or down
- Add headlines
    
  

## Mixins




### set() <badge text="mixin" type="tip" vertical="top" />  {#mixin-set} 

  

Change modules $config
    
    

<SassdocDetails summary="Meta Information">

- **File:** _typography.scss
- **Group:** typography
- **Type:** mixin
- **Lines (comment range):** 55-57
- **Lines (code):** 59-61


</SassdocDetails>
  

#### Parameters


|Name|Type|Description|
|:--|:--|:--|
|$changes|`Map`|Map of changes
  @include typography.set-options(( "font-size" : 14px ));|

    

#### Todos

- Idea: Should the maps value be processes when using the set-sizes, set? Instead of recalculated each time get-size is or get is used.
    

#### Require

- [$config](/sass/base/#variable-config)
  


### word-break() <badge text="mixin" type="tip" vertical="top" />  {#mixin-word-break} 

  

Break word stradegy
    
    

<SassdocDetails summary="Meta Information">

- **File:** _typography.scss
- **Group:** typography
- **Type:** mixin
- **Lines (comment range):** 114-115
- **Lines (code):** 117-121


</SassdocDetails>
  

#### Parameters


|Name|Type|Description|
|:--|:--|:--|
|$force|`Boolean`|Force words to break (will have unusual breaks)|

    

#### Todos

- Idea: Should the maps value be processes when using the set-sizes, set? Instead of recalculated each time get-size is or get is used.
    


### set-sizes() <badge text="mixin" type="tip" vertical="top" />  {#mixin-set-sizes} 

  

Update the typography presets map
    
    

<SassdocDetails summary="Meta Information">

- **File:** _typography.scss
- **Group:** typography
- **Type:** mixin
- **Lines (comment range):** 170-177
- **Lines (code):** 179-181


</SassdocDetails>
  

#### Examples

Setting the error and type color      


``` scss
@include typography.set((
  "small" : 0.8rem
));
```
  
      

#### Parameters


|Name|Type|Description|
|:--|:--|:--|
|$changes|`Map`|A map to merge into the color palette|
|$deep|`Map`|Use deep merge|
|$overwrite|`Map`|Overwrite the presets completly (cannot be used with deep)|

    

#### Todos

- Idea: Should the maps value be processes when using the set-sizes, set? Instead of recalculated each time get-size is or get is used.
    

#### Require

- [map-merge-or-overwrite()](undefined)
- [$sizes](/sass/breakpoint/#variable-sizes)
  


### font-size-responsive() <badge text="mixin" type="tip" vertical="top" />  {#mixin-font-size-responsive} 

  

Print's the responsive type formula
    
    

<SassdocDetails summary="Meta Information">

- **File:** _typography.scss
- **Group:** typography
- **Type:** mixin
- **Lines (comment range):** 267-269
- **Lines (code):** 271-276


</SassdocDetails>
  

#### Parameters


|Name|Type|Description|
|:--|:--|:--|
|$font-size|`String`|Name to retrieve from sizes map or a unique size map that follows the API|
|$changes|`Map`|Modifications to be merged into size before using|

    

#### Todos

- Idea: Should the maps value be processes when using the set-sizes, set? Instead of recalculated each time get-size is or get is used.
    

#### Require

- [get()](/sass/base/#function-get)
  


### size() <badge text="mixin" type="tip" vertical="top" />  {#mixin-size} 

  

Print a typography size (font-size, line-height)
    
    

<SassdocDetails summary="Meta Information">

- **File:** _typography.scss
- **Group:** typography
- **Type:** mixin
- **Lines (comment range):** 278-280
- **Lines (code):** 282-318


</SassdocDetails>
  

#### Parameters


|Name|Type|Description|
|:--|:--|:--|
|$nameOrMap|`String`|Name to retrieve from sizes map or a unique size map that follows the API|
|$changes|`Map`|Modifications to be merged into size before using|

    

#### Todos

- Idea: Should the maps value be processes when using the set-sizes, set? Instead of recalculated each time get-size is or get is used.
    

#### Require

- [font-size-responsive()](/sass/typography/#mixin-font-size-responsive)
- [get-size()](/sass/typography/#function-get-size)
- [get-size-converted-value()](/sass/typography/#function-get-size-converted-value)
- [get()](/sass/base/#function-get)
- [get-size-value()](/sass/typography/#function-get-size-value)
  
  

## Functions




### get() <badge text="function" type="tip" vertical="top" />  {#function-get} 

  

Get a config option
    
    

<SassdocDetails summary="Meta Information">

- **File:** _typography.scss
- **Group:** typography
- **Type:** function
- **Lines (comment range):** 63-65
- **Lines (code):** 67-69


</SassdocDetails>
  

#### Parameters


|Name|Type|Description|
|:--|:--|:--|
|$changes|`Map`|Map of changes
  @include typography.set-options(( "font-size" : 14px ));|

    

#### Todos

- Idea: Should the maps value be processes when using the set-sizes, set? Instead of recalculated each time get-size is or get is used.
    

#### Require

- [require-map-get()](undefined)
- [$config](/sass/base/#variable-config)
  


### scale() <badge text="function" type="tip" vertical="top" />  {#function-scale} 

  

Get scale of the base font-size
    
    

<SassdocDetails summary="Meta Information">

- **File:** _typography.scss
- **Group:** typography
- **Type:** function
- **Lines (comment range):** 71-73
- **Lines (code):** 75-77


</SassdocDetails>
  

#### Parameters


|Name|Type|Description|
|:--|:--|:--|
|$step|`Number`|Current size in the scale you want to calculate|

    

#### Returns


|Type|Description|
|:--|:--|
|`Number`|Scaled value|

    

#### Todos

- Idea: Should the maps value be processes when using the set-sizes, set? Instead of recalculated each time get-size is or get is used.
    

#### Require

- [ratio-scale-size()](/sass/calculate/#function-ratio-scale-size)
- [get()](/sass/base/#function-get)
  


### scale-line-height() <badge text="function" type="tip" vertical="top" />  {#function-scale-line-height} 

  

Get scale of the line-height
    
    

<SassdocDetails summary="Meta Information">

- **File:** _typography.scss
- **Group:** typography
- **Type:** function
- **Lines (comment range):** 79-82
- **Lines (code):** 84-86


</SassdocDetails>
  

#### Parameters


|Name|Type|Description|
|:--|:--|:--|
|$step|`Number`|Current size in the scale you want to calculate|

    

#### Returns


|Type|Description|
|:--|:--|
|`Number`|Scaled value|

    

#### Todos

- Setup breakpoints
    

#### Require

- [ratio-scale-size()](/sass/calculate/#function-ratio-scale-size)
- [get()](/sass/base/#function-get)
  


### rem() <badge text="function" type="tip" vertical="top" />  {#function-rem} 

  

Convert pixel value to rem value based on typography $font-size
    
    

<SassdocDetails summary="Meta Information">

- **File:** _typography.scss
- **Group:** typography
- **Type:** function
- **Lines (comment range):** 88-90
- **Lines (code):** 92-98


</SassdocDetails>
  

#### Parameters


|Name|Type|Description|
|:--|:--|:--|
|$pixels|`Number`|Pixel value to convert from|

    

#### Returns


|Type|Description|
|:--|:--|
|`Number`|Rem value|

    

#### Todos

- Idea: Should the maps value be processes when using the set-sizes, set? Instead of recalculated each time get-size is or get is used.
    

#### Require

- [get()](/sass/base/#function-get)
  


### em() <badge text="function" type="tip" vertical="top" />  {#function-em} 

  

Changes pixels to em
    
    

<SassdocDetails summary="Meta Information">

- **File:** _typography.scss
- **Group:** typography
- **Type:** function
- **Lines (comment range):** 100-103
- **Lines (code):** 105-112


</SassdocDetails>
  

#### Parameters


|Name|Type|Description|
|:--|:--|:--|
|$value|`Number`|Pixel value to convert from|
|$base|`Number`|Conversion base (defaults to font-size)|

    

#### Returns


|Type|Description|
|:--|:--|
|`Number`|Rem value|

    

#### Todos

- Idea: Should the maps value be processes when using the set-sizes, set? Instead of recalculated each time get-size is or get is used.
    

#### Require

- [get()](/sass/base/#function-get)
  


### new-size() <badge text="function" type="tip" vertical="top" />  {#function-new-size} 

  

Creates a size map 
- This is just an accelerator for creating a size map
- You can pass your own size maps using set-sizes()
    
    

<SassdocDetails summary="Meta Information">

- **File:** _typography.scss
- **Group:** typography
- **Type:** function
- **Lines (comment range):** 123-128
- **Lines (code):** 130-141


</SassdocDetails>
  

#### Parameters


|Name|Type|Description|
|:--|:--|:--|
|$font-size|`Number`|Font size|
|$line-height|`Number`|Line height|
|$is-headline|`Boolean`|Is a headline|

    

#### Todos

- Idea: Should the maps value be processes when using the set-sizes, set? Instead of recalculated each time get-size is or get is used.
    

#### Require

- [get()](/sass/base/#function-get)
  


### get-size() <badge text="function" type="tip" vertical="top" />  {#function-get-size} 

  

Get a size's map
    
    

<SassdocDetails summary="Meta Information">

- **File:** _typography.scss
- **Group:** typography
- **Type:** function
- **Lines (comment range):** 183-185
- **Lines (code):** 187-189


</SassdocDetails>
  

#### Parameters


|Name|Type|Description|
|:--|:--|:--|
|$name|`String`|Name of size|

    

#### Returns


|Type|
|:--|
|`Map`|

    

#### Todos

- Idea: Should the maps value be processes when using the set-sizes, set? Instead of recalculated each time get-size is or get is used.
    

#### Require

- [require-map-get()](undefined)
- [$sizes](/sass/breakpoint/#variable-sizes)
  


### font-size() <badge text="function" type="tip" vertical="top" />  {#function-font-size} 

  

Print a font-size for a given size
    
    

<SassdocDetails summary="Meta Information">

- **File:** _typography.scss
- **Group:** typography
- **Type:** function
- **Lines (comment range):** 191-193
- **Lines (code):** 195-199


</SassdocDetails>
  

#### Parameters


|Name|Type|Description|
|:--|:--|:--|
|$value|`String`|Size name|

    

#### Todos

- Remove doesn't work for breakpoints or responsive
    

#### Require

- [get-size()](/sass/typography/#function-get-size)
- [get()](/sass/base/#function-get)
- [rem()](/sass/typography/#function-rem)
  


### unitless-line-height() <badge text="function" type="tip" vertical="top" />  {#function-unitless-line-height} 

  

Forces conversion to unitless line-height
    
    

<SassdocDetails summary="Meta Information">

- **File:** _typography.scss
- **Group:** typography
- **Type:** function
- **Lines (comment range):** 201-203
- **Lines (code):** 205-219


</SassdocDetails>
  

#### Parameters


|Name|Type|Description|
|:--|:--|:--|
|$line-height|`Number`|Line height size in px, em, or rem|
|$font-size|`Number`|Font size in px, em, or rem|

    

#### Todos

- Idea: Should the maps value be processes when using the set-sizes, set? Instead of recalculated each time get-size is or get is used.
    

#### Require

- [strip-unit()](undefined)
- [rem()](/sass/typography/#function-rem)
  


### get-size-converted-value() <badge text="function" type="tip" vertical="top" />  {#function-get-size-converted-value} 

  

Print a value from the size and convert it (to appropriate unit for framework)
    
    

<SassdocDetails summary="Meta Information">

- **File:** _typography.scss
- **Group:** typography
- **Type:** function
- **Lines (comment range):** 220-222
- **Lines (code):** 224-250


</SassdocDetails>
  

#### Parameters


|Name|Type|Description|
|:--|:--|:--|
|$size|`Map`|Size's map|
|$props|`String`|The property to get|

    

#### Todos

- Idea: Should the maps value be processes when using the set-sizes, set? Instead of recalculated each time get-size is or get is used.
    

#### Require

- [get()](/sass/base/#function-get)
- [unitless-line-height()](/sass/typography/#function-unitless-line-height)
- [rem()](/sass/typography/#function-rem)
  


### get-size-value() <badge text="function" type="tip" vertical="top" />  {#function-get-size-value} 

  

Get a sizes property value that doesn't need conversion 
- Reason: Will map to default if user set's size prop to true
    
    

<SassdocDetails summary="Meta Information">

- **File:** _typography.scss
- **Group:** typography
- **Type:** function
- **Lines (comment range):** 253-256
- **Lines (code):** 258-265


</SassdocDetails>
  

#### Parameters


|Name|Type|Description|
|:--|:--|:--|
|$size|`Map`|Size's map|
|$props|`String`|The property to get|

    

#### Todos

- Idea: Should the maps value be processes when using the set-sizes, set? Instead of recalculated each time get-size is or get is used.
    

#### Require

- [get()](/sass/base/#function-get)
  
  

<script>
console.log([{"groupName":"typography","id":"variable-config","uid":"typography-variable-config","title":"$config","groupPath":"/sass/typography/","path":"/sass/typography/#variable-config","previews":[]},{"groupName":"typography","id":"mixin-set","uid":"typography-mixin-set","title":"set()","groupPath":"/sass/typography/","path":"/sass/typography/#mixin-set","previews":[]},{"groupName":"typography","id":"function-get","uid":"typography-function-get","title":"get()","groupPath":"/sass/typography/","path":"/sass/typography/#function-get","previews":[]},{"groupName":"typography","id":"function-scale","uid":"typography-function-scale","title":"scale()","groupPath":"/sass/typography/","path":"/sass/typography/#function-scale","previews":[]},{"groupName":"typography","id":"function-scale-line-height","uid":"typography-function-scale-line-height","title":"scale-line-height()","groupPath":"/sass/typography/","path":"/sass/typography/#function-scale-line-height","previews":[]},{"groupName":"typography","id":"function-rem","uid":"typography-function-rem","title":"rem()","groupPath":"/sass/typography/","path":"/sass/typography/#function-rem","previews":[]},{"groupName":"typography","id":"function-em","uid":"typography-function-em","title":"em()","groupPath":"/sass/typography/","path":"/sass/typography/#function-em","previews":[]},{"groupName":"typography","id":"mixin-word-break","uid":"typography-mixin-word-break","title":"word-break()","groupPath":"/sass/typography/","path":"/sass/typography/#mixin-word-break","previews":[]},{"groupName":"typography","id":"function-new-size","uid":"typography-function-new-size","title":"new-size()","groupPath":"/sass/typography/","path":"/sass/typography/#function-new-size","previews":[]},{"groupName":"typography","id":"variable-sizes","uid":"typography-variable-sizes","title":"$sizes","groupPath":"/sass/typography/","path":"/sass/typography/#variable-sizes","previews":[]},{"groupName":"typography","id":"mixin-set-sizes","uid":"typography-mixin-set-sizes","title":"set-sizes()","groupPath":"/sass/typography/","path":"/sass/typography/#mixin-set-sizes","previews":[null]},{"groupName":"typography","id":"function-get-size","uid":"typography-function-get-size","title":"get-size()","groupPath":"/sass/typography/","path":"/sass/typography/#function-get-size","previews":[]},{"groupName":"typography","id":"function-font-size","uid":"typography-function-font-size","title":"font-size()","groupPath":"/sass/typography/","path":"/sass/typography/#function-font-size","previews":[]},{"groupName":"typography","id":"function-unitless-line-height","uid":"typography-function-unitless-line-height","title":"unitless-line-height()","groupPath":"/sass/typography/","path":"/sass/typography/#function-unitless-line-height","previews":[]},{"groupName":"typography","id":"function-get-size-converted-value","uid":"typography-function-get-size-converted-value","title":"get-size-converted-value()","groupPath":"/sass/typography/","path":"/sass/typography/#function-get-size-converted-value","previews":[]},{"groupName":"typography","id":"function-get-size-value","uid":"typography-function-get-size-value","title":"get-size-value()","groupPath":"/sass/typography/","path":"/sass/typography/#function-get-size-value","previews":[]},{"groupName":"typography","id":"mixin-font-size-responsive","uid":"typography-mixin-font-size-responsive","title":"font-size-responsive()","groupPath":"/sass/typography/","path":"/sass/typography/#mixin-font-size-responsive","previews":[]},{"groupName":"typography","id":"mixin-size","uid":"typography-mixin-size","title":"size()","groupPath":"/sass/typography/","path":"/sass/typography/#mixin-size","previews":[]}]);
const sassdocGroup = [{"groupName":"typography","id":"variable-config","uid":"typography-variable-config","title":"$config","groupPath":"/sass/typography/","path":"/sass/typography/#variable-config","previews":[]},{"groupName":"typography","id":"mixin-set","uid":"typography-mixin-set","title":"set()","groupPath":"/sass/typography/","path":"/sass/typography/#mixin-set","previews":[]},{"groupName":"typography","id":"function-get","uid":"typography-function-get","title":"get()","groupPath":"/sass/typography/","path":"/sass/typography/#function-get","previews":[]},{"groupName":"typography","id":"function-scale","uid":"typography-function-scale","title":"scale()","groupPath":"/sass/typography/","path":"/sass/typography/#function-scale","previews":[]},{"groupName":"typography","id":"function-scale-line-height","uid":"typography-function-scale-line-height","title":"scale-line-height()","groupPath":"/sass/typography/","path":"/sass/typography/#function-scale-line-height","previews":[]},{"groupName":"typography","id":"function-rem","uid":"typography-function-rem","title":"rem()","groupPath":"/sass/typography/","path":"/sass/typography/#function-rem","previews":[]},{"groupName":"typography","id":"function-em","uid":"typography-function-em","title":"em()","groupPath":"/sass/typography/","path":"/sass/typography/#function-em","previews":[]},{"groupName":"typography","id":"mixin-word-break","uid":"typography-mixin-word-break","title":"word-break()","groupPath":"/sass/typography/","path":"/sass/typography/#mixin-word-break","previews":[]},{"groupName":"typography","id":"function-new-size","uid":"typography-function-new-size","title":"new-size()","groupPath":"/sass/typography/","path":"/sass/typography/#function-new-size","previews":[]},{"groupName":"typography","id":"variable-sizes","uid":"typography-variable-sizes","title":"$sizes","groupPath":"/sass/typography/","path":"/sass/typography/#variable-sizes","previews":[]},{"groupName":"typography","id":"mixin-set-sizes","uid":"typography-mixin-set-sizes","title":"set-sizes()","groupPath":"/sass/typography/","path":"/sass/typography/#mixin-set-sizes","previews":[null]},{"groupName":"typography","id":"function-get-size","uid":"typography-function-get-size","title":"get-size()","groupPath":"/sass/typography/","path":"/sass/typography/#function-get-size","previews":[]},{"groupName":"typography","id":"function-font-size","uid":"typography-function-font-size","title":"font-size()","groupPath":"/sass/typography/","path":"/sass/typography/#function-font-size","previews":[]},{"groupName":"typography","id":"function-unitless-line-height","uid":"typography-function-unitless-line-height","title":"unitless-line-height()","groupPath":"/sass/typography/","path":"/sass/typography/#function-unitless-line-height","previews":[]},{"groupName":"typography","id":"function-get-size-converted-value","uid":"typography-function-get-size-converted-value","title":"get-size-converted-value()","groupPath":"/sass/typography/","path":"/sass/typography/#function-get-size-converted-value","previews":[]},{"groupName":"typography","id":"function-get-size-value","uid":"typography-function-get-size-value","title":"get-size-value()","groupPath":"/sass/typography/","path":"/sass/typography/#function-get-size-value","previews":[]},{"groupName":"typography","id":"mixin-font-size-responsive","uid":"typography-mixin-font-size-responsive","title":"font-size-responsive()","groupPath":"/sass/typography/","path":"/sass/typography/#mixin-font-size-responsive","previews":[]},{"groupName":"typography","id":"mixin-size","uid":"typography-mixin-size","title":"size()","groupPath":"/sass/typography/","path":"/sass/typography/#mixin-size","previews":[]}];
export default {
  sassdocGroup,
  provide: {
    getSassdocItem(uid) {
      return sassdocGroup.find(item => item._uid === uid);
    },
    getSassdocGroup() {
      return sassdocGroup;
    }
  }
}
</script> 
  
  