(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{409:function(e,t,n){"use strict";n.r(t);var i={sassdocGroup:{mixins:[{description:"Change modules $config\n",context:{type:"mixin",name:"set",code:"\n  $config: map.merge($config, $changes) !global;\n",line:{start:61,end:63}},parameter:[{type:"Map",name:"changes",description:'Map of changes\n  @include module-name.set(( "property" : value ));'}],group:["grid"],require:[{type:"variable",name:"config",autofill:!0,item:"base--variable--config"},{type:"variable",name:"config",autofill:!0,item:"base--variable--config"}],file:{path:"_grid.scss",name:"_grid.scss"},_uid:"grid--mixin--set"},{description:"Creates grid css (variation of original data-grid)\n",context:{type:"mixin",name:"create",code:'\n  $attribute-item: "#{ $attribute }-item";\n  $select-grid: \'[#{ $attribute }*="columns: #{ $columns }"]\';\n  $select-item: \'[#{ $attribute-item }]\';\n  $select-rule-col: ":before";\n  $select-rule-row: ":after";\n  // These through off syntax highlighting when inside interpolation\n  $position-class-column-first: get("position-class-column-first");\n  $position-class-column-last: get("position-class-column-last");\n  $position-class-row-first: get("position-class-row-first");\n  $position-class-row-last: get("position-class-row-last");\n\n  #{ $select-grid } {\n    @include layout.clearfix(); // For legacy browsers\n\n    // Ensure empty elements still take up space in layout\n    > #{ $select-item } {\n      min-height: 1px; \n      width: 100%;\n    }\n    // This is for value of true and also covers all options below\n    &#{\'[#{ $attribute }*="gutters-row:"]\'} { \n      > #{ $select-item } {\n        padding-top:  $gutter;\n        padding-bottom: $gutter;\n      }\n    }\n    &#{\'[#{ $attribute }*="gutters-row: top"]\'} { \n      > #{ $select-item } {\n        &.#{ $position-class-row-last } {\n          padding-bottom: 0;\n        }\n      }\n    }\n    &#{\'[#{ $attribute }*="gutters-row: bottom"]\'} { \n      > #{ $select-item } {\n        &.#{ $position-class-row-first } {\n          padding-top: 0;\n        }\n      }\n    }\n    &#{\'[#{ $attribute }*="gutters-row: fit"]\'} { \n      margin-top: -$gutter;\n      margin-bottom: -$gutter;\n    }\n    // Rules: Row\n    &#{\'[#{ $attribute }*="rules-row:"]\'} { \n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          position: absolute;\n          left: 0;\n          right: 0;\n          height: $rule-size;\n          background: color.get($rule-color);\n        }\n      }\n    }\n    // Rules: Applies to both column and row\n    &#{\'[#{ $attribute }*="rules"]\'} { \n      > #{ $select-item } {\n        position: relative;\n      }\n    }\n    // Rules: Column\n    &#{\'[#{ $attribute }*="rules-column:"]\'} { \n      > #{ $select-item } {\n        &#{ $select-rule-col } {\n          position: absolute;\n          top: 0;\n          bottom: 0;\n          width: $rule-size;\n          background: color.get($rule-color);\n        }\n      }\n    }\n    // Options for the left or right\n    @include -create-rule-col-position(\n      $position: "left", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-col: $select-rule-col, \n      $end-class: $position-class-column-first\n    );\n    @include -create-rule-col-position(\n      $position: "right", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-col: $select-rule-col, \n      $end-class: $position-class-column-last\n    );\n    // Override first or last column removing the rule using matching specificity\n    &#{\'[#{ $attribute }*="rules-column:"][#{ $attribute }*="rules-column-ends: true"]\'} {\n      > #{ $select-item } {\n        &#{ $select-rule-col } {\n          content: \'\';\n        }\n      }\n    }\n    &#{\'[#{ $attribute }*="rules-column-align: gutter"]\'} {\n      > #{ $select-item } {\n        &#{ $select-rule-col } {\n          top: $gutter;\n          bottom: $gutter;\n        }\n      }\n    }\n    // Options for the left or right\n    @include -create-rule-row-position(\n      $position: "top", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-row: $select-rule-row, \n      $between: false\n    );\n    @include -create-rule-row-position(\n      $position: "bottom", \n      $size: $rule-size, \n      $attribute: $attribute, \n      $select-item: $select-item, \n      $select-rule-row: $select-rule-row, \n      $between: false\n    );\n\n    &#{\'[#{ $attribute }*="rules-row: between"]\'} {\n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          bottom: math.floor(math.div($rule-size, 2)) * -1;\n        }\n        // For removing the rule per row (via equal heights for now)\n        &.#{ $position-class-row-last } {\n          &#{ $select-rule-row } {\n            content: none;\n          }\n        }\n      }\n    }\n    &#{\'[#{ $attribute }*="rules-row-align: gutter"]\'} {\n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          left: $gutter;\n          right: $gutter;\n        }\n      }\n    }\n    &#{\'[#{ $attribute }*="rules-row-persist: true"]\'} {\n      > #{ $select-item } {\n        &#{ $select-rule-row } {\n          content: \'\';\n        }\n      }\n    }\n  }\n\n  @include breakpoint.min($breakpoint) {\n    // Select the attribute with matching column count\n    #{ $select-grid } {\n      // Defaults for grid an item\n      display: flex;\n      flex-flow: row wrap;\n      align-items: stretch;\n      margin-left: -$gutter;\n      margin-right: -$gutter;\n\n      > #{ $select-item } {\n        float: left; // Fallback\n        padding-left: $gutter;\n        padding-right: $gutter;\n      }\n      // Alignment options\n      &#{\'[#{ $attribute }*="align: center"]\'} { \n        align-items: center;  \n      }\n      &#{\'[#{ $attribute }*="align: end"]\'} { \n        align-items: flex-end;\n      }\n      &#{\'[#{ $attribute }*="align: start"]\'} { \n        align-items: flex-start; \n      }\n      // Alignment of the children when using stretch\n      // - There is no stetch-start (that\'s defualt);\n      // - There is no stetch-middle (that\'s covered by stretch-);\n      &#{\'[#{ $attribute }*="align: stretch-"]\'} { \n        // set the child to display as a single flex item\n        > #{ $select-item } {\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n        }\n      }\n      &#{\'[#{ $attribute }*="align: stretch-end"]\'} { \n        > #{ $select-item } {\n          justify-content: flex-end;\n        }\n      }\n      // Other options\n      &#{\'[#{ $attribute }*="gutters: false"]\'} { \n        margin-left: 0;\n        margin-right: 0;\n        > #{ $select-item } {\n          padding-left: 0;\n          padding-right: 0;\n        }\n      }\n      // Activate Rules\n      &#{\'[#{ $attribute }*="rules-column:"]\'} {\n        > #{ $select-item } {\n          &#{ $select-rule-col } {\n            content: \'\';\n          }\n        }\n      }\n      &#{\'[#{ $attribute }*="rules-row:"]\'} {\n        > #{ $select-item } {\n          &#{ $select-rule-row } {\n            content: \'\';\n          }\n        }\n      }\n      // Generated props for item\n      @include -create-column-widths(\n        $columns: $columns,\n        $attribute-item: $attribute-item,\n        $suffix: \'\'\n      );\n      @include -create-column-offsets(\n        $columns: $columns,\n        $attribute-item: $attribute-item,\n        $suffix: \'\'\n      );\n    }\n  }\n\n  @if $extra-breakpoints {\n    @each $name, $options in $extra-breakpoints {\n      $g: map.get($options, "gutter");\n      @include -create-extra-breakpoint(\n        $name: $name, \n        $breakpoint: map.get($options, "breakpoint"),\n        $gutter: if($g, $g, $gutter),\n        $columns: $columns,\n        $attribute-item: $attribute-item,\n        $select-grid: $select-grid,\n        $select-item: $select-item\n      );\n    }\n  }\n  @if $extra-rule-styles {\n    @each $name, $options in $extra-rule-styles {\n      $color: utils.require-map-get($options, "color", "grid [extra rule style]");\n      $size: utils.require-map-get($options, "size", "grid [extra rule style]");\n      #{ $select-grid } {\n\n        &#{\'[#{_attr}*="rules-column-style: #{ $name }"]\'} {\n          > #{ $select-item } {\n            &#{ $select-rule-col } {\n              background-color: color.get($color);\n              width: $size;\n            }\n          }\n          @include -create-rule-col-position(\n            $position: "left", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-col: $select-rule-col, \n            $end-class: false\n          );\n          @include -create-rule-col-position(\n            $position: "right", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-col: $select-rule-col, \n            $end-class: false\n          );\n        }\n        &#{\'[#{_attr}*="rules-row-style: #{ $name }"]\'} {\n          > #{ $select-item } {\n            &#{ $select-rule-row } {\n              background-color: $color;\n              height: $size;\n            }\n          }\n          @include -create-rule-row-position(\n            $position: "top", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-row: $select-rule-row, \n            $between: false\n          );\n          @include -create-rule-row-position(\n            $position: "bottom", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-row: $select-rule-row, \n            $between: false\n          );\n          @include -create-rule-row-position(\n            $position: "bottom", \n            $size: $size, \n            $attribute: $attribute, \n            $select-item: $select-item, \n            $select-rule-row: $select-rule-row, \n            $between: true\n          );\n        }\n      }\n    }\n  }\n',line:{start:83,end:407}},parameter:[{type:"Number",name:"columns",description:"Columns in grid"},{type:"Number",name:"breakpoint",description:"Breakpoint key for starting the grid"},{type:"Map",name:"extra-breakpoints",description:"Map with other breakpoints to add (map of breakpoint and gutter see config.extra-breakpoints for an example (smalles to largest)"},{type:"Number",name:"gutter",description:"Size in pixels for the gutters"},{type:"Boolean",name:"include-rules",description:"Print styles for including rules"},{type:"Number",name:"rule-size",description:"Size of the rule (border/seperator)"},{type:"Map",name:"extra-rule-styles",description:'Map of other rule styles to add (map of maps of size, and color), key is the styles name ("name": ("size" : 4px, "color" : "color name" || color))'},{type:"String",name:"attribute",description:'Attribute to use for selecting grid and children. Children attribute get\'s "-item" as a suffix ("ie. data-grid, data-grid-item")'}],group:["grid"],require:[{type:"function",name:"get",autofill:!0,item:"base--function--get"},{type:"function",name:"get",autofill:!0,item:"base--function--get"},{type:"function",name:"get",autofill:!0,item:"base--function--get"},{type:"function",name:"get",autofill:!0,item:"base--function--get"},{type:"function",name:"get",autofill:!0,item:"base--function--get"},{type:"function",name:"get",autofill:!0,item:"base--function--get"},{type:"function",name:"get",autofill:!0,item:"base--function--get"},{type:"function",name:"get",autofill:!0,item:"base--function--get"},{type:"function",name:"require-map-get",autofill:!0,item:"utils--function--require-map-get"},{type:"function",name:"require-map-get",autofill:!0,item:"utils--function--require-map-get"},{type:"function",name:"get",autofill:!0,item:"base--function--get"}],file:{path:"_grid.scss",name:"_grid.scss"},_uid:"grid--mixin--create"}],variables:[{description:"Module Settings\n",context:{type:"variable",name:"config",value:'(\n  "columns":            12,\n  "attribute":          "data-grid",\n  "gutter":             14px,\n  "extra-breakpoints" : (\n    "medium" : (\n      "breakpoint" : "medium",\n      "gutter" : 15px\n    ),\n    "large" : (\n      "breakpoint" : "large",\n      "gutter" : 20px\n    )\n  ),\n  "position-class-column-first": "position-column-first",\n  "position-class-column-last":  "position-column-last",\n  "position-class-row-first":    "position-row-first",\n  "position-class-row-last":     "position-row-last"\n)',scope:"default",line:{start:38,end:56}},type:"Map",property:[{type:"Number",name:"$config.columns",description:"Default for grid mixin"},{type:"String",name:"$config.attribute",description:"Default attribute to use for grid mixin"},{type:"Number",name:"$config.gutter",description:"Default gutter for grid mixin"},{type:"Map",name:"$config.extra-breakpoints",description:"Default extra breakpoints for grid mixin"},{type:"MaStringp",name:"$config.position-class-column-first",description:"Classname for position system (JS) grid uses to display rules (layout can flow, script will update classes)"},{type:"String",name:"$config.position-class-column-last",description:"See definition above"},{type:"String",name:"$config.position-class-row-first",description:"See definition above"},{type:"String",name:"$config.position-class-row-last",description:"See definition above"}],group:["grid"],file:{path:"_grid.scss",name:"_grid.scss"},_uid:"grid--variable--config"}],functions:[{description:"Get a config option\n",context:{type:"function",name:"get",code:'\n  @return utils.require-map-get($config, $name, "grid [config]");\n',line:{start:69,end:71}},parameter:[{type:"Map",name:"name",description:'Name of property\n  @include module-name.get("property");'}],group:["grid"],require:[{type:"function",name:"require-map-get",autofill:!0,item:"utils--function--require-map-get"},{type:"variable",name:"config",autofill:!0,item:"base--variable--config"}],file:{path:"_grid.scss",name:"_grid.scss"},_uid:"grid--function--get"}],placeholders:[]}},r=n(24),s=Object(r.a)(i,(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"grid"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#grid"}},[e._v("#")]),e._v(" Grid")]),e._v(" "),n("h2",{attrs:{id:"mixins"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mixins"}},[e._v("#")]),e._v(" Mixins")]),e._v(" "),n("h3",{attrs:{id:"set"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[e._v("#")]),e._v(" set()")]),e._v(" "),n("p",[e._v("Change modules $config")]),e._v(" "),n("SassdocItem",{attrs:{item:e.$options.sassdocGroup.mixins[0]}}),e._v(" "),n("h3",{attrs:{id:"create"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#create"}},[e._v("#")]),e._v(" create()")]),e._v(" "),n("p",[e._v("Creates grid css (variation of original data-grid)")]),e._v(" "),n("SassdocItem",{attrs:{item:e.$options.sassdocGroup.mixins[1]}}),e._v(" "),n("h2",{attrs:{id:"variables"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#variables"}},[e._v("#")]),e._v(" Variables")]),e._v(" "),n("h3",{attrs:{id:"config"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#config"}},[e._v("#")]),e._v(" $config")]),e._v(" "),n("p",[e._v("Module Settings")]),e._v(" "),n("SassdocItem",{attrs:{item:e.$options.sassdocGroup.variables[0]}}),e._v(" "),n("h2",{attrs:{id:"functions"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#functions"}},[e._v("#")]),e._v(" Functions")]),e._v(" "),n("h3",{attrs:{id:"get"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#get"}},[e._v("#")]),e._v(" get()")]),e._v(" "),n("p",[e._v("Get a config option")]),e._v(" "),n("SassdocItem",{attrs:{item:e.$options.sassdocGroup.functions[0]}}),e._v(" "),n("h2",{attrs:{id:"placeholders"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#placeholders"}},[e._v("#")]),e._v(" Placeholders")])],1)}),[],!1,null,null,null);t.default=s.exports}}]);