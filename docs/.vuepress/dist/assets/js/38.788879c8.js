(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{414:function(e,t,i){"use strict";i.r(t);var s={sassdocGroup:{mixins:[{description:"Change modules $config\n",context:{type:"mixin",name:"set",code:"\n  $config: map.merge($config, $changes) !global;\n",line:{start:59,end:61}},parameter:[{type:"Map",name:"changes",description:'Map of changes\n  @include typography.set-options(( "font-size" : 14px ));'}],group:["typography"],todo:["Idea: Should the maps value be processes when using the set-sizes, set? Instead of recalculated each time get-size is or get is used."],require:[{type:"variable",name:"config",autofill:!0,item:"base--variable--config"},{type:"variable",name:"config",autofill:!0,item:"base--variable--config"}],file:{path:"_typography.scss",name:"_typography.scss"},_uid:"typography--mixin--set"},{description:"Break word stradegy\n",context:{type:"mixin",name:"word-break",code:"\n  word-break: if($force, break-all, normal);\n  word-break: break-word;\n  hyphens: auto;\n",line:{start:117,end:121}},parameter:[{type:"Boolean",name:"force",description:"Force words to break (will have unusual breaks)"}],group:["typography"],todo:["Idea: Should the maps value be processes when using the set-sizes, set? Instead of recalculated each time get-size is or get is used."],require:[],file:{path:"_typography.scss",name:"_typography.scss"},_uid:"typography--mixin--word-break"},{description:"Update the typography presets map\n",context:{type:"mixin",name:"set-sizes",code:"\n  $sizes: utils.map-merge-or-overwrite($sizes, $changes, $deep, $overwrite) !global;\n",line:{start:179,end:181}},parameter:[{type:"Map",name:"changes",description:"A map to merge into the color palette"},{type:"Map",name:"deep",description:"Use deep merge"},{type:"Map",name:"overwrite",description:"Overwrite the presets completly (cannot be used with deep)"}],example:[{type:"scss",code:'@include typography.set((\n  "small" : 0.8rem\n));',description:"Setting the error and type color"}],group:["typography"],todo:["Idea: Should the maps value be processes when using the set-sizes, set? Instead of recalculated each time get-size is or get is used."],require:[{type:"function",name:"map-merge-or-overwrite",autofill:!0,item:"utils--function--map-merge-or-overwrite"},{type:"variable",name:"sizes",autofill:!0,item:"breakpoint--variable--sizes"},{type:"variable",name:"sizes",autofill:!0,item:"breakpoint--variable--sizes"}],file:{path:"_typography.scss",name:"_typography.scss"},_uid:"typography--mixin--set-sizes"},{description:"Print's the responsive type formula\n",context:{type:"mixin",name:"font-size-responsive",code:'\n  @if (meta.type-of($amount) != "number") {\n    $amount: get("responsive-change");\n  }\n  font-size: calc(#{ $font-size } + #{ $amount });\n',line:{start:271,end:276}},parameter:[{type:"String",name:"font-size",description:"Name to retrieve from sizes map or a unique size map that follows the API"},{type:"Map",name:"changes",description:"Modifications to be merged into size before using"}],group:["typography"],todo:["Idea: Should the maps value be processes when using the set-sizes, set? Instead of recalculated each time get-size is or get is used."],require:[{type:"function",name:"get",autofill:!0,item:"base--function--get"}],file:{path:"_typography.scss",name:"_typography.scss"},usedBy:["typography--mixin--size"],_uid:"typography--mixin--font-size-responsive"},{description:"Print a typography size (font-size, line-height)\n",context:{type:"mixin",name:"size",code:'\n  $size: $name;\n  // Allow custom maps\n  @if (meta.type-of($name) == "string") {\n    $size: get-size($name);\n  }\n  @if ($changes) {\n    $size: map.merge($size, $changes);\n  }\n  $font-size: get-size-converted-value($size, "font-size");\n  $breakpoints: map.get($size, "breakpoints");\n  $responsive: map.get($size, "responsive");\n  $color: map.get($size, "color");\n\n  font-size: $font-size;\n  @if ($responsive) {\n    @include font-size-responsive($font-size, $responsive);\n  }\n  @if (not $only-font-size) {\n    font-weight: get-size-value($size, "font-weight");\n    font-family: get-size-value($size, "font-family");\n    line-height: get-size-converted-value($size, "line-height");\n    margin-top: get-size-converted-value($size, "margin-top");\n    margin-bottom: get-size-converted-value($size, "margin-bottom");\n    color: if($color, color.get($color), null);\n  }\n\n  // If they have breakpoints, process them\n  @if $breakpoints {\n    @each $name, $breakpoint in $breakpoints {\n      $direction: map.get($breakpoint, "direction");\n      @include breakpoint.from($name, $direction) {\n        @include size($breakpoint, null, $only-font-size);\n      }\n    }\n  }\n',line:{start:282,end:318}},parameter:[{type:"String",name:"nameOrMap",description:"Name to retrieve from sizes map or a unique size map that follows the API"},{type:"Map",name:"changes",description:"Modifications to be merged into size before using"}],group:["typography"],todo:["Idea: Should the maps value be processes when using the set-sizes, set? Instead of recalculated each time get-size is or get is used."],require:[{type:"mixin",name:"font-size-responsive",autofill:!0,item:"typography--mixin--font-size-responsive"},{type:"function",name:"get-size",autofill:!0,item:"typography--function--get-size"},{type:"function",name:"get-size-converted-value",autofill:!0,item:"typography--function--get-size-converted-value"},{type:"function",name:"get",autofill:!0,item:"base--function--get"},{type:"function",name:"get",autofill:!0,item:"base--function--get"},{type:"function",name:"get",autofill:!0,item:"base--function--get"},{type:"function",name:"get-size-value",autofill:!0,item:"typography--function--get-size-value"},{type:"function",name:"get-size-value",autofill:!0,item:"typography--function--get-size-value"},{type:"function",name:"get-size-converted-value",autofill:!0,item:"typography--function--get-size-converted-value"},{type:"function",name:"get-size-converted-value",autofill:!0,item:"typography--function--get-size-converted-value"},{type:"function",name:"get-size-converted-value",autofill:!0,item:"typography--function--get-size-converted-value"},{type:"function",name:"get",autofill:!0,item:"base--function--get"},{type:"function",name:"get",autofill:!0,item:"base--function--get"}],file:{path:"_typography.scss",name:"_typography.scss"},_uid:"typography--mixin--size"}],variables:[{description:"Module Settings\n",context:{type:"variable",name:"config",value:'(\n  "font-size" : 16px, \n  "font-family" : (ui-sans-serif, "Open Sans", Helvetica, Arial, sans-serif),\n  "font-family-sans" : (ui-sans-serif, "Open Sans", Helvetica, Arial, sans-serif),\n  "font-family-serif" : (Cambria, Georgia, serif),\n  "font-family-monospace" : (Menlo, Consolas, Monaco, monospace),\n  "font-weight" : inherit,\n  "font-weight-headline" : bold,\n  "font-weight-light" : 300,\n  "font-weight-normal" : normal,\n  "font-weight-semibold" : 600,\n  "font-weight-bold" : bold,\n  "line-height" : 1.5,\n  "line-height-dense": 1.3,\n  "line-height-spaced": 1.75,\n  "size-ratio": 2,\n  "size-line-height-ratio": 0.97,\n  "scale-steps": 5,\n  "responsive-change": 0.05vw, \n  "margin-bottom":  1em,\n  "margin-top":  false,\n  "letter-spacing-uppercase" : 0.04em,\n  "max-width" : 60rem,\n  "max-width-small" : 50rem\n)',scope:"default",line:{start:29,end:53}},type:"Map",property:[{type:"Number",name:"$config.font-size",description:"Default font size (use pixels, converted, is used for rem base)"},{type:"Number",name:"$config.font-family",description:"Default font family"},{type:"Number",name:"$config.font-family-monospace",description:"Base font-family for monospace"},{type:"Number",name:"$config.line-height",description:"Default line height"},{type:"Number",name:"$config.line-height-dense",description:"Default dense line height"},{type:"Number",name:"$config.size-ratio",description:"Font size scale when using preset sizes, ratio mixin)"},{type:"Number",name:"$config.size-line-height-ratio",description:"Default line height scaling (when using preset sizes, ratio mixin). Can shrink line-height as size increase if desrireable"},{type:"Number",name:"$config.responsive-change",description:"Amount to scale typography by browser's width (use viewport units)"},{type:"Number",name:"$config.margin",description:"Default margin for typography (like paragraphs)"}],group:["typography"],todo:["Idea: Should the maps value be processes when using the set-sizes, set? Instead of recalculated each time get-size is or get is used."],file:{path:"_typography.scss",name:"_typography.scss"},_uid:"typography--variable--config"},{description:"Default size presets\n",context:{type:"variable",name:"sizes",value:'(\n  "small-x" :       new-size(scale(-2)),\n  "small" :         new-size(scale(-1)),\n  "base" :          new-size(scale(0)),\n  "large" :         new-size(scale(1),   scale-line-height(1)),\n  "large-x" :       new-size(scale(2),   scale-line-height(2)),\n  "large-xx" :      new-size(scale(3),   scale-line-height(3)),\n  "large-xxx" :     new-size(scale(4),   scale-line-height(4)),\n  "h1" :            new-size(scale(6),   scale-line-height(6),   true),\n  "h2" :            new-size(scale(5),   scale-line-height(5),   true),\n  "h3" :            new-size(scale(4),   scale-line-height(4),   true),\n  "h4" :            new-size(scale(3),   scale-line-height(3),   true),\n  "h5" :            new-size(scale(2),   scale-line-height(2),   true),\n  "h6" :            new-size(scale(1),   scale-line-height(1),   true)\n)',scope:"default",line:{start:154,end:168}},type:"Map",property:[{type:"Number",name:"$size.name",description:"Name of size"},{type:"Number",name:"$size.name.font-size",description:"Font size in rems or pixels"},{type:"Number",name:"$size.name.line-height",description:"Line height (unitless)"},{type:"Number",name:"$size.name.responsive",description:"Apply responsive sizes"},{type:"Boolean",name:"$size.name.base-class",description:"This style should be included in the base (top can be overriden)"},{type:"Boolean",name:"$size.name.helper-class",description:"This style should be included in the helpers (overrides)"}],todo:["Add adaptive and use a map of breakpoints and whether it's up or down","Add headlines"],group:["typography"],file:{path:"_typography.scss",name:"_typography.scss"},_uid:"typography--variable--sizes"}],functions:[{description:"Get a config option\n",context:{type:"function",name:"get",code:"\n  @return utils.require-map-get($config, $name, 'typography [config]');\n",line:{start:67,end:69}},parameter:[{type:"Map",name:"changes",description:'Map of changes\n  @include typography.set-options(( "font-size" : 14px ));'}],group:["typography"],todo:["Idea: Should the maps value be processes when using the set-sizes, set? Instead of recalculated each time get-size is or get is used."],require:[{type:"function",name:"require-map-get",autofill:!0,item:"utils--function--require-map-get"},{type:"variable",name:"config",autofill:!0,item:"base--variable--config"}],file:{path:"_typography.scss",name:"_typography.scss"},_uid:"typography--function--get"},{description:"Get scale of the base font-size\n",context:{type:"function",name:"scale",code:'\n  @return calculate.ratio-scale-size(get("font-size"), get("size-ratio"), get("scale-steps"), $step);\n',line:{start:75,end:77}},parameter:[{type:"Number",name:"step",description:"Current size in the scale you want to calculate"}],return:{type:"Number",description:"Scaled value"},group:["typography"],todo:["Idea: Should the maps value be processes when using the set-sizes, set? Instead of recalculated each time get-size is or get is used."],require:[{type:"function",name:"ratio-scale-size",autofill:!0,item:"calculate--function--ratio-scale-size"},{type:"function",name:"get",autofill:!0,item:"base--function--get"},{type:"function",name:"get",autofill:!0,item:"base--function--get"},{type:"function",name:"get",autofill:!0,item:"base--function--get"}],file:{path:"_typography.scss",name:"_typography.scss"},usedBy:["base--mixin--base-keyframes-styles","base--mixin--base-keyframes-styles","base--mixin--base-keyframes-styles"],_uid:"typography--function--scale"},{description:"Get scale of the line-height\n",context:{type:"function",name:"scale-line-height",code:'\n  @return calculate.ratio-scale-size(get("line-height"), get("size-line-height-ratio"), get("scale-steps"), $step);\n',line:{start:84,end:86}},parameter:[{type:"Number",name:"step",description:"Current size in the scale you want to calculate"}],return:{type:"Number",description:"Scaled value"},todo:["Setup breakpoints"],group:["typography"],require:[{type:"function",name:"ratio-scale-size",autofill:!0,item:"calculate--function--ratio-scale-size"},{type:"function",name:"get",autofill:!0,item:"base--function--get"},{type:"function",name:"get",autofill:!0,item:"base--function--get"},{type:"function",name:"get",autofill:!0,item:"base--function--get"}],file:{path:"_typography.scss",name:"_typography.scss"},_uid:"typography--function--scale-line-height"},{description:"Convert pixel value to rem value based on typography $font-size\n",context:{type:"function",name:"rem",code:'\n  @if math.unit($pixels) == "px"  {\n    @return math.div($pixels, get("font-size")) * 1rem;\n  } @else {\n    @return $pixels + 1rem;\n  }\n',line:{start:92,end:98}},parameter:[{type:"Number",name:"pixels",description:"Pixel value to convert from"}],return:{type:"Number",description:"Rem value"},group:["typography"],todo:["Idea: Should the maps value be processes when using the set-sizes, set? Instead of recalculated each time get-size is or get is used."],require:[{type:"function",name:"get",autofill:!0,item:"base--function--get"}],file:{path:"_typography.scss",name:"_typography.scss"},usedBy:["typography--function--font-size","typography--function--unitless-line-height","typography--function--unitless-line-height","typography--function--get-size-converted-value"],_uid:"typography--function--rem"},{description:"Changes pixels to em\n",context:{type:"function",name:"em",code:'\n  @if (math.unit($value) == "px") {\n    $base: if($base, $base, get("font-size"));\n    @return math.div($base, $value) * 1em;\n  } @else  {\n    @return $value;\n  }\n',line:{start:105,end:112}},parameter:[{type:"Number",name:"value",description:"Pixel value to convert from"},{type:"Number",name:"base",description:"Conversion base (defaults to font-size)"}],return:{type:"Number",description:"Rem value"},group:["typography"],todo:["Idea: Should the maps value be processes when using the set-sizes, set? Instead of recalculated each time get-size is or get is used."],require:[{type:"function",name:"get",autofill:!0,item:"base--function--get"}],file:{path:"_typography.scss",name:"_typography.scss"},_uid:"typography--function--em"},{description:"Creates a size map \n- This is just an accelerator for creating a size map\n- You can pass your own size maps using set-sizes()\n",context:{type:"function",name:"new-size",code:'\n  @return (\n    "font-size": $font-size,\n    "font-weight" : if($is-headline, get("font-weight-headline"), null), \n    "line-height": $line-height,\n    "responsive" : true,\n    "helper-class" : if($is-headline, false, true),\n    "helper-class-prefixed" : true,\n    "base-class" : if($is-headline, true, false),\n    "base-class-prefixed" : false\n  );\n',line:{start:130,end:141}},parameter:[{type:"Number",name:"font-size",description:"Font size"},{type:"Number",name:"line-height",description:"Line height"},{type:"Boolean",name:"is-headline",description:"Is a headline"}],group:["typography"],todo:["Idea: Should the maps value be processes when using the set-sizes, set? Instead of recalculated each time get-size is or get is used."],require:[{type:"function",name:"get",autofill:!0,item:"base--function--get"}],file:{path:"_typography.scss",name:"_typography.scss"},_uid:"typography--function--new-size"},{description:"Get a size's map\n",context:{type:"function",name:"get-size",code:"\n  @return utils.require-map-get($sizes, $name, 'typography [size]');\n",line:{start:187,end:189}},parameter:[{type:"String",name:"name",description:"Name of size"}],return:{type:"Map"},group:["typography"],todo:["Idea: Should the maps value be processes when using the set-sizes, set? Instead of recalculated each time get-size is or get is used."],require:[{type:"function",name:"require-map-get",autofill:!0,item:"utils--function--require-map-get"},{type:"variable",name:"sizes",autofill:!0,item:"breakpoint--variable--sizes"}],file:{path:"_typography.scss",name:"_typography.scss"},usedBy:["typography--function--font-size","typography--mixin--size"],_uid:"typography--function--get-size"},{description:"Print a font-size for a given size\n",context:{type:"function",name:"font-size",code:'\n  $size: get-size($name);\n  $font-size: map.get($size, "font-size");\n  @return rem($font-size);\n',line:{start:195,end:199}},todo:["Remove doesn't work for breakpoints or responsive"],parameter:[{type:"String",name:"value",description:"Size name"}],group:["typography"],require:[{type:"function",name:"get-size",autofill:!0,item:"typography--function--get-size"},{type:"function",name:"get",autofill:!0,item:"base--function--get"},{type:"function",name:"rem",autofill:!0,item:"typography--function--rem"}],file:{path:"_typography.scss",name:"_typography.scss"},_uid:"typography--function--font-size"},{description:"Forces conversion to unitless line-height\n",context:{type:"function",name:"unitless-line-height",code:'\n  // Font size is rems, line-height is unkown\n  @if (math.is-unitless($line-height)) {\n    @return $line-height;\n  }\n  $unit: math.unit($line-height);\n  @if ($unit == "em") {\n    @return utility.strip-unit($line-height);\n  } @else if ($unit == "pixels" or $unit == "rem") {\n    $calc: math.div(rem($line-height), rem($font-size));\n    @return utility.strip-unit($calc);\n  } @else {\n    @error "ULU: Unable to convert to unitless line-height for: #{ $line-height }";\n  }\n',line:{start:205,end:219}},parameter:[{type:"Number",name:"line-height",description:"Line height size in px, em, or rem"},{type:"Number",name:"font-size",description:"Font size in px, em, or rem"}],group:["typography"],todo:["Idea: Should the maps value be processes when using the set-sizes, set? Instead of recalculated each time get-size is or get is used."],require:[{type:"function",name:"strip-unit",autofill:!0,item:"utility--function--strip-unit"},{type:"function",name:"rem",autofill:!0,item:"typography--function--rem"},{type:"function",name:"rem",autofill:!0,item:"typography--function--rem"},{type:"function",name:"strip-unit",autofill:!0,item:"utility--function--strip-unit"}],throw:["ULU: Unable to convert to unitless line-height for: #{ $line-height }"],file:{path:"_typography.scss",name:"_typography.scss"},usedBy:["typography--function--get-size-converted-value"],_uid:"typography--function--unitless-line-height"},{description:"Print a value from the size and convert it (to appropriate unit for framework)\n",context:{type:"function",name:"get-size-converted-value",code:'\n  // Font size is calculated differently\n  $value: map.get($size, $prop);\n  $font-size: map.get($size, "font-size");\n  $type: meta.type-of($value);\n  \n  @if ($value == false or $value == null) {\n    @return null;\n  // Numbers and true (default) need to be converted\n  } @else if ($value == true or $type == number) {\n    // Get default value\n    @if ($value == true)  {\n      $value: get($prop);\n    }\n    // Force line-height to be unitless\n    @if ($prop == "line-height") {\n      @return unitless-line-height($value, $font-size);\n    }\n    // Convert to REM\n    @if (math.unit($value) == "px") {\n      $value: rem($value);\n    }\n    @return $value;\n  } @else {\n    @return $value;\n  }\n',line:{start:224,end:250}},parameter:[{type:"Map",name:"size",description:"Size's map"},{type:"String",name:"props",description:"The property to get"}],group:["typography"],todo:["Idea: Should the maps value be processes when using the set-sizes, set? Instead of recalculated each time get-size is or get is used."],require:[{type:"function",name:"get",autofill:!0,item:"base--function--get"},{type:"function",name:"get",autofill:!0,item:"base--function--get"},{type:"function",name:"get",autofill:!0,item:"base--function--get"},{type:"function",name:"unitless-line-height",autofill:!0,item:"typography--function--unitless-line-height"},{type:"function",name:"rem",autofill:!0,item:"typography--function--rem"}],file:{path:"_typography.scss",name:"_typography.scss"},usedBy:["typography--mixin--size","typography--mixin--size","typography--mixin--size","typography--mixin--size"],_uid:"typography--function--get-size-converted-value"},{description:"Get a sizes property value that doesn't need conversion \n- Reason: Will map to default if user set's size prop to true\n",context:{type:"function",name:"get-size-value",code:"\n  $value: map.get($size, $prop);\n  // Default\n  @if ($value == true) {\n    $value: get($prop);\n  }\n  @return $value;\n",line:{start:258,end:265}},parameter:[{type:"Map",name:"size",description:"Size's map"},{type:"String",name:"props",description:"The property to get"}],group:["typography"],todo:["Idea: Should the maps value be processes when using the set-sizes, set? Instead of recalculated each time get-size is or get is used."],require:[{type:"function",name:"get",autofill:!0,item:"base--function--get"},{type:"function",name:"get",autofill:!0,item:"base--function--get"}],file:{path:"_typography.scss",name:"_typography.scss"},usedBy:["typography--mixin--size","typography--mixin--size"],_uid:"typography--function--get-size-value"}],placeholders:[]}},n=i(24),a=Object(n.a)(s,(function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[i("h1",{attrs:{id:"typography"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#typography"}},[e._v("#")]),e._v(" Typography")]),e._v(" "),i("h2",{attrs:{id:"mixins"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#mixins"}},[e._v("#")]),e._v(" Mixins")]),e._v(" "),i("h3",{attrs:{id:"set"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[e._v("#")]),e._v(" set()")]),e._v(" "),i("p",[e._v("Change modules $config")]),e._v(" "),i("SassdocItem",{attrs:{item:e.$options.sassdocGroup.mixins[0]}}),e._v(" "),i("h3",{attrs:{id:"word-break"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#word-break"}},[e._v("#")]),e._v(" word-break()")]),e._v(" "),i("p",[e._v("Break word stradegy")]),e._v(" "),i("SassdocItem",{attrs:{item:e.$options.sassdocGroup.mixins[1]}}),e._v(" "),i("h3",{attrs:{id:"set-sizes"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#set-sizes"}},[e._v("#")]),e._v(" set-sizes()")]),e._v(" "),i("p",[e._v("Update the typography presets map")]),e._v(" "),i("SassdocItem",{attrs:{item:e.$options.sassdocGroup.mixins[2]}}),e._v(" "),i("h3",{attrs:{id:"font-size-responsive"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#font-size-responsive"}},[e._v("#")]),e._v(" font-size-responsive()")]),e._v(" "),i("p",[e._v("Print's the responsive type formula")]),e._v(" "),i("SassdocItem",{attrs:{item:e.$options.sassdocGroup.mixins[3]}}),e._v(" "),i("h3",{attrs:{id:"size"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#size"}},[e._v("#")]),e._v(" size()")]),e._v(" "),i("p",[e._v("Print a typography size (font-size, line-height)")]),e._v(" "),i("SassdocItem",{attrs:{item:e.$options.sassdocGroup.mixins[4]}}),e._v(" "),i("h2",{attrs:{id:"variables"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#variables"}},[e._v("#")]),e._v(" Variables")]),e._v(" "),i("h3",{attrs:{id:"config"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#config"}},[e._v("#")]),e._v(" $config")]),e._v(" "),i("p",[e._v("Module Settings")]),e._v(" "),i("SassdocItem",{attrs:{item:e.$options.sassdocGroup.variables[0]}}),e._v(" "),i("h3",{attrs:{id:"sizes"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#sizes"}},[e._v("#")]),e._v(" $sizes")]),e._v(" "),i("p",[e._v("Default size presets")]),e._v(" "),i("SassdocItem",{attrs:{item:e.$options.sassdocGroup.variables[1]}}),e._v(" "),i("h2",{attrs:{id:"functions"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#functions"}},[e._v("#")]),e._v(" Functions")]),e._v(" "),i("h3",{attrs:{id:"get"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#get"}},[e._v("#")]),e._v(" get()")]),e._v(" "),i("p",[e._v("Get a config option")]),e._v(" "),i("SassdocItem",{attrs:{item:e.$options.sassdocGroup.functions[0]}}),e._v(" "),i("h3",{attrs:{id:"scale"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#scale"}},[e._v("#")]),e._v(" scale()")]),e._v(" "),i("p",[e._v("Get scale of the base font-size")]),e._v(" "),i("SassdocItem",{attrs:{item:e.$options.sassdocGroup.functions[1]}}),e._v(" "),i("h3",{attrs:{id:"scale-line-height"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#scale-line-height"}},[e._v("#")]),e._v(" scale-line-height()")]),e._v(" "),i("p",[e._v("Get scale of the line-height")]),e._v(" "),i("SassdocItem",{attrs:{item:e.$options.sassdocGroup.functions[2]}}),e._v(" "),i("h3",{attrs:{id:"rem"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#rem"}},[e._v("#")]),e._v(" rem()")]),e._v(" "),i("p",[e._v("Convert pixel value to rem value based on typography $font-size")]),e._v(" "),i("SassdocItem",{attrs:{item:e.$options.sassdocGroup.functions[3]}}),e._v(" "),i("h3",{attrs:{id:"em"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#em"}},[e._v("#")]),e._v(" em()")]),e._v(" "),i("p",[e._v("Changes pixels to em")]),e._v(" "),i("SassdocItem",{attrs:{item:e.$options.sassdocGroup.functions[4]}}),e._v(" "),i("h3",{attrs:{id:"new-size"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#new-size"}},[e._v("#")]),e._v(" new-size()")]),e._v(" "),i("p",[e._v("Creates a size map")]),e._v(" "),i("ul",[i("li",[e._v("This is just an accelerator for creating a size map")]),e._v(" "),i("li",[e._v("You can pass your own size maps using set-sizes()")])]),e._v(" "),i("SassdocItem",{attrs:{item:e.$options.sassdocGroup.functions[5]}}),e._v(" "),i("h3",{attrs:{id:"get-size"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#get-size"}},[e._v("#")]),e._v(" get-size()")]),e._v(" "),i("p",[e._v("Get a size's map")]),e._v(" "),i("SassdocItem",{attrs:{item:e.$options.sassdocGroup.functions[6]}}),e._v(" "),i("h3",{attrs:{id:"font-size"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#font-size"}},[e._v("#")]),e._v(" font-size()")]),e._v(" "),i("p",[e._v("Print a font-size for a given size")]),e._v(" "),i("SassdocItem",{attrs:{item:e.$options.sassdocGroup.functions[7]}}),e._v(" "),i("h3",{attrs:{id:"unitless-line-height"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#unitless-line-height"}},[e._v("#")]),e._v(" unitless-line-height()")]),e._v(" "),i("p",[e._v("Forces conversion to unitless line-height")]),e._v(" "),i("SassdocItem",{attrs:{item:e.$options.sassdocGroup.functions[8]}}),e._v(" "),i("h3",{attrs:{id:"get-size-converted-value"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#get-size-converted-value"}},[e._v("#")]),e._v(" get-size-converted-value()")]),e._v(" "),i("p",[e._v("Print a value from the size and convert it (to appropriate unit for framework)")]),e._v(" "),i("SassdocItem",{attrs:{item:e.$options.sassdocGroup.functions[9]}}),e._v(" "),i("h3",{attrs:{id:"get-size-value"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#get-size-value"}},[e._v("#")]),e._v(" get-size-value()")]),e._v(" "),i("p",[e._v("Get a sizes property value that doesn't need conversion")]),e._v(" "),i("ul",[i("li",[e._v("Reason: Will map to default if user set's size prop to true")])]),e._v(" "),i("SassdocItem",{attrs:{item:e.$options.sassdocGroup.functions[10]}}),e._v(" "),i("h2",{attrs:{id:"placeholders"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#placeholders"}},[e._v("#")]),e._v(" Placeholders")])],1)}),[],!1,null,null,null);t.default=a.exports}}]);