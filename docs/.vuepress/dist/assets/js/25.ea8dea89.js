(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{403:function(e,t,i){"use strict";i.r(t);var a={sassdocGroup:{mixins:[{description:"Change modules $config\n",context:{type:"mixin",name:"set",code:"\n  $config: map.merge($config, $changes) !global;\n",line:{start:26,end:28}},parameter:[{type:"Map",name:"changes",description:'Map of changes\n  @include module-name.set(( "property" : value ));'}],group:["breakpoint"],require:[{type:"variable",name:"config",autofill:!0,item:"base--variable--config"},{type:"variable",name:"config",autofill:!0,item:"base--variable--config"}],file:{path:"_breakpoint.scss",name:"_breakpoint.scss"},_uid:"breakpoint--mixin--set"},{description:"Update the breakpoint sizes map\n",context:{type:"mixin",name:"set",code:"\n  $sizes: map.merge($sizes, $changes) !global;\n",line:{start:56,end:58}},parameter:[{type:"Map",name:"changes",description:"A map to merge into the breakpoints map"}],example:[{type:"scss",code:'@include breakpoints.set((\n  "medium" : 50em,\n  "jumbo" : 100em\n));',description:"Changing the medium breakpoint and adding jumbo"}],group:["breakpoint"],require:[{type:"variable",name:"sizes",autofill:!0,item:"breakpoint--variable--sizes"},{type:"variable",name:"sizes",autofill:!0,item:"breakpoint--variable--sizes"}],file:{path:"_breakpoint.scss",name:"_breakpoint.scss"},_uid:"breakpoint--mixin--set"},{description:"Create a media query that matches the min-width for a given size\n",context:{type:"mixin",name:"min",code:'\n  // Adding the small fraction to prevent overlap\n  $min: utils.require-map-get($sizes, $size, "breakpoints"); \n  @media screen and (min-width: $min) {\n    @content;\n  }\n',line:{start:72,end:78}},parameter:[{type:"Number",name:"size",description:"The name of the breakpoint bsize"}],example:[{type:"scss",code:'@include breakpoints.min("small") {\n  // Your styles\n}'}],group:["breakpoint"],content:"",require:[{type:"function",name:"require-map-get",autofill:!0,item:"utils--function--require-map-get"},{type:"variable",name:"sizes",autofill:!0,item:"breakpoint--variable--sizes"}],file:{path:"_breakpoint.scss",name:"_breakpoint.scss"},usedBy:["breakpoint--mixin--embed-for-scripts"],_uid:"breakpoint--mixin--min"},{description:"Create a media query that matches the max-width for a given size\n",context:{type:"mixin",name:"max",code:'\n  // Adding the small fraction to prevent overlap\n  $max: utils.require-map-get($sizes, $size) - get("gap"); \n  @media screen and (max-width: $max) {\n    @content;\n  }\n',line:{start:87,end:93}},parameter:[{type:"Number",name:"size",description:"The name of the breakpoint size"}],example:[{type:"scss",code:'@include breakpoints.max("medium") {\n  // Your styles\n}'}],group:["breakpoint"],content:"",require:[{type:"function",name:"require-map-get",autofill:!0,item:"utils--function--require-map-get"},{type:"function",name:"get",autofill:!0,item:"base--function--get"},{type:"variable",name:"sizes",autofill:!0,item:"breakpoint--variable--sizes"}],file:{path:"_breakpoint.scss",name:"_breakpoint.scss"},_uid:"breakpoint--mixin--max"},{description:"Create a media query that matches the min-width and max-width sizes\n",context:{type:"mixin",name:"min-max",code:'\n  // Adding the small fraction to prevent overlap\n  $min: utils.require-map-get($sizes, $size-min, "breakpoints"); \n  $max: utils.require-map-get($sizes, $size-max, "breakpoints") - get("gap"); \n  @media screen and (min-width: $min) and (max-width: $max) {\n    @content;\n  }\n',line:{start:102,end:109}},parameter:[{type:"Number",name:"size",description:"The name of the breakpoint size"}],example:[{type:"scss",code:'@include breakpoints.min-max("small", "medium") {\n  // Your styles\n}'}],group:["breakpoint"],content:"",require:[{type:"function",name:"require-map-get",autofill:!0,item:"utils--function--require-map-get"},{type:"function",name:"require-map-get",autofill:!0,item:"utils--function--require-map-get"},{type:"function",name:"get",autofill:!0,item:"base--function--get"},{type:"variable",name:"sizes",autofill:!0,item:"breakpoint--variable--sizes"},{type:"variable",name:"sizes",autofill:!0,item:"breakpoint--variable--sizes"}],file:{path:"_breakpoint.scss",name:"_breakpoint.scss"},_uid:"breakpoint--mixin--min-max"},{description:"Attaches breakpoints to an element psuedo content for access via script\nUse with ulu/js/breakpoints. Breakpoints always min-width (upwards)\n",context:{type:"mixin",name:"embed-for-scripts",code:'\n  &:before {\n    display: none;\n    content: get("null-name");\n    @each $size, $breakpoint in $sizes {\n      @include min($size) {\n        content: $size;\n      }\n    }\n  }\n',line:{start:129,end:139}},group:["breakpoint"],require:[{type:"mixin",name:"min",autofill:!0,item:"breakpoint--mixin--min"},{type:"function",name:"get",autofill:!0,item:"base--function--get"},{type:"variable",name:"sizes",autofill:!0,item:"breakpoint--variable--sizes"}],file:{path:"_breakpoint.scss",name:"_breakpoint.scss"},_uid:"breakpoint--mixin--embed-for-scripts"}],variables:[{description:"Module Settings\n",context:{type:"variable",name:"config",value:'(\n  "base":      16px,\n  "gap":       0.01em,\n  "null-name": "none",\n  "default" :  "small"\n)',scope:"default",line:{start:16,end:21}},type:"Map",property:[{type:"Number",name:"$config.base",description:"Assumed pixel base, can change based on users font settings so this is just o get us in the ballpark). Note this is not the base font size but the user agent's or user's browser preferernce. This number is just being used for calculating estimated em sizes from average base. Since pixels are easier to understand but since we allow the user to set their font size. All of our css is relative to that, including most of the layout (rems, other relative units)"},{type:"Number",name:"$config.gap",description:"The amount to offset min from max media queries incase you are using both (ie prevent overlap)"},{type:"String",name:"$config.null-name",description:"The name of the space from 0 to the first breakpoint (doesn't really matter) used when passing breakpoints to JS via content property"},{type:"String",name:"$config.default",description:"the name of the breakpont that is considered the major change (ie desktop to mobile) used by other modules/components"}],group:["breakpoint"],file:{path:"_breakpoint.scss",name:"_breakpoint.scss"},_uid:"breakpoint--variable--config"},{description:"The default breakpoint sizes (targets are not precise, using em's)\n",context:{type:"variable",name:"sizes",value:'(\n  "small"  : calculate.pixel-to-em(680px, get("base")),\n  "medium" : calculate.pixel-to-em(1200px, get("base")),\n  "large"  : calculate.pixel-to-em(1500px, get("base"))\n)',scope:"default",line:{start:42,end:46}},type:"Map",group:["breakpoint"],file:{path:"_breakpoint.scss",name:"_breakpoint.scss"},usedBy:["base--mixin--base-typography-styles","breakpoint--mixin--set","breakpoint--mixin--set","breakpoint--mixin--min","breakpoint--mixin--max","breakpoint--mixin--min-max","breakpoint--mixin--min-max","breakpoint--mixin--embed-for-scripts","calculate--function--ratio-scale-size","components--mixin--component-button-styles","components--mixin--component-button-styles","helpers--mixin--helper-display-styles","helpers--mixin--helper-typography-styles","typography--mixin--set-sizes","typography--mixin--set-sizes","typography--function--get-size"],_uid:"breakpoint--variable--sizes"}],functions:[{description:"Get a config option\n",context:{type:"function",name:"get",code:"\n  @return utils.require-map-get($config, $name, 'breakpoint [config]');\n",line:{start:34,end:36}},parameter:[{type:"Map",name:"name",description:'Name of property\n  @include module-name.get("property");'}],group:["breakpoint"],require:[{type:"function",name:"require-map-get",autofill:!0,item:"utils--function--require-map-get"},{type:"variable",name:"config",autofill:!0,item:"base--variable--config"}],file:{path:"_breakpoint.scss",name:"_breakpoint.scss"},_uid:"breakpoint--function--get"}],placeholders:[]}},n=i(24),s=Object(n.a)(a,(function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[i("h1",{attrs:{id:"breakpoint"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#breakpoint"}},[e._v("#")]),e._v(" Breakpoint")]),e._v(" "),i("h2",{attrs:{id:"mixins"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#mixins"}},[e._v("#")]),e._v(" Mixins")]),e._v(" "),i("h3",{attrs:{id:"set"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[e._v("#")]),e._v(" set()")]),e._v(" "),i("p",[e._v("Change modules $config")]),e._v(" "),i("SassdocItem",{attrs:{item:e.$options.sassdocGroup.mixins[0]}}),e._v(" "),i("h3",{attrs:{id:"set-2"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#set-2"}},[e._v("#")]),e._v(" set()")]),e._v(" "),i("p",[e._v("Update the breakpoint sizes map")]),e._v(" "),i("SassdocItem",{attrs:{item:e.$options.sassdocGroup.mixins[1]}}),e._v(" "),i("h3",{attrs:{id:"min"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#min"}},[e._v("#")]),e._v(" min()")]),e._v(" "),i("p",[e._v("Create a media query that matches the min-width for a given size")]),e._v(" "),i("SassdocItem",{attrs:{item:e.$options.sassdocGroup.mixins[2]}}),e._v(" "),i("h3",{attrs:{id:"max"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#max"}},[e._v("#")]),e._v(" max()")]),e._v(" "),i("p",[e._v("Create a media query that matches the max-width for a given size")]),e._v(" "),i("SassdocItem",{attrs:{item:e.$options.sassdocGroup.mixins[3]}}),e._v(" "),i("h3",{attrs:{id:"min-max"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#min-max"}},[e._v("#")]),e._v(" min-max()")]),e._v(" "),i("p",[e._v("Create a media query that matches the min-width and max-width sizes")]),e._v(" "),i("SassdocItem",{attrs:{item:e.$options.sassdocGroup.mixins[4]}}),e._v(" "),i("h3",{attrs:{id:"embed-for-scripts"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#embed-for-scripts"}},[e._v("#")]),e._v(" embed-for-scripts()")]),e._v(" "),i("p",[e._v("Attaches breakpoints to an element psuedo content for access via script\nUse with ulu/js/breakpoints. Breakpoints always min-width (upwards)")]),e._v(" "),i("SassdocItem",{attrs:{item:e.$options.sassdocGroup.mixins[5]}}),e._v(" "),i("h2",{attrs:{id:"variables"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#variables"}},[e._v("#")]),e._v(" Variables")]),e._v(" "),i("h3",{attrs:{id:"config"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#config"}},[e._v("#")]),e._v(" $config")]),e._v(" "),i("p",[e._v("Module Settings")]),e._v(" "),i("SassdocItem",{attrs:{item:e.$options.sassdocGroup.variables[0]}}),e._v(" "),i("h3",{attrs:{id:"sizes"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#sizes"}},[e._v("#")]),e._v(" $sizes")]),e._v(" "),i("p",[e._v("The default breakpoint sizes (targets are not precise, using em's)")]),e._v(" "),i("SassdocItem",{attrs:{item:e.$options.sassdocGroup.variables[1]}}),e._v(" "),i("h2",{attrs:{id:"functions"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#functions"}},[e._v("#")]),e._v(" Functions")]),e._v(" "),i("h3",{attrs:{id:"get"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#get"}},[e._v("#")]),e._v(" get()")]),e._v(" "),i("p",[e._v("Get a config option")]),e._v(" "),i("SassdocItem",{attrs:{item:e.$options.sassdocGroup.functions[0]}}),e._v(" "),i("h2",{attrs:{id:"placeholders"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#placeholders"}},[e._v("#")]),e._v(" Placeholders")])],1)}),[],!1,null,null,null);t.default=s.exports}}]);