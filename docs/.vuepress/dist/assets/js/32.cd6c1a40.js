(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{417:function(e,t,n){"use strict";n.r(t);var i={sassdocGroup:{mixins:[{description:"Change modules $config\n",context:{type:"mixin",name:"set",code:"\n  $config: map.merge($config, $changes) !global;\n",line:{start:24,end:26}},parameter:[{type:"Map",name:"changes",description:"Map of changes"}],example:[{type:"scss",code:'@include module-name.set(( "property" : value ));',description:"General example, replace module-name with module's name"}],group:["utils"],require:[{type:"variable",name:"config",autofill:!0,item:"base--variable--config"},{type:"variable",name:"config",autofill:!0,item:"base--variable--config"}],file:{path:"_utils.scss",name:"_utils.scss"},_uid:"utils--mixin--set"},{description:"Ensure a value is present in the list, throw an error if not found\n",context:{type:"mixin",name:"require-list-has",code:"\n  $index: list.index($list, $value) != null;\n  @if ($index == null) {\n    @error 'ULU: Unable to find item \"#{ $value }\" in #{ $context } list.';\n  }\n",line:{start:61,end:66}},parameter:[{type:"List",name:"list",description:"The map to get the value from"},{type:"String",name:"value",description:"The value to search for in the list"},{type:"String",name:"context",description:"The context of using this function for debugging help"}],group:["utils"],require:[],throw:["ULU: Unable to find item "],file:{path:"_utils.scss",name:"_utils.scss"},usedBy:["utils--mixin--require-list-contains"],_uid:"utils--mixin--require-list-has"},{description:"Require that the list only is only made up of allowed items\n",context:{type:"mixin",name:"require-list-contains",code:"\n  @each $item in $list {\n    @include require-list-has($allowed, $item, $context);\n  }\n",line:{start:72,end:76}},parameter:[{type:"List",name:"allowed",description:"The list of allowed items"},{type:"String",name:"list",description:"The list to test allowed against"}],group:["utils"],require:[{type:"mixin",name:"require-list-has",autofill:!0,item:"utils--mixin--require-list-has"}],file:{path:"_utils.scss",name:"_utils.scss"},_uid:"utils--mixin--require-list-contains"},{description:"Returns true if we should include something (used for output checking)\n",context:{type:"mixin",name:"file-header",code:'\n  @if ("file-header-comments") {\n/* \n=============================================================================\n#{ $context }:#{ $name }\n============================================================================= \n*/\n  }\n',line:{start:91,end:99}},parameter:[{type:"List",name:"context",description:"The root area of the framework this file comes from"},{type:"List",name:"name",description:"The name of the specific area/file (optional)"}],group:["utils"],require:[],file:{path:"_utils.scss",name:"_utils.scss"},_uid:"utils--mixin--file-header"}],variables:[{description:"Module Settings\n",context:{type:"variable",name:"config",value:'(\n  "debug-maps": true,\n  "file-header-comments": true\n)',scope:"default",line:{start:15,end:18}},type:"Map",property:[{type:"Boolean",name:"$config.debug-maps",description:"Debugs include map print outs"},{type:"Boolean",name:"$config.file-header-comments",description:"Remove comment headers if you'd like"}],group:["utils"],file:{path:"_utils.scss",name:"_utils.scss"},_uid:"utils--variable--config"}],functions:[{description:"Get a config option\n",context:{type:"function",name:"get",code:"\n  @return require-map-get($config, $name, 'utils');\n",line:{start:33,end:35}},parameter:[{type:"Map",name:"name",description:"Name of property"}],example:[{type:"scss",code:'@include module-name.get("property");',description:"General example, replace module-name with module's name"}],group:["utils"],require:[{type:"function",name:"require-map-get",autofill:!0,item:"utils--function--require-map-get"},{type:"variable",name:"config",autofill:!0,item:"base--variable--config"}],file:{path:"_utils.scss",name:"_utils.scss"},_uid:"utils--function--get"},{description:"Get a required value from a map, throw an error if not found\n- Remeber that that maps cannot intentionally use null (use false instead, if trying to avoid output if unconfigured)\n",context:{type:"function",name:"require-map-get",code:'\n  $value: map.get($map, $key);\n  @if ($value != null) {\n    @return $value;\n  } @else {\n    @if (get("debug-maps")) {\n      @debug $map;\n    }\n    @error \'ULU: Unable to find  "#{ $key }" in #{ $context } map.\';\n  }\n',line:{start:44,end:54}},parameter:[{type:"Map",name:"map",description:"The map to get the value from"},{type:"String",name:"key",description:"The key in the map to get value from"},{type:"String",name:"context",description:"The context of using this function for debugging help"}],return:{type:"*",description:"The value from the map"},group:["utils"],require:[{type:"function",name:"get",autofill:!0,item:"base--function--get"},{type:"function",name:"get",autofill:!0,item:"base--function--get"}],throw:["ULU: Unable to find  "],file:{path:"_utils.scss",name:"_utils.scss"},usedBy:["base--function--get","breakpoint--function--get","breakpoint--mixin--min","breakpoint--mixin--max","breakpoint--mixin--min-max","breakpoint--mixin--min-max","button--function--get","calculate--function--get","color--function--get","color--function--get-context","components--function--get","element--function--get","element--function--get-rule-style","element--function--get-rule-margin","grid--function--get","grid--mixin--create","grid--mixin--create","helpers--function--get","layout--function--get","path--function--get-alias","selector--function--get","typography--function--get","typography--function--get-size","units--function--get","utils--function--get"],_uid:"utils--function--require-map-get"},{description:"Returns true if we should include something (map of booleans)\n",context:{type:"function",name:"included",code:"\n  $value: map.get($includes, $name);\n  @return $value == true;\n",line:{start:82,end:85}},parameter:[{type:"String",name:"name",description:"Name of item to see if it's included"},{type:"Map",name:"includes",description:"Map of includes"}],group:["utils"],require:[{type:"function",name:"get",autofill:!0,item:"base--function--get"}],file:{path:"_utils.scss",name:"_utils.scss"},_uid:"utils--function--included"},{description:"",context:{type:"function",name:"if-type",code:"\n  @if meta.type-of($value) == $type {\n    @return $value;\n  } @else {\n    @return $fallback;\n  }\n",line:{start:106,end:112}},parameter:[{type:"String",name:"type",description:"type of value it should be"},{type:"String",name:"value",description:"the value to provide if it is that type"},{type:"String",name:"fallback",description:"the fallback value"}],group:["utils"],require:[],file:{path:"_utils.scss",name:"_utils.scss"},_uid:"utils--function--if-type"},{description:"",context:{type:"function",name:"number-info",code:'\n  $is-number: meta.type-of($number) != \'number\';\n  $is-unitless: math.is-unitless($number);\n  @if ($is-unitless or not $is-number) {\n    @return (\n      "unit": null,\n      "value": $number \n    );\n  } @else {\n    @return (\n      "unit" : math.unit($value), \n      "value": math.div($number, ($number * 0 + 1))\n    );\n  }\n',line:{start:118,end:132}},parameter:[{type:"String",name:"number",description:"Number to get meta info for"}],return:{type:"Map",description:"With properties (unit, value)"},group:["utils"],require:[],file:{path:"_utils.scss",name:"_utils.scss"},_uid:"utils--function--number-info"},{description:"Repeatable pattern in core\n",context:{type:"function",name:"map-merge-or-overwrite",code:"\n  @if $deep {\n    @return map.deep-merge($original, $changes);\n  } @else if $overwrite {\n    @return $changes;\n  } @else {\n    @return map.merge($original, $changes);\n  }\n",line:{start:136,end:144}},group:["utils"],require:[],file:{path:"_utils.scss",name:"_utils.scss"},usedBy:["color--mixin--set-contexts","typography--mixin--set-sizes"],_uid:"utils--function--map-merge-or-overwrite"},{description:"Helps in providing a dynamic fallback for modules whose defaults should come from another\n",context:{type:"function",name:"function-fallback",code:"\n  // If there was already a value return it else resolve through passed function\n  @if ($value == true)  {\n    $fn: map.get($lookup, $prop);\n    @if ($fn) {\n      @return meta.call($fn, $prop);\n    } \n  }\n  @return $value;\n",line:{start:152,end:161}},parameter:[{type:"String",name:"prop",description:"Property trying to get fallback for"},{type:"*",name:"value",description:"The value that may need the fallback"},{type:"Map",name:"lookup",description:"Map of properties to functions (use sass:meta > meta.get-function to populate)"}],return:{type:"*",description:"The user's original value, or if the value is true get the default value from the provided function"},group:["utils"],require:[{type:"function",name:"get",autofill:!0,item:"base--function--get"}],file:{path:"_utils.scss",name:"_utils.scss"},usedBy:["button--function--get"],_uid:"utils--function--function-fallback"}],placeholders:[]}},s=n(24),a=Object(s.a)(i,(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"utils"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#utils"}},[e._v("#")]),e._v(" Utils")]),e._v(" "),n("h2",{attrs:{id:"mixins"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mixins"}},[e._v("#")]),e._v(" Mixins")]),e._v(" "),n("h3",{attrs:{id:"set"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[e._v("#")]),e._v(" set()")]),e._v(" "),n("p",[e._v("Change modules $config")]),e._v(" "),n("SassdocItem",{attrs:{item:e.$options.sassdocGroup.mixins[0]}}),e._v(" "),n("h3",{attrs:{id:"require-list-has"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#require-list-has"}},[e._v("#")]),e._v(" require-list-has()")]),e._v(" "),n("p",[e._v("Ensure a value is present in the list, throw an error if not found")]),e._v(" "),n("SassdocItem",{attrs:{item:e.$options.sassdocGroup.mixins[1]}}),e._v(" "),n("h3",{attrs:{id:"require-list-contains"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#require-list-contains"}},[e._v("#")]),e._v(" require-list-contains()")]),e._v(" "),n("p",[e._v("Require that the list only is only made up of allowed items")]),e._v(" "),n("SassdocItem",{attrs:{item:e.$options.sassdocGroup.mixins[2]}}),e._v(" "),n("h3",{attrs:{id:"file-header"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#file-header"}},[e._v("#")]),e._v(" file-header()")]),e._v(" "),n("p",[e._v("Returns true if we should include something (used for output checking)")]),e._v(" "),n("SassdocItem",{attrs:{item:e.$options.sassdocGroup.mixins[3]}}),e._v(" "),n("h2",{attrs:{id:"variables"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#variables"}},[e._v("#")]),e._v(" Variables")]),e._v(" "),n("h3",{attrs:{id:"config"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#config"}},[e._v("#")]),e._v(" $config")]),e._v(" "),n("p",[e._v("Module Settings")]),e._v(" "),n("SassdocItem",{attrs:{item:e.$options.sassdocGroup.variables[0]}}),e._v(" "),n("h2",{attrs:{id:"functions"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#functions"}},[e._v("#")]),e._v(" Functions")]),e._v(" "),n("h3",{attrs:{id:"get"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#get"}},[e._v("#")]),e._v(" get()")]),e._v(" "),n("p",[e._v("Get a config option")]),e._v(" "),n("SassdocItem",{attrs:{item:e.$options.sassdocGroup.functions[0]}}),e._v(" "),n("h3",{attrs:{id:"require-map-get"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#require-map-get"}},[e._v("#")]),e._v(" require-map-get()")]),e._v(" "),n("p",[e._v("Get a required value from a map, throw an error if not found")]),e._v(" "),n("ul",[n("li",[e._v("Remeber that that maps cannot intentionally use null (use false instead, if trying to avoid output if unconfigured)")])]),e._v(" "),n("SassdocItem",{attrs:{item:e.$options.sassdocGroup.functions[1]}}),e._v(" "),n("h3",{attrs:{id:"included"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#included"}},[e._v("#")]),e._v(" included()")]),e._v(" "),n("p",[e._v("Returns true if we should include something (map of booleans)")]),e._v(" "),n("SassdocItem",{attrs:{item:e.$options.sassdocGroup.functions[2]}}),e._v(" "),n("h3",{attrs:{id:"if-type"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#if-type"}},[e._v("#")]),e._v(" if-type()")]),e._v(" "),n("SassdocItem",{attrs:{item:e.$options.sassdocGroup.functions[3]}}),e._v(" "),n("h3",{attrs:{id:"number-info"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#number-info"}},[e._v("#")]),e._v(" number-info()")]),e._v(" "),n("SassdocItem",{attrs:{item:e.$options.sassdocGroup.functions[4]}}),e._v(" "),n("h3",{attrs:{id:"map-merge-or-overwrite"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#map-merge-or-overwrite"}},[e._v("#")]),e._v(" map-merge-or-overwrite()")]),e._v(" "),n("p",[e._v("Repeatable pattern in core")]),e._v(" "),n("SassdocItem",{attrs:{item:e.$options.sassdocGroup.functions[5]}}),e._v(" "),n("h3",{attrs:{id:"function-fallback"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#function-fallback"}},[e._v("#")]),e._v(" function-fallback()")]),e._v(" "),n("p",[e._v("Helps in providing a dynamic fallback for modules whose defaults should come from another")]),e._v(" "),n("SassdocItem",{attrs:{item:e.$options.sassdocGroup.functions[6]}}),e._v(" "),n("h2",{attrs:{id:"placeholders"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#placeholders"}},[e._v("#")]),e._v(" Placeholders")])],1)}),[],!1,null,null,null);t.default=a.exports}}]);