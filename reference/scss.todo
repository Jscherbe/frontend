SCSS Todos:
  ☐ Consider exposing a utility mixin in list-lines for manually printing the styles when needed (compression, used in places we can't add classes)
  ☐ Update pseudo selectors to new double color syntax
    * We don't support any browsers that still use the original syntax
    * update to modern before and after psuedo element for colons (switch to double colons)
  ☐ Bundle Size Reduction
    ☐ Make left cap styles an element mixin (so they can be compressed)
    ☐ Apply the absolute-fill mixin
      * check all uses of position absolute to see if they are using these styles. If so, we can replace that with this mixin.
      * not site-modal. doesn't have bottom or 100% 
      list:
        ✔ card.scss @done
          * multiple
        ✔ ratio-box @done
        ✔ hero @done
          * multiple
        ✔ overlay-section @done
        ☐ vignette
  ✔ Popover - Make setting to disable the masked box-shadow arrow @done
    * Incase it's not needed
    ✔ Or/and make the mask size calculated from box-shadow width @done
  ✔ Button verbose (remove margins if last-child) @done
    * Think about adding another width property (min(100%, get("width))) so that it doesn't overflow in flexbox situations
  ✔ See about using the extra :after element on popover arrow to create the border/shadow needed (since the :before is overlapping) @minor @done
  ✔ Fix card horizontal (is centering content horizontally [content has max width]) @done
  ☐ Include common container we need full/fit/fill
  ✔ Should we remove scrollbar on nav-stip (ie. layout.remove-scrollbar())? @done
    * It's there as a precaution and is sometimes used
    * Is an issue for accessibility
  ☐ Can we have color palette and assignments and tint/shade
    * Originally before custom properties, we were able to tint/shade/modify color assignments (ie color.get), once custom properties and keywords were set to pass through (which is needed) this made it impossible to use it this way. Is there a way to workaround this (other data ie palette that is reserved for pure colors, carrying more info along with custom property version [ie. object with value and pure color]). I think we don't want to make it too complicated but if a solution exists that makes all of this definable in color module it might be more user friendly? One easy solution but not necessarily the right one is to give warnings if attempting to adjust an non color 
  ✔ Data table color for thead th @done
  ✔ Form theme remove margins and paddings on fieldset legend @done
  ☐ Think about merging the css grid components (tile-grid, card-grid, flipcard-grid) @important
    ☐ At least we need to consider adding breakpoints to the card-grid or make the interfaces match
      * not sure that we can reuse the CSS need to double check how these are setup
  ☐ Card grid should have map of modifiers (with changes to columsn and gap)
    * compact should live within this
  ☐ Should typography size pass through if the value is a unit
    * Allowing this to be used like color-get where native values (ie. non string and non map) would be passed through so that users may pass font-size's through type-size settings
    * Original core button module uses the name "font-size" for type-size so this would fix that without breaking things or needing to update property names
  ✔ Why is there root and elements base modules (elements has root too?) @done
  ✔ Get rid of "replace module-name with module's name" when it has been replaced with actual modules name @done
  ☐ See about documenting when a component doesn't run through the selectors module to get it's base classname
  ✔ Prepare for new SCSS release @done
    ✔ Fix nested rules warnings @done
    ✔ Remove @import @done
      * Also ulu base styles are on top of site but some of the site stuff like (custom variables need to be printed at top?). Maybe relates to having something dedicated to print css-vars from ulu (declarations), user can opt out by ommiting base/cssvars? Needs more thought 
  ☐ Add button-nav and button-group
  ☐ Add table component @important!
    ☐ In progress, need to look through other table components we use and see if this needs further options
      * Column widths, etc
      * Should probably have the table have borders and make modifier to remove them
  ☐ Add table wrap component
  ☐ Need to create something to make color easier (ie. foreground, background)
    * This was the original reason for color-contexts (maybe we can leverage those for foreground, background in success, danger, etc)
  ✔ Need to setup tag module @important @done
  ✔ Look at other modules that should be setup @done
  ✔ Coing back to the idea about padding-x padding-y on container @setup @not-implemented @done
    ✔ Setup @done
      * Makes it simpler for calculations but it also means extra properties
      * There are a lot of modules that offer padding and margin, maybe they can all be open ended?
        * Refactor the get-container-padding-x() to use a util function for grabbing 4 unit box offsets [margin, padding]
          * Make it work no matter the number of items in the list ie margin: 2em 1em 0; 
          * Then configs can be simpler across the board and modules can use (not sure about naming) 
            * like utils.get-box-offset($list-or-value, $ends: true) or separate functions?
              * utils.get-box-offset-x, utils.get-box-offset-y, utils.get-box-offset-top, utils.get-box-offset-bottom, utils.get-box-offset-left, utils.get-box-offset-right
                * Where x and y will return left or top? falling back to right or bottom? (not sure about that)
                * Could require that these types of interfaces are either (single value, double value, four value)
                * Can't see any scenario where 3 sides would be used (offseting an image in a card / bleeding to one side)
                  * Unlikely and should probably be a specific override in user stylesheet
                  * That's where maybe either throwing an erro for incorrect syntax of box-offset list or
                  * Allowing it but returning the larger number of a given access (ie. for x check left and right return largest)
                  * Think about this more, would make implementing properties like this easy and allow the user simpler (known/css) like config, while allowing modules to do calculations on either offset
                  * Think if offset is the best word to describe this
                * Note, the main util function that resolves the values should return a map of information (top, left, bottom, right)
                  * Functions for convience should use this information and return the appropriate value
                  * Naming notes, get-box-offsets, get-box-spacing-sides, get-spacing-info() [winner]
    ✔ Is the name good or too long? @done
    ✔ Setup for containers in layout @done
  ☐ Data Grid
    ☐ I think we can refactor to gap now
      * Still use flexbox
      ☐ Deprecate current module, incase a site needs IE support
      ☐ Document that older browsers are not supported for module
      ☐ Once the code is simpler add options for flexbox related layouts and we can use this with columns that fill, etc
    ☐ Column Rules Align to Gutter need breakpoints and need to work with gutter scales
      * maybe this should be optional, to omit if unnessary
    ☐ Row Rules should work with gutter breakpoints and with gutter scales
      * maybe this should be optional, to omit if unnessary
    ☐ Add init to grid setup so that rules can be hidden until ready
      * Could have transition on color (transparent when not init'd)
  ✔ Get rid of psuedo class type colors? @done
    * Should we prefer just kabab case for everything?
  ✔ Namespace keyframes @done
  ✔ Make css-icon--menu-to-close use css animation instead @done
    * Fade in-out-in (so the css can stay simple)
    * Could also move back to justified
  ✔ Add active state to buttons @done
  ☐ Card overlay height min-content to break out of aspect ratio if needed
  ☐ Create button-group for toolbars/swtichers
  ☐ Overlap with tab styling and nav-strip. Note nav-strip can be used for tabs we just need to add the correct selectors for the active state
    * Pros of the tabs module
      * Print stuff (pretty minor could just be a helper or something)
      * Container/panel styling? 
      * Already has macros
        * Macros could be refactored to use nav-strip
        * Could be an add on for nav-strip
          * nav-strip-panel (for tabpanel)
            * This could be easy to adjust and refactor
  ☐ Go through the card overlay, can we adjust the card grid to have an auto fill like tile grid
  ☐ Consider adding the button active state to the button core?
    ☐ Versus specific
  ☐ Add button nav
  ✔ For menu-stack (get rid of rotation) @done
  ✔ Css Icons add 3 bar icon (menu hamburger) @started(24-10-07 10:35) @done @lasted(1w23h56m51s)
    * Use borders (four borders)

  ✔ Make sure modal styles still work with resizer @important @done
  ☐ Make sure all color values go through color get (in modules)
  ☐ Accordion carrot icon swap vs. icon rotate. How would we handle that? Modifier? (if not rotate, user has to give 2 images).
    * Look into using css icons and supporting both methods
    * Accordion add css icon active modifier is-active have activating selector option and build the selector. The user can specify other selectors
    * No need for default, custom icons do their own thing in user style sheet include a Nixon to create the active selector for the icon. Make the transition time a module setting. Maybe make animation core module to have global setting or maybe add to element like duration and timing. Then we need fullbacks which are ok I guess
    * Maybe instead of fallbacks we put fallback methods on core modules ie element.get-as-fallback(key, value)
    Or have function util.fallback
    The issue with this technique vs fallback map is the fallback method system while more verbose allows any user to grab computed property vs having to match implementation. Which is helpful for third party user who may not be aware of value that are or are not defined (complex cases) but honking it through
  ☐ Could tint/shade custom properties if passes to mixins in the future @idea
    * Need to think this all the way through before setting anything like this up
    * Browser compatablity started in 2023 (not that great)
    * Not sure this would have the affect that would be wanted 
      * In different themes (ie. light/dark) the shading or tinting may not work for all themes (guess this would be a used decision)
    * Could be additional mixin color-css-shade color-css-tint
    * See https://codepen.io/Jscherbe/pen/abeOjoN
  ☐ Should container have defaults by default (ie preset ones)
    ☐ Should we add margins for defaults (ie margin-small)
      * We can then get rid of site-margin variables and use config
    ☐ Need to see how well reponsive containers work again, much simpler but the ability to not be able to set the mobile margin is probably a reason to move away from that for the default, then have the one breakpoint
      * I don't think it needs to support mutiple breakpoints for the presets really the main margin and the mobile margin are all that's needed. If user has other margin needs they can setup custom containers and use their own variables or add custom properties to config (ie "margin-medium")
  ☐ Setup Flipcard scss module (and test js)
  ☐ Setup Slider scss module (and test js)
  ☐ Explore ways to make multiple color palettes for css-vars easier? @priority-low
  ☐ Solution for fallback colors in user side?
    ☐ Some utility to pass values or variables from so that if undefined user gets notice but the value is left null or default?
  ☐ Make button default styles have no hover @important
  ☐ Fix examples for how to use the set mixins
  ☐ Idea: scaffolding for configs
  ☐ Change color-context to background by default?
  ☐ Should we have the typography sizes print out in two different modules?
    * Originally this way so that some sizes could be utilities (overrides) (like type-large)
      and some can be base (top of stylesheet, can be overridden by components, overrides, etc).
      This makes it flexible
    ☐ At the least the code in both modules should be a shared typography utility?
  ✘ Remove calc fallback in typography so that font-size can be variables etc @cancelled
    * Note: The mixin is still needed because font size can be adaptive
      * Should we work around this
  ☐ Add table styling module
  ☐ Apply the new breakpoint.from-each and utils.map-contains-any
    * Where appropriate, may not be another need for utils.map-contains-any
  ☐ Change all psuedo selectors to "::" ie .selector::after
  ☐ Need to check all module names are correct and set mixins have the correct error names
  ☐ Fix all typos 
  ☐ Make sure all arguments and config properties are documented (sassdoc)
  ☐ Tag module needs to be set up
  ☐ WYSIWYG (excludes) - This should be refacotred to dedicated mixins to push exlcudes
    ☐ Then remove list lines and add it to its's own module and call mixin
  ☐ Update flipcard to use utils mixin that pulls specific padding. This will allow users to pass different formats of padding (ie: (x), (x,y) (x,y,z,) (w,x,y,z))

  Documentation:
    - setup config documentation for the following components
      ✔ scss/components/_captioned-figure.scss @done
      ✔ scss/components/_data-table.scss @done
      ☐ scss/components/_form-theme.scss
      ✔ scss/components/_hero.scss @done
      ✔ scss/components/_popover.scss @done
      ☐ scss/components/_pull-quote.scss
      ☐ scss/components/_scroll-slider.scss
      ☐ scss/components/_skip-link.scss
      ☐ scss/components/_spoke-spinner.scss
      ☐ scss/components/_tile-grid-overlay.scss
      ✔ scss/components/_vignette.scss @done