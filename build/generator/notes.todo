Streams:
  ☐ Should you be able to use streams?
  ☐ Would I ever use this with a large dataset?
    ☐ How would it work?
      * Maybe break the generator up from the page processing (markdown/etc) and make that a plugin
      * Then make the generator simpler (API) that just handles I/O and template routing
      * Break away from thinking of everything as pages (ie. input = output)
      * also what if we stop thinking about it in terms of html but just I/O (mapping something to output fs)
      * and maybe streams aren't supported but the generator is built in a way something like that could
      * be hooked in ie. use() or something
      *
      * I guess that's a question about the streams. They would be used for async data, but would the 
      * async part on the apps end be during read and apply to model/schema or on output. Or would it 
      * need to support both. Also is this even worth worrying about      
      *
      * how would I support the magic linking of items by uid vs paths, to allow moving things around
      * Would this be done in the plugin? And isn't the generator's responsiblity
      * 
      * HtmlPagesPlugin() or parser?
      * - Responsible for globing directories of files 
      * - Matching them to a parser/transformer
      * - Transforming their content into HTML (for generator) 
      * - Keeping metadata in the object (to be used in generator schema/templating on user side)
      * - Extra, should allow user to define relationships (uid) and reference these in hyperlinks
      *   Note that it should be supported in other attributes, could be an option (if we parse actual HTML)
      *   convert it to object structure and recursivley check attribute settings, or... Maybe use another
      *   to post this plugin's output? Aliases Plugin, maybe it not even based on HTML but string replacement
      *   Could be faster and allow for no configuration of attributes, etc. Could be avoided by not using it
      *   and creating another similiar plugin or by using static paths.
      * - Extra, would be nice if this allowed for the linking of assets within to (images, etc). Might be an
      *   argument for the HTML parser post templating/markdown parsing. To go through convert magic 
      *   references to static one's. Wouldn't that change, once this is mapped to the output schema?
      *   how to allow for it there without coupling? Maybe output schema pairing isn't what the generator
      *   does? Seems like the generator would be useless. Unless node's returned in the data from this
      *   plugin contain there reference for use in site templating. And wouldn't this plugin return a schema
      *   since that's part of it's purpose (to mirror the parsed directory). How does the user extend
      *   the schema? Ie. adding data driven pages? Can they hook into the results of the plugin to 
      *   then modify it? Maybe the schema itself is a class, so the user has one API for creating, modifying
      *   the schema? Unsure about this
      * SiteGenerator()
      * - Consumes data (input) (ie. results of DirectoryParserPlugin) 
      * - Pairs data with output model/schema (structure)
      * - Prints output model/schema and sends nodes through templates
      *   - At this time templates will have access to all data and schema

      * - Matches it to templates

Could this serve, watch files and then update what's needed (versus, reparsing)
* Like vue/react (only update affected templates)
* Maybe going a different direction

What about rethinking this as just mapping
* There's input and there's output
* Input Map / Output Map
* Input loads sources and preps them for there output version
* Output links input map items to output map
* Output handles final form of ...



Content:
  Pages:
    - ...
  Resources:
    - ...
  Authors: 
    - ...

Output:
  index.html
  authors/
    index.html (view)
  guides/
    index.html (page)
    example/
      index.html (page)
  resources/
    index.html (view)
    resource-example.
      index.html
