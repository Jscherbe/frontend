////
/// testing
/// @group calculate
////

@use "sass:math";
@use "sass:map";
@use "utils";

/// Module Settings
/// @type Map
/// @prop {Number} $config.responsive-change Default responsive amount to modify items using responsive-property mixin

$config: (
  "responsive-change": 0.5vw
) !default;

/// Change modules $config
/// @param {Map} $changes Map of changes
///   @include module-name.set(( "property" : value ));
@mixin set($changes) {
  $config: map.merge($config, $changes) !global;
}

/// Get a config option
/// @param {Map} $name Name of property
///   @include module-name.get("property");

@function get($name) {
  @return utils.require-map-get($config, $name, "calculate [config]");
}

/// Calculate the size of something at a given scale (percentage/exponential)
/// @param {Number} $base The number the scale starts at
/// @param {Number} $ratio The amount the scale changes over one set
/// @param {Number} $sizes The number of steps in the scale
/// @param {Number} $size The step you are trying to calculate
/// @return {Number}

@function ratio-scale-size($base, $ratio, $sizes, $size) {
  @return $base * math.pow($ratio, math.div($size, $sizes));
}

/// Convert from pixel to em
/// @param {Number} $pixels The number the scale starts at
/// @param {Number} $base How many pixels equal 1em
/// @return {Number} Em Conversion

@function pixel-to-em($pixels, $base: 16px) {
  @return math.div($pixels, $base) + 1em;
}

/// Provides user with a fallback for a calc that's just an enhancement
/// @param {String} $property The CSS property to set
/// @param {*} $value The value to set on the property
/// @param {Css} $responsive-change The amount to change (vw or vh units) (combined with unit past)

@mixin responsive-property(
  $property, 
  $value, 
  $responsive-change: get("responsive-change")
) {
  #{ $property } : $value;
  #{ $property } : calc(#{ $value } + #{ $responsive-change });
}