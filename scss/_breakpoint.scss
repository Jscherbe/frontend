////
/// @group breakpoint
////

@use "sass:map";
@use "calculate";
@use "utils";

/// Module Settings
/// @type Map
/// @prop {Number} base  [16px] Assumed pixel base, can change based on users font settings so this is just o get us in the ballpark). Note this is not the base font size but the user agent's or user's browser preferernce. This number is just being used for calculating estimated em sizes from average base. Since pixels are easier to understand but since we allow the user to set their font size. All of our css is relative to that, including most of the layout (rems, other relative units)
/// @prop {Number} gap  [0.01em] The amount to offset min from max media queries incase you are using both (ie prevent overlap)
/// @prop {String} null-name ["none"] The name of the space from 0 to the first breakpoint (doesn't really matter) used when passing breakpoints to JS via content property
/// @prop {String} default ["small"] The name of the breakpont that is considered the major change (ie desktop to mobile) used by other modules/components

$config: (
  "base":      16px,
  "gap":       0.01em,
  "null-name": "none",
  "default" :  "small"
) !default;

/// Change modules $config
/// @example scss Change default name
///   @include breakpoint.set(( "default" : "mini" ));
/// @param {Map} $changes Map of changes

@mixin set($changes) {
  $config: map.merge($config, $changes) !global;
}

/// Get a config option
/// @example scss Get default breakpoint name
///   $default: breakpoint.get("default");
/// @param {Map} $name Name of property
/// @return {*} Property Value

@function get($name) {
  @return utils.require-map-get($config, $name, 'breakpoint [config]');
}


/// The default breakpoint sizes (targets are not precise, using em's)
/// - Map of breakpoints
/// - Each property is the breakpoints name
/// - Each value is that breakpoints point (set in em)
/// @type Map

$sizes: (
  "small"  : calculate.pixel-to-em(680px, get("base")),
  "medium" : calculate.pixel-to-em(1200px, get("base")),
  "large"  : calculate.pixel-to-em(1500px, get("base"))
) !default;

/// Update the breakpoint sizes map
/// @example scss Changing the medium breakpoint and adding jumbo
///   @include breakpoints.set((
///     "medium" : 50em,
///     "jumbo" : 100em
///   ));
/// @param {Map} $changes A map to merge into the breakpoints map
/// @param {Map} $merge-mode [null] Merge stradegy see, utils.map-merge options

@mixin set-sizes($changes, $merge-mode: null) {
  $sizes: utils.map-merge($sizes, $changes, $merge-mode) !global;
}

/// Get all breakpoint sizes (ie. $sizes) 
@function get-sizes() {
  @return $sizes;
}

/// Get a specific size
/// @param {String} $size The name of the size to get
/// @return {Number} The sizes value
 
@function get-size($size) {
  @return utils.require-map-get($sizes, $size, "breakpoint size");
}

/// Get a size's value 
/// @param {Boolean} $max [false] Get the max value
/// @return {Number} The value for the given size

@function get-size-value($size, $max: false) {
  @if ($max) {
    @return get-size($size) - get("gap");
  } @else {
    @return get-size($size);
  }
}
/// Check if a specific size exist
/// @param {String} $name The breakpoint size to check if exists
/// @return {Boolean} 

@function exists($name) {
  $size: map.get($sizes, $name);
  @return if($size != null, true, false);
}

/// Create a media query that matches the min-width for a given size
/// @example scss
///   @include breakpoints.min("small") {
///     // Your styles
///   }
/// @example css
///   @media screen and (min-width: 42.5em) {
///      // Your Styles
///   }
/// @param {String} $size The name of the breakpoint size

@mixin min($size) {
  // Adding the small fraction to prevent overlap
  $min: get-size-value($size); 
  @media screen and (min-width: $min) {
    @content;
  }
}

/// Create a media query that matches the max-width for a given size
/// @example scss
///   @include breakpoints.max("medium") {
///     // Your styles
///   }
/// @example css
///   @media screen and (max-width: 42.4em) {
///      // Your Styles
///   }
/// @param {Number} $size The name of the breakpoint size

@mixin max($size) {
  // Adding the small fraction to prevent overlap
  $max: get-size-value($size, true); 
  @media screen and (max-width: $max) {
    @content;
  }
}

/// Create a media query that matches between two breakpoint sizes
/// @example scss
///   @include breakpoints.min-max("small", "medium") {
///     // Your styles
///   }
/// @example css
///   @media screen and (min-width: 42.5) and (max-width: 75em) {
///      // Your Styles
///   }
/// @param {String} $size-min The name of the smallest breakpoint size
/// @param {String} $size-max The name of the largest breakpoint size

@mixin min-max($size-min, $size-max) {
  // Adding the small fraction to prevent overlap
  $min: get-size($size-min); 
  $max: get-size($size-max); 
  @media screen and (min-width: $min) and (max-width: $max) {
    @content;
  }
}

/// Create a media query from a specific size in either direction 
/// - This is for mostly programmatic usage, so that a user could pass a breakpoint confiuration in either direction
/// - This way you don't need to repeat conditions (ie if min ... else ...)
/// @example scss
///   $size: map.get($user-breakpoint, "size");
///   $dir: map.get($user-breakpoint, "direction");
///   @include breakpoints.from($size, $dir) {
///     // Your styles
///   }
/// @param {String} $name The name of the breakpoint size
/// @param {String} $direction The direction the media query should target (min|up, max|down)

@mixin from($name, $direction: "min") {
  @if ($direction == "min" or $direction == "up") {
    @include min($name) {
      @content;
    }
  } @else if ($direction == "max" or $direction == "down") {
    @include max($name) {
      @content;
    }
  } @else {
    @error "ULU: Mixin error (breakpoint.from), incorrect argument '$direction' use either (min, max, up, down)";
  }
}


/// Utility Method for iterating over a map of breakpoints and apply styles
/// @example scss
///   @include breakpoints.fromEach($breakpoints) using ($props) {
///     width: map.get($props, "width");
///   }
/// @param {String} $breakpoints A map with breakpoints direction will be pulled from each items "direction" property, if direction is missing and no breakpoint will wrap the
/// @param {String} $options A map with options to change the behavior


@mixin from-each($breakpoints, $options: ()) {
  $directionRequired: map.get($options, "directionRequired");
  @each $name, $props in $breakpoints {
    $direction: map.get($props, "direction");
    // If direction print with breakpoint
    @if ($direction) {
      @include from($name, $direction) {
        @content($props);
      }
    // If user requires direction throw error if missing
    } @else if ($directionRequired) {
      @debug $breakpoints;
      @error 'ULU: Missing required "direction" in breakpoints map (above).';
    // Else direction wasn't required print without media query (useful for default style)
    } @else {
      @content($props);
    }
  }
}

/// Attaches breakpoints to an element pseudo content for access via script
/// - Note you can also use cssvar.declare-breakpoints to get a similar implementation with css custom-properties
/// - Use with ulu/js/breakpoints. Breakpoints always min-width (upwards) for javascript setup

@mixin embed-for-scripts() {
  &:before {
    display: none;
    content: get("null-name");
    @each $size, $breakpoint in $sizes {
      @include min($size) {
        content: $size;
      }
    }
  }
}
