////
/// @group button-verbose
/// A button that has additional markup (ie. page with description for example). Used on things like linear pagination (up next).
////

@use "sass:map";
@use "sass:meta";

@use "../utils";
@use "../color";
@use "../element";
@use "../selector";
@use "../layout";

// Used for function fallback
$-fallbacks: (
  "border-radius" : (
    "function" : meta.get-function("get", false, "element"),
    "property" : "border-radius"
  ),
  "box-shadow" : (
    "function" : meta.get-function("get", false, "element"),
    "property" : "box-shadow"
  ),
  "box-shadow-hover" : (
    "function" : meta.get-function("get", false, "element"),
    "property" : "box-shadow-hover"
  )
);

/// Module Settings
/// @type Map
/// @prop {Color} background-color [white] Background color for the button.
/// @prop {Color} background-color-hover [link] Background color for the button when hovered or focused.
/// @prop {String} border-radius [border-radius] Border radius of the button.
/// @prop {CssValue} box-shadow [true] Box shadow for the button. If set to true, uses default box-shadow.
/// @prop {CssValue} box-shadow-hover [true] Box shadow for the button when hovered or focused. If set to true, uses default box-shadow-hover.
/// @prop {String} color [type] Text color for the button.
/// @prop {String} color-hover [type] Text color for the button when hovered or focused.
/// @prop {Color} icon-color [gray] Color for button icons.
/// @prop {Color} icon-color-hover [null] Optional color for icon when hovered
/// @prop {Dimension} icon-font-size [1.25rem] Font size for the button.
/// @prop {Number} line-height [1.2] Line height for button text.
/// @prop {Dimension} margin [1em] Margin for the button.
/// @prop {Dimension} margin-inline [0.75em] Margin for the button when using the inline modifier.
/// @prop {Dimension} min-width [20rem] Min-width of the button.
/// @prop {Dimension} padding-x [0.65em] Horizontal padding of the button.
/// @prop {Dimension} padding-y [1em] Vertical padding of the button.
/// @prop {String} title-color [link] Color of the title of the button.
/// @prop {String} title-color-hover [link-hover] Color of the title of the button when hovered or focused.
/// @prop {Dimension} title-margin [0.5em] Margin for the button's title.
/// @prop {Boolean} left-cap [false] Enable left cap style 
/// @prop {Color} left-cap-color ["link"] The color for the left cap
/// @prop {color} left-cap-color-hover ["link-hover"] The color for the left cap when the button is hovered
/// @prop {Number} left-cap-color-hover [0.5rem] Width of the cap
/// @prop {Number} left-cap-match-radius [true] The cap should have be rounded to match the parent's border radius

$config: (
  "background-color" : white,
  "background-color-hover" : #F7F8F7,
  "border-radius" : true,
  "box-shadow" : true,
  "box-shadow-hover" : true,
  "color" : "type",
  "color-hover" : "type",
  "icon-color": gray,
  "icon-color-hover": null,
  "icon-font-size" : 1.25rem,
  "line-height" : 1.2,
  "margin" : 1em,
  "margin-inline" : 0.75em,
  "min-width": 20rem,
  "padding-x": 0.65em,
  "padding-y": 1em,
  "title-color": "link",
  "title-margin" : 0.5em,
  "title-color-hover" : "link-hover",
  "left-cap" : false,
  "left-cap-color" : "link",
  "left-cap-color-hover" : "link-hover",
  "left-cap-width" : 0.5rem,
  "left-cap-match-radius" : true
) !default;

/// Change modules $config
/// @param {Map} $changes Map of changes
/// @example scss
///   @include ulu.component-button-verbose-set(( "property" : value ));

@mixin set($changes) {
  $config: map.merge($config, $changes) !global;
}

/// Get a config option
/// @param {Map} $name Name of property
/// @example scss
///   @include ulu.component-button-verbose-get(( "property" : value ));

@function get($name) {
  $value: utils.require-map-get($config, $name, "button-verbose [config]");
  @return utils.function-fallback($name, $value, $-fallbacks);
}

/// Prints component styles
/// @example scss
///   @include ulu.component-button-verbose-styles();
/// @example html {preview} - Basic Example
///   <a href="#" class="button-verbose">
///     <strong class="button-verbose__title">Example Link</strong>
///     <span class="button-verbose__body">This is the body</span>
///     <span class="button-verbose__icon fas fa-arrow-right" aria-hidden="true"></span>
///   </a>

@mixin styles {
  $prefix: selector.class("button-verbose");
  
  #{ $prefix } {
    text-decoration: none;
    border-radius: get("border-radius");
    box-shadow: get("box-shadow");
    line-height: get("line-height");
    position: relative;
    display: block;
    margin-bottom: get("margin");
    max-width: 100%;
    width: get("min-width");
    background-color: color.get(get("background-color"));
    padding: get("padding-y") get("padding-x");
    padding-right: (get("padding-x") * 2) + 1em;
    color: color.get(get("color"));
    text-align: left;
    // Add border like cap
    @if get("left-cap") {
      padding-left: calc(get("padding-x") + get("left-cap-width"));
      @include layout.left-cap(
        $cap-color: get("left-cap-color"), 
        $cap-width: get("left-cap-width"), 
        $offset: 0, 
        $match-radius: get("border-radius")
      )
    }
    &:hover {
      color: color.get(get("color-hover"));
      background-color: color.get(get("background-color-hover"));
      box-shadow: get("box-shadow-hover");
      @if get("title-color-hover") {
        #{ $prefix }__title  {
          color: color.get(get("title-color-hover"));
        }
      }
      @if get("icon-color-hover") {
        #{ $prefix }__icon  {
          color: color.get(get("icon-color-hover"));
        }
      }
      @if (get("left-cap") and get("left-cap-color-hover")) {
        &::before {
          background-color: color.get(get("left-cap-color-hover"));
        }
      }
    }
  }
  #{ $prefix }__title,
  #{ $prefix }__body {
    display: block;
    &:first-child {
      margin-bottom: get("title-margin");
    }
  }
  #{ $prefix }__title {
    color: color.get(get("title-color"));
  }
  #{ $prefix }__icon {
    position: absolute;
    top: 50%;
    right: get("padding-x");
    transform: translateY(-50%);
    font-size: get("icon-font-size");
    color: color.get(get("icon-color"));
  }
  #{ $prefix }--inline {
    display: inline-block;
    margin-right: get("margin-inline");
    &:last-child {
      margin-right: 0;
    }
  }
  #{ $prefix }--full-width {
    width: 100%;
  }
}