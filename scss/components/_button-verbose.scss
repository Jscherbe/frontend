////
/// @group button-verbose
/// A button that has additional markup (ie. page with description for example). Used on things like linear pagination (up next).
////

@use "sass:map";
@use "sass:meta";

@use "../utils";
@use "../color";
@use "../element";

// Used for function fallback
$-fallbacks: (
  "border-radius" : (
    "function" : meta.get-function("get", false, "element"),
    "property" : "border-radius"
  ),
  "box-shadow" : (
    "function" : meta.get-function("get", false, "element"),
    "property" : "box-shadow"
  ),
  "box-shadow-hover" : (
    "function" : meta.get-function("get", false, "element"),
    "property" : "box-shadow-hover"
  )
);

/// Module Settings
/// @type Map
/// @prop {Color} background-color [white] Background color for the button.
/// @prop {Color} background-color-hover [link] Background color for the button when hovered or focused.
/// @prop {String} border-radius [border-radius] Border radius of the button.
/// @prop {CssValue} box-shadow [true] Box shadow for the button. If set to true, uses default box-shadow.
/// @prop {CssValue} box-shadow-hover [true] Box shadow for the button when hovered or focused. If set to true, uses default box-shadow-hover.
/// @prop {String} color [type] Text color for the button.
/// @prop {String} color-hover [type] Text color for the button when hovered or focused.
/// @prop {Color} icon-color [gray] Color for button icons.
/// @prop {Dimension} icon-font-size [1.25rem] Font size for the button.
/// @prop {Number} line-height [1.2] Line height for button text.
/// @prop {Dimension} margin [1em] Margin for the button.
/// @prop {Dimension} margin-inline [0.75em] Margin for the button when using the inline modifier.
/// @prop {Dimension} min-width [20rem] Min-width of the button.
/// @prop {Dimension} padding-x [0.65em] Horizontal padding of the button.
/// @prop {Dimension} padding-y [1em] Vertical padding of the button.
/// @prop {String} title-color [link] Color of the title of the button.
/// @prop {String} title-color-hover [link-hover] Color of the title of the button when hovered or focused.
/// @prop {Dimension} title-margin [0.5em] Margin for the button's title.

$config: (
  "background-color" : white,
  "background-color-hover" : "link",
  "border-radius" : "border-radius",
  "box-shadow" : true,
  "box-shadow-hover" : true,
  "color" : "type",
  "color-hover" : "type",
  "icon-color": gray,
  "icon-font-size" : 1.25rem,
  "line-height" : 1.2,
  "margin" : 1em,
  "margin-inline" : 0.75em,
  "min-width": 20rem,
  "padding-x": 0.65em,
  "padding-y": 1em,
  "title-color": "link",
  "title-margin" : 0.5em,
  "title-color-hover" : "link-hover",
) !default;

/// Change modules $config
/// @param {Map} $changes Map of changes
/// @example scss
///   @include ulu.component-button-verbose-set(( "property" : value ));

@mixin set($changes) {
  $config: map.merge($config, $changes) !global;
}

/// Get a config option
/// @param {Map} $name Name of property
/// @example scss
///   @include ulu.component-button-verbose-get(( "property" : value ));

@function get($name) {
  $value: utils.require-map-get($config, $name, "button-verbose [config]");
  @return utils.function-fallback($name, $value, $-fallbacks);
}

/// Prints component styles
/// @example scss
///  @include ulu.component-button-verbose-styles();

@mixin styles {
  .button-verbose {
    text-decoration: none;
    border-radius: element.get(get("border-radius"));
    box-shadow: get("box-shadow");
    line-height: get("line-height");
    position: relative;
    display: block;
    margin-bottom: get("margin");
    max-width: 100%;
    width: get("min-width");
    background-color: get("background-color");
    padding: get("padding-y") get("padding-x");
    padding-right: (get("padding-x") * 2) + 1em;
    color: color.get(get("color"));
    &:hover {
      color: color.get(get("color-hover"));
      background-color: color.get(get("background-color-hover"));
      box-shadow: get("box-shadow-hover");
      .button-verbose__title  {
        color: color.get(get("title-color-hover"));
      }
    }
  }
  .button-verbose__title {
    display: block;
    margin-bottom: get("title-margin");
    color: color.get(get("title-color"));
  }
  .button-verbose__icon {
    position: absolute;
    top: 50%;
    right: get("padding-x");
    transform: translateY(-50%);
    font-size: get("icon-font-size");
    color: get("icon-color");
  }
  .button-verbose--inline {
    display: inline-block;
    margin-right: get("margin-inline");
  }
  .button-verbose--full-width {
    width: 100%;
  }
}