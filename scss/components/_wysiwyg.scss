////
/// @group wysiwyg
////
/// For auto formatting general HTML elements (used around editor/body text)

@use "sass:list";

@use "../element";
@use "../typography";


/// Module Settings
/// @type Map

$config: (
  "ul-excluded-selectors" : (".list-lines"),
) !default;

/// Change modules $config
/// @param {Map} $changes Map of changes
///   @include module-name.set(( "property" : value ));

@mixin set($changes) {
  $config: map.merge($config, $changes) !global;
}

/// Get a config option
/// @param {Map} $name Name of property
///   @include module-name.get("property");

@function get($name) {
  @return utils.require-map-get($config, $name, "component-wysiwyg [config]");
}

// Note this is setup so that it can be used for separate stylesheets (ie. tinymce or ckeditor)
@mixin styles($in-selector: true) {
  @if ($in-selector) {
    .wysiwyg {
      @include _styles;
    }
  } @else {
    @include _styles;
  }
}

// Internal mixin
@mixin _styles() {
  a:not([class]) {
    @include element.link($visited: true, $active: true);
  }
  $ul-excluded-selectors: get("ul-excluded-selectors");
  $ul-excluded-selector: list.join($ul-excluded-selectors, (), ",");
  ul:not(#{ $ul-excluded-selector }) {
    @include element.styles-unordered-list();
  }
  ol {
    @include element.styles-ordered-list(inherit);
  }
  ul,
  ol {
    margin-bottom: element.get("margin");
  }
  h2 {
    @include typography.size("h2");
  }
  h3 {
    @include typography.size("h3");
  }
  h4 {
    @include typography.size("h4");
  }
  h5 {
    @include typography.size("h5");
  }
  h6 {
    @include typography.size("h6");
  }
  img {
    margin-bottom: element.get("margin");
    margin-top: element.get("margin");
  }
}
