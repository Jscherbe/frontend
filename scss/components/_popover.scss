////
/// @group button
////

// NOTE: This is an updated version that uses floating UI

@use "sass:math";
@use "sass:map";
@use "sass:meta";

@use "../selector";
@use "../typography";
@use "../utils";
@use "../color";
@use "../layout";
@use "../element";

// Used for function fallback
$-fallbacks: (
  "box-shadow" : (
    "function" : meta.get-function("get", false, "element"),
    "property" : "box-shadow-above",
  ),
  "z-index" : (
    "function" : meta.get-function("get", false, "layout"),
    "property" : "z-index-fixed",
  ),
);

/// Module Settings
/// @type Map
/// @prop {Number} $config.color Type color
/// @prop {Number} $config.background-color Popover background color
/// @prop {Number} $config.padding Padding for popover
/// @prop {Number} $config.padding-large Padding for large popover
/// @prop {Number} $config.max-width Max width for popover (default 90% viewport width)
/// @prop {Number} $config.width Width for popovers
/// @prop {Number} $config.width-large Width for large popovers
/// @prop {Number} $config.width-large-x Width for large-x popovers
/// @prop {Number} $config.max-height Max height of the inner content of popover
/// @prop {Number} $config.type-size Set a type size (see typography)
/// @prop {Number} $config.z-index Change default z-index
/// @prop {Number} $config.box-shadow Box shadow
/// @prop {Number} $config.box-shadow-footer Box shadow for footer
/// @prop {Number} $config.border-radius Border radius
/// @prop {Number} $config.arrow-size Arrow size (should match JS setting)
/// @prop {Number} $config.tooltip-background-color Background color for tooltip type popovers
/// @prop {Number} $config.tooltip-padding Padding for tooltip type popovers
/// @prop {Number} $config.tooltip-color Color for tooltip type popovers

$config: (
  "color"                   : inherit,
  "background-color"        : white,
  "padding"                 : 1rem,
  "padding-large"           : 2rem,
  "max-width"               : 90vw,
  "max-height"              : 25rem,
  "width"                   : 15rem,
  "width-large"             : 30rem,
  "width-large-x"           : 50rem,
  "type-size"               : null,
  "z-index"                 : true,
  "box-shadow"              : true,
  "box-shadow-footer"       : 0 0 4px,
  "box-shadow-footer-color" : "box-shadow",
  "border-radius"           : 6px,
  "arrow-size"              : 16px,
  "footer-padding-y"        : 0.25rem,
  "footer-padding-y-large"  : 0.5rem,
  "footer-background-color" : white,
  "footer-color"            : inherit,
  "tooltip-background-color": white,
  "tooltip-padding"         : 0.5rem,
  "tooltip-width"           : auto,
  "tooltip-max-width"       : 20rem,
  "tooltip-color"           : inherit,
) !default;

/// Change modules $config
/// @param {Map} $changes Map of changes
///   @include module-name.set(( "property" : value ));

@mixin set($changes) {
  $config: map.merge($config, $changes) !global;
}

/// Get a config option
/// @param {Map} $name Name of property
///   @include module-name.get("property");

@function get($name) {
  $value: utils.require-map-get($config, $name, "component-popover [config]");
  @return utils.function-fallback($name, $value, $-fallbacks);
}

/// Prints component styles
/// @example scss
///  @include ulu.component-example-styles();

@mixin styles {
  $prefix: selector.class("popover");
  $arrow-size-half: math.div(get("arrow-size"), 2);

  @if (get("arrow-size")) {
    #{ $prefix }__arrow {
      display: block;
      visibility: hidden;
      z-index: 1;
      &,
      &:before {
        position: absolute;
        width: get("arrow-size");
        height: get("arrow-size");
        background: inherit;
      }
      &:before {
        visibility: visible;
        content: '';
        transform: rotate(45deg);
        // box-shadow: $box-shadow;
      }
      [data-placement^='top'] > & {
        bottom: -($arrow-size-half);
      }
      [data-placement^='bottom'] > & {
        top: -($arrow-size-half);
      }
      [data-placement^='left'] > & {
        right: -($arrow-size-half);
      }
      [data-placement^='right'] > & {
        left: -($arrow-size-half);
      }
    }
  }
  // Default position is on the right of the container (Popper handles positioning)
  #{ $prefix } {
    display: none;
    position: absolute;
    z-index: get("z-index") + 1;
    background-color: get("background-color");
    color: get("color");
    width: get("width");
    max-width: get("max-width");
    box-shadow: get("box-shadow");
    border-radius: get("border-radius");
    text-align: left;
    @if (get("type-size")) {
      @include typography.size(get("type-size"));
    }
    &.is-active {
      display: block;
    }
  }
  #{ $prefix }__inner {
    display: block;
    overflow-y: auto;
    max-height: get("max-height");
    padding: get("padding");
    position: relative;
    border-radius: get("border-radius");
    z-index: 2; // Above arrow
    flex: 1; // When used with footer
  }
  #{ $prefix }__footer {
    display: block;
    flex: 0;
    box-shadow: get("box-shadow-footer") color.get(get("box-shadow-footer-color"));
    padding: get("footer-padding-y") get("padding");
    background-color: get("footer-color");
    background-color: get("footer-background-color");
    // text-align: center;
    border-bottom-left-radius: get("border-radius");
    border-bottom-right-radius: get("border-radius");
  }

  // Modifiers
  #{ $prefix }--tooltip {
    width: get("tooltip-width");
    max-width: min(get("max-width"), get("tooltip-max-width"));
    background-color: get("tooltip-background-color");
    pointer-events: none;
    color: get("tooltip-color");
    #{ $prefix }__inner {
      padding: get("tooltip-padding");
      min-height: 0;
    }
  }
  // For fixed strategy
  #{ $prefix }--fixed {
    position: fixed;
  }
  // If you want to do something custom (and have it touch the edges)
  #{ $prefix }--no-padding {
    #{ $prefix }__inner {
      padding: 0;
    }
  }
  #{ $prefix }--w-footer {
    #{ $prefix }__inner {
      border-bottom-left-radius: 0;
      border-bottom-right-radius: 0;
    }
  }
  #{ $prefix }--large {
    width: get("width-large");
  }
  #{ $prefix }--large-x {
    width: get("width-large-x");
  }
  #{ $prefix }--large,
  #{ $prefix }--large-x {
    #{ $prefix }__inner {
      padding: get("padding-large");
    }
    #{ $prefix }__footer {
      padding: get("footer-padding-y-large") get("padding-large");
    }
  }
}