////
/// @group modal
////

@use "sass:map";
@use "sass:meta";

@use "../color";
@use "../element";
@use "../layout";
@use "../typography";
@use "../selector";
@use "../utils";

// Used for function fallback
$-fallbacks: (
  "backdrop-color" : (
    "function" : meta.get-function("get", false, "element"),
    "property" : "backdrop-color"
  ),
  "box-shadow" : (
    "function" : meta.get-function("get", false, "element"),
    "property" : "box-shadow-above",
  ),
  "border-radius" : (
    "function" : meta.get-function("get", false, "element"),
    "property" : "border-radius-large",
  )
);

/// Module Settings
/// @type Map
/// @prop {} backdrop-color [true]
/// @prop {} backdrop-blur [4px]
/// @prop {} box-shadow [true]
/// @prop {} width [60rem]
/// @prop {} sizes [Object]
/// @prop {} height [340px]
/// @prop {} height-no-header [100px]
/// @prop {} border-radius[true]
/// @prop {} resizer-width [1rem]
/// @prop {} resizer-color [black]
/// @prop {} resizer-color-hover [black]
/// @prop {} resizer-background-color [rgb(221, 221, 221)]
/// @prop {} resizer-background-color-hover [rgb(66, 66, 66)]
/// @prop {} header-padding [1rem]
/// @prop {} header-border-bottom [none]
/// @prop {} header-background-color [black]
/// @prop {} header-color [white]
/// @prop {} title-color [white]
/// @prop {} title-size [large]
/// @prop {} title-font-weight [bold]
/// @prop {} title-text-transform [null]
/// @prop {} close-color [black]
/// @prop {} close-color-hover [black]
/// @prop {} close-background-color [white]
/// @prop {} close-size [2.5rem]
/// @prop {} close-font-size [1.2rem]
/// @prop {} close-margin [0.5rem]
/// @prop {} close-background-color-hover [blue]
/// @prop {} body-padding [1rem]
/// @prop {} background-color [white]
/// @prop {} dark-background-color [false]
/// @prop {} dark-color [white]
/// @prop {} dark-header-border-bottom [false]
/// @prop {} dark-header-background-color [false]
/// @prop {} dark-header-color [false]
/// @prop {} title-icon-margin 0.[5em]
/// @prop {} animation-timing-function [cubic-bezier(0, 0, .2, 1)]
/// @prop {} animation-duration [300ms]
/// @prop {} animation-duration-exit [150ms]

$config: (
  "backdrop-color" :                true,
  "backdrop-blur" :                 4px,
  "box-shadow" :                    true,         
  "width":                          60rem,
  "sizes" : (
    "small" : 30rem,
    "large" : 80rem
  ),
  "height":                         340px,
  "height-no-header":               100px,
  "border-radius" :                 true,
  "resizer-width":                  1rem,
  "resizer-color":                  black,
  "resizer-color-hover":            black,
  "resizer-background-color":       rgb(221, 221, 221),
  "resizer-background-color-hover": rgb(66, 66, 66),
  "header-padding":                 1rem,
  "header-border-bottom":           none,
  "header-background-color":        black,
  "header-color":                   white,
  "title-color":                    white,
  "title-size" :                    "large",
  "title-font-weight":              bold,
  "title-text-transform" :          null,
  "close-color":                    black,
  "close-color-hover":              black,
  "close-background-color":         white,
  "close-size":                     2.5rem,
  "close-font-size":                1.2rem,
  "close-margin":                   0.5rem,
  "close-background-color-hover":   blue,
  "body-padding":                   1rem,
  "background-color":              white,
  "dark-background-color" :         false,
  "dark-color" :                   white,
  "dark-header-border-bottom" :     false,
  "dark-header-background-color" :  false,
  "dark-header-color" :             false,
  "title-icon-margin" :             0.5em,
  "animation-timing-function" :     cubic-bezier(0, 0, .2, 1),
  "animation-duration" :            300ms,
  "animation-duration-exit" :       150ms,
) !default;

/// Change modules $config
/// @param {Map} $changes Map of changes
/// @example scss - General example, replace module-name with module's name
///   @include module-name.set(( "property" : value ));

@mixin set($changes) {
  $config: map.merge($config, $changes) !global;
}

/// Get a config option
/// @param {Map} $name Name of property
///   @include module-name.get("property");

@function get($name) {
  $value: utils.require-map-get($config, $name, "component-modal [config]");
  @return utils.function-fallback($name, $value, $-fallbacks);
}

/// Prints modal component styles
/// @example scss
///  @include ulu.component-modal-styles();

@mixin styles {
  $prefix: selector.class("modal");

  // // Before it's moved
  [data-ulu-dialog-builder] {
    display: none;
  }
  
  #{ $prefix } {
    // Required for click outside
    position: fixed;
    // Important: If you use the margin layout system (ie. auto) on dialogs they 
    // can't animate out correctly (thinking it jumps from dialog display system 
    // to normal block and doesn't work. This ALSO affects the z-index (seems to move from top-layer to normal layer). Z-index is for close
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: layout.get("z-index-fixed") + 1;
    margin: 0;
    padding: 0;
    border: 0;
    width: get("width");
    min-width: 200px; // For resizing minimum width
    min-height: get("height");
    max-height: 100vh;
    max-width: 100%;
    overflow-y: hidden;
    box-sizing: border-box;
    box-shadow: get("box-shadow");
    border-radius: get("border-radius");
    background-color: get("background-color");
    box-sizing: border-box;
    animation: uluModalCenterOut get("animation-duration-exit") get("animation-timing-function");
    &[open] {
      animation: uluModalCenterIn get("animation-duration") get("animation-timing-function");
      display: flex;
      flex-direction: column;
    }
    &::backdrop {
      background: get("backdrop-color");
      backdrop-filter: blur(get("backdrop-blur"));
      animation: uluModalBackdropIn get("animation-duration") get("animation-timing-function");
    }
  }
  #{ $prefix }__header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex: 0;
    padding: get("header-padding");
    border-bottom: get("header-border-bottom");
    background-color: get("header-background-color");
    color: get("header-color");
  }
  #{ $prefix }__body {
    flex: 1;
    overflow: auto;
    padding: get("body-padding");
  }
  #{ $prefix }__title {
    display: flex;
    align-items: baseline;
    margin: 0;
    color: color.get(get("title-color"));
    font-weight: get("title-font-weight");
    text-transform: get("title-text-transform");
    @if (get("title-size")) {
      @include typography.size(get("title-size"), $only-font-size: true);
    }
  }
  #{ $prefix }__title-icon {
    margin-right: get("title-icon-margin");
  }
  #{ $prefix }__close {
    margin: 0 0 0 get("close-margin");
    flex: 0 0 auto;
    font-size: get("close-font-size");
    width: get("close-size");
    height: get("close-size");
    background-color: get("close-background-color");
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: get("close-color");
    &:hover {
      background-color: get("close-background-color-hover");
      color: get("close-color-hover");
    }
  }
  #{ $prefix }__resizer {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    width: get("resizer-width");
    display: block;
    cursor: col-resize;
    background-color: get("resizer-background-color");
    display: flex;
    align-items: center;
    justify-content: center;
    transition-property: background-color, color;
    transition-duration: 300ms;
    transition-delay: 100ms; 
    color: get("resizer-color");
    &:hover {
      color: get("resizer-color-hover");
      background-color: get("resizer-background-color-hover");
    }
    #{ $prefix }--left & {
      left: auto;
      right: 0;
    }
  }
  #{ $prefix }__content {
    margin-top: 2rem;
    margin-bottom: 2rem;
    line-height: 1.5;
    color: rgba(0,0,0,.8);
  }

  // Modifiers
  @each $name, $size-width in get("sizes") {
    #{ $prefix }--#{ $name } {
      width: $size-width;
    }
  }
  #{ $prefix }--right,
  #{ $prefix }--left {
    border-radius: 0;
    height: 100vh;
    top: 0;
    bottom: 0;
    transform: none;
  }
  #{ $prefix }--top {
    top: 0;
    border-top-right-radius: 0;
    border-top-left-radius: 0;
    transform: translateX(-50%);
    animation: uluModalTopOut get("animation-duration-exit") get("animation-timing-function");
    &[open] {
      animation: uluModalTopIn get("animation-duration") get("animation-timing-function");
    }
  }
  #{ $prefix }--bottom {
    top: auto;
    bottom: 0;
    transform: translateX(-50%);
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;
    animation: uluModalBottomOut get("animation-duration-exit") get("animation-timing-function");
    &[open] {
      animation: uluModalBottomIn get("animation-duration") get("animation-timing-function");
    }
  }
  #{ $prefix }--right {
    right: 0;
    left: auto;
    animation: uluModalRightOut get("animation-duration-exit") get("animation-timing-function");
    &[open] {
      animation: uluModalRightIn get("animation-duration") get("animation-timing-function");
    }
  }
  #{ $prefix }--left {
    left: 0;
    animation: uluModalLeftOut get("animation-duration-exit") get("animation-timing-function");
    &[open] {
      animation: uluModalLeftIn get("animation-duration") get("animation-timing-function");
    }
  }
  #{ $prefix }--no-header {
    min-height: get("height-no-header");
  }
  #{ $prefix }--no-backdrop {
    &::backdrop {
      display: none;
    }
  }
  #{ $prefix }--resize {
    &#{ $prefix }--center  {
      resize: both;  
    }
    &#{ $prefix }--right  {
      padding-left: get("resizer-width");  
    }
    &#{ $prefix }--left  {
      padding-right: get("resizer-width");  
    }
  }
  #{ $prefix }--video {
    #{ $prefix }__header {
      border-bottom: none;
    }
    #{ $prefix }__body {
      padding: 0;
    }
  }

  #{ $prefix }--no-min-height {
    min-height: 0;
  }
  // Will display as content when printing
  // NOTE: This will not work with native dialog
  // Printing works with modal printer by cloning mechanism
  // .modal--print {
  //   @media screen {
  //     display: block !important;
  //     position: static;
  //     top: auto;
  //     left: auto;
  //     right: auto;
  //     bottom: auto;
  //     width: auto;
  //     max-width: none;
  //   }
  // }

  @keyframes uluModalBackdropIn {
    0% {
      background-color: rgba(0, 0, 0, 0);
      backdrop-filter: blur(0);
    }
    100% {
      background-color: get("backdrop-color");
      backdrop-filter: blur(get("backdrop-blur"));
    }
  }
  @keyframes uluModalCenterIn {
    from { 
      opacity: 0; 
      transform: translate(-50%, -40%);
      display: none;
    }
    to { 
      opacity: 1; 
      transform: translate(-50%, -50%);
      display: block;
    }
  }
  @keyframes uluModalCenterOut {
    from { 
      opacity: 1; 
      display: block;
      transform: translate(-50%, -50%);
    }
    to { 
      opacity: 0; 
      display: none;
      transform: translate(-50%, 40%);
    }
  }
  @keyframes uluModalTopIn {
    from { 
      opacity: 0; 
      transform: translate(-50%, -15%);
      display: none;
    }
    to { 
      opacity: 1; 
      transform: translate(-50%, 0);
      display: block;
    }
  }
  @keyframes uluModalTopOut {
    from { 
      opacity: 1; 
      display: block;
      transform: translate(-50%, 0);
    }
    to { 
      opacity: 0; 
      display: none;
      transform: translate(-50%, -15%);
    }
  }
  @keyframes uluModalBottomIn {
    from { 
      opacity: 0; 
      transform: translate(-50%, 15%);
      display: none;
    }
    to { 
      opacity: 1; 
      transform: translate(-50%, 0);
      display: block;
    }
  }
  @keyframes uluModalBottomOut {
    from { 
      opacity: 1; 
      display: block;
      transform: translate(-50%, 0);
    }
    to { 
      opacity: 0; 
      display: none;
      transform: translate(-50%, 15%);
    }
  }
  @keyframes uluModalLeftIn {
    from { 
      opacity: 0; 
      transform: translateX(-15%);
      display: none;
    }
    to { 
      opacity: 1; 
      transform: translateX(0);
      display: block;
    }
  }
  @keyframes uluModalLeftOut {
    from { 
      opacity: 1; 
      display: block;
      transform: translateX(0);
    }
    to { 
      opacity: 0; 
      display: none;
      transform: translateX(-15%);
    }
  }
  @keyframes uluModalRightIn {
    from { 
      opacity: 0; 
      transform: translateX(15%);
      display: none;
    }
    to { 
      opacity: 1; 
      transform: translateX(0);
      display: block;
    }
  }
  @keyframes uluModalRightOut {
    from { 
      opacity: 1; 
      display: block;
      transform: translateX(0);
    }
    to { 
      opacity: 0; 
      display: none;
      transform: translateX(15%);
    }
  }
}