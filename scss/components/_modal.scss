////
/// @group modal
////

@use "sass:map";

@use "../color";
@use "../element";
@use "../layout";
@use "../typography";
@use "../utils";





/// Module Settings
/// @type Map
$config: (
  "backdrop-color" :                element.get("backdrop-color"),
  "backdrop-blur" :                 4px,
  "box-shadow" :                    none,         
  "width":                          400px,
  "height":                         340px,
  "height-no-header":               100px,
  "border-radius" :                 0,
  "resizer-width":                  1rem,
  "resizer-color":                  black,
  "resizer-color-hover":            black,
  "resizer-background-color":       rgb(221, 221, 221),
  "resizer-background-color-hover": rgb(66, 66, 66),
  "header-padding":                 1rem,
  "header-border-bottom":           none,
  "header-background-color":        black,
  "header-color":                   white,
  "title-color":                    white,
  "title-font-weight":              bold,
  "close-color":                    black,
  "close-color-hover":              black,
  "close-background-color":         white,
  "close-size":                     2.5rem,
  "close-font-size":                1.2rem,
  "close-margin":                   0.5rem,
  "close-background-color-hover":   blue,
  "body-padding":                   1rem,
  "background-color":              white,
  "dark-background-color" :         false,
  "dark-color" :                   white,
  "dark-header-border-bottom" :     false,
  "dark-header-background-color" :  false,
  "dark-header-color" :             false,
  "title-icon-margin" :             0.5em,
  "animation-timing-function" :     cubic-bezier(0, 0, .2, 1),
  "animation-duration" :            300ms,
  "animation-duration-exit" :       150ms,
) !default;

/// Change modules $config
/// @param {Map} $changes Map of changes
/// @example scss - General example, replace module-name with module's name
///   @include module-name.set(( "property" : value ));

@mixin set($changes) {
  $config: map.merge($config, $changes) !global;
}

/// Get a config option
/// @param {Map} $name Name of property
///   @include module-name.get("property");

@function get($name) {
  @return utils.require-map-get($config, $name, "component-modal [config]");
}

/// Prints modal component styles
/// @example scss
///  @include ulu.component-modal-styles();

@mixin styles {
  // // Before it's moved
  [data-ulu-dialog-builder] {
    display: none;
  }
  
  .modal {
    // Required for click outside
    position: fixed;
    // Important: If you use the margin layout system (ie. auto) on dialogs they 
    // can't animate out correctly (thinking it jumps from dialog display system 
    // to normal block and doesn't work. This ALSO affects the z-index (seems to move from top-layer to normal layer). Z-index is for close
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: layout.get("z-index-fixed") + 1;
    margin: 0;
    padding: 0;
    border: 0;
    width: get("width");
    min-height: get("height");
    max-height: 100vh;
    max-width: 100%;
    overflow-y: hidden;
    box-sizing: border-box;
    box-shadow: get("box-shadow");
    border-radius: get("border-radius");
    background-color: get("background-color");
    box-sizing: border-box;
    will-change: transform;
    &[open] {
      display: flex;
      flex-direction: column;
    }
    &::backdrop {
      background: get("backdrop-color");
      backdrop-filter: blur(get("backdrop-blur"));
    }
  }
  .modal--no-header {
    min-height: get("height-no-header");
  }
  .modal--resize {
    &.modal--center  {
      resize: both;  
    }
    
  }
  // .modal__container {
   
  //   height: 100%;
  
  //   // Use native resize
    
  //   // Account for custom resizer
  //   .modal--resize.modal--right  & {
  //     padding-left: get("resizer-width");
  //   }
  //   .modal--resize.modal--left & {
  //     padding-right: get("resizer-width");
  //   }
  // }
  .modal__header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex: 0;
    padding: get("header-padding");
    border-bottom: get("header-border-bottom");
    background-color: get("header-background-color");
    color: get("header-color");
  }
  .modal__body {
    flex: 1;
    overflow: auto;
    padding: get("body-padding");
  }
  .modal__title {
    display: flex;
    align-items: baseline;
    margin: 0;
    color: color.get(get("title-color"));
    font-weight: get("title-font-weight");
    @include typography.size("large");
  }
  .modal__title-icon {
    margin-right: get("title-icon-margin");
  }
  .modal__close {
    margin: 0 0 0 get("close-margin");
    flex: 0 0 auto;
    font-size: get("close-font-size");
    width: get("close-size");
    height: get("close-size");
    background-color: get("close-background-color");
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: get("close-color");
    &:hover {
      background-color: get("close-background-color-hover");
      color: get("close-color-hover");
    }
  }
  .modal__resizer {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    width: get("resizer-width");
    display: block;
    cursor: col-resize;
    background-color: get("resizer-background-color");
    display: flex;
    align-items: center;
    justify-content: center;
    transition-property: background-color, color;
    transition-duration: 300ms;
    transition-delay: 100ms; 
    color: get("resizer-color");
    &:hover {
      color: get("resizer-color-hover");
      background-color: get("resizer-background-color-hover");
    }
    .modal--left & {
      left: auto;
      right: 0;
    }
  }
  .modal__content {
    margin-top: 2rem;
    margin-bottom: 2rem;
    line-height: 1.5;
    color: rgba(0,0,0,.8);
  }
  .modal--right,
  .modal--left {
    border-radius: 0;
    // top: 0;
    height: 100vh;
    // Check if this is needed for ios?
    // height: 100dvh;
  }

  // Positions
  .modal--top {
    top: 0;
    transform: translateX(-50%);
  }
  .modal--bottom {
    top: auto;
    bottom: 0;
    transform: translateX(-50%);
  }
  .modal--right  {
    right: 0;
    left: auto;
    top: 0;
    bottom: 0;
    transform: none;
  }
  .modal--left  {
    left: 0;
    top: 0;
    bottom: 0;
    transform: none;
  }
  .modal--video {
    .modal__header {
      border-bottom: none;
    }
    .modal__body {
      padding: 0;
    }
  }
  @keyframes modalBackdropIn {
    0% {
      background-color: rgba(0, 0, 0, 0);
      backdrop-filter: blur(0);
    }
    100% {
      background-color: get("backdrop-color");
      backdrop-filter: blur(get("backdrop-blur"));
    }
  }
  @keyframes modalCenterIn {
    from { 
      opacity: 0; 
      transform: translate(-50%, -40%);
      display: none;
    }
    to { 
      opacity: 1; 
      transform: translate(-50%, -50%);
      display: block;
    }
  }
  @keyframes modalCenterOut {
    from { 
      opacity: 1; 
      display: block;
      transform: translate(-50%, -50%);
    }
    to { 
      opacity: 0; 
      display: none;
      transform: translate(-50%, 40%);
    }
  }
  @keyframes modalTopIn {
    from { 
      opacity: 0; 
      transform: translate(-50%, -15%);
      display: none;
    }
    to { 
      opacity: 1; 
      transform: translate(-50%, 0);
      display: block;
    }
  }
  @keyframes modalTopOut {
    from { 
      opacity: 1; 
      display: block;
      transform: translate(-50%, 0);
    }
    to { 
      opacity: 0; 
      display: none;
      transform: translate(-50%, -15%);
    }
  }
  @keyframes modalBottomIn {
    from { 
      opacity: 0; 
      transform: translate(-50%, 15%);
      display: none;
    }
    to { 
      opacity: 1; 
      transform: translate(-50%, 0);
      display: block;
    }
  }
  @keyframes modalBottomOut {
    from { 
      opacity: 1; 
      display: block;
      transform: translate(-50%, 0);
    }
    to { 
      opacity: 0; 
      display: none;
      transform: translate(-50%, 15%);
    }
  }
  @keyframes modalLeftIn {
    from { 
      opacity: 0; 
      transform: translateX(-15%);
      display: none;
    }
    to { 
      opacity: 1; 
      transform: translateX(0);
      display: block;
    }
  }
  @keyframes modalLeftOut {
    from { 
      opacity: 1; 
      display: block;
      transform: translateX(0);
    }
    to { 
      opacity: 0; 
      display: none;
      transform: translateX(-15%);
    }
  }
  @keyframes modalRightIn {
    from { 
      opacity: 0; 
      transform: translateX(15%);
      display: none;
    }
    to { 
      opacity: 1; 
      transform: translateX(0);
      display: block;
    }
  }
  @keyframes modalRightOut {
    from { 
      opacity: 1; 
      display: block;
      transform: translateX(0);
    }
    to { 
      opacity: 0; 
      display: none;
      transform: translateX(15%);
    }
  }
  
  .modal {
    animation: modalCenterOut get("animation-duration-exit") get("animation-timing-function");
    &[open] {
      animation: modalCenterIn get("animation-duration") get("animation-timing-function");
    }
    &::backdrop {
      animation: modalBackdropIn get("animation-duration") get("animation-timing-function");
    }
  }
  .modal--top {
    animation: modalTopOut get("animation-duration-exit") get("animation-timing-function");
    &[open] {
      animation: modalTopIn get("animation-duration") get("animation-timing-function");
    }
  }
  .modal--bottom {
    animation: modalBottomOut get("animation-duration-exit") get("animation-timing-function");
    &[open] {
      animation: modalBottomIn get("animation-duration") get("animation-timing-function");
    }
  }
  .modal--right {
    animation: modalRightOut get("animation-duration-exit") get("animation-timing-function");
    &[open] {
      animation: modalRightIn get("animation-duration") get("animation-timing-function");
    }
  }
  .modal--left {
    animation: modalLeftOut get("animation-duration-exit") get("animation-timing-function");
    &[open] {
      animation: modalLeftIn get("animation-duration") get("animation-timing-function");
    }
  }
  // .modal--left[aria-hidden="false"] .modal__container {
  //   animation: modalSlideLeftIn .3s cubic-bezier(0, 0, .2, 1);
  // }
  // .modal[aria-hidden="true"] .modal__overlay {
  //   animation: modalCenterOut .3s cubic-bezier(0.0, 0.0, 0.2, 1);
  // }
  // .modal[aria-hidden="true"] .modal__container {
  //   animation: modalSlideOut .3s cubic-bezier(0, 0, .2, 1);
  // }
  // .modal--right[aria-hidden="true"] .modal__container {
  //   animation: modalSlideRightOut .3s cubic-bezier(0, 0, .2, 1);
  // }
  // .modal--left[aria-hidden="true"] .modal__container {
  //   animation: modalSlideLeftOut .3s cubic-bezier(0, 0, .2, 1);
  // }
  
  
  .modal .modal__container,
  .modal .modal__overlay {
    will-change: transform;
  }
}