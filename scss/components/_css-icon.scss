////
/// @group css-icon
////
/// Simple icons that are made from pseudo elements
/// 
/// 
/// TODO:
/// - Convert to normal module format vs mixins
///   so we can share properties over making it easy to create variations 
///   (performance is more important users can just reuse pattern if needed
/// MAKE:
/// - plus
/// - minus
/// - close/times
/// - drag (2 bar) (horizontal/vertical)
/// - caret/chevron (up,down,left,right)
/// - arrows (up,down,left,right) (using two borders and transparent psuedo
/// - info (with "i" in certain font-family that looks ok
/// - triangle (up,down,left,right)(maybe 45deg too?)
/// - Add circle to any (with container being the circle)

@use "sass:map";
@use "sass:math";

@use "../utils";

/// Module Settings
/// @type Map

$config: (
  "size" : 1.1em,
  "stroke-width" : 0.15em,
  "stroke-border-radius" : 4px,
  "color" : currentColor,
);

/// Change modules $config
/// @param {Map} $changes Map of changes
///   @include module-name.set(( "property" : value ));

@mixin set($changes) {
  $config: map.merge($config, $changes) !global;
}

/// Get a config option
/// @param {Map} $name Name of property
///   @include module-name.get("property");

@function get($name) {
  @return utils.require-map-get($config, $name, "css-icon [config]");
}

/// Prints adaptive spacing component styles
/// @example scss
///  @include ulu.component-example-styles();

@mixin styles {
  .css-icon {
    display: inline-block;
    position: relative;
    width: get("size");
    height: get("size");
  }
  // Icons that share pseudos for strokes
  .css-icon--close,
  .css-icon--drag {
    &:before,
    &:after {
      width: 100%;
      height: get("stroke-width");
      background-color: get("color"); 
      @if (get("stroke-border-radius")) {
        border-radius: get("stroke-border-radius");
      }
    }
  }
  .css-icon--close {
    &:before,
    &:after {
      content: "";
      position: absolute;
      top: 50%;
      left: 50%;
      margin-top: -(math.div(get("stroke-width"), 2));
    }
    &:before {
      transform: translateX(-50%) rotate(45deg);
    }
    &:after {
      transform: translateX(-50%) rotate(-45deg);
    }
  }
  .css-icon--drag {
    &:before,
    &:after {
      content: "";
      display: block; 
    }
    &:after {
      position: relative;
      top: 50%;
      transform: translateY(-50%);
    }
  }
}
