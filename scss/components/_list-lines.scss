////
/// @group list-lines
////

@use "sass:map";

@use "../element";
@use "../color";
@use "../typography";
@use "../utils";

/// Module Config
/// @prop {Boolean} border-first [true] If enabled, adds a top border to the first item in list-lines.
/// @prop {Boolean} border-last [true] If enabled, adds a bottom border to the last item in list-lines.
/// @prop {Dimension} margin-bottom [1em] Bottom margin of list.
/// @prop {Dimension} margin-top [0] Top margin of list.
/// @prop {Dimension} padding-between [1em] Padding between items in list.

$config: (
  "border-first" : true,
  "border-last" : true,
  "margin-bottom": 1em,
  "margin-top": 0,
  "padding-between" : 1em
) !default;

/// Change modules $config
/// @param {Map} $changes Map of changes
/// @example
///   @include ulu.component-list-lines-set(( "property" : value ));

@mixin set($changes) {
  $config: map.merge($config, $changes) !global;
}

/// Get a config option
/// @param {Map} $name Name of property
/// @example
///   @include ulu.component-list-lines-get("property");

@function get($name) {
  @return utils.require-map-get($config, $name, "grid [config]");
}

/// Output component styles

@mixin inner-styles {
  $border: element.get-rule-style("light") !default;
  list-style: none;
  margin: get("margin-top") 0 get("margin-bottom") 0;
  padding: 0;
  @if (get("border-first")) {
    border-top: $border;
  }
  >li {
    border-bottom: $border;
    padding: get("padding-between") 0;
    >*:last-child {
      margin-bottom: 0;
    }
    @if (not get("border-last")) {
      &:last-child {
        border-bottom-width: 0;
      }
    }
  }
}

/// Output component stylesheet
/// @example scss
///  @include ulu.component-list-lines-styles();

@mixin styles {
  
  .list-lines {
    @include inner-styles;
  }
  .list-lines--dense {
    >li {
      padding: 0.5em 0;
      line-height: typography.get("line-height-dense");
    }
  }
}
