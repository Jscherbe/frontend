////
/// @group menu-stack
////

@use "sass:meta";
@use "sass:map";
@use "sass:math";
@use "sass:selector" as sassSelector;

@use "../utils";
@use "../color";
@use "../element";
@use "../selector";
@use "../button";
@use "../typography";

// Used for function fallback
$-fallbacks: (
  "link-border-radius" : (
    "function" : meta.get-function("get", false, "button"),
    "property" : "border-radius"
  )
);

/// Module Settings
/// @type Map

$config: (
  "link-color" : null,
  "link-background-color" : transparent,
  "link-color-hover" : "link:hover",
  "link-background-color-hover" : rgb(219, 219, 219),
  "link-color-active" : black,
  "link-background-color-active" : rgb(219, 219, 219),
  "link-border-radius" : true,
  "link-padding-y": 0.35em,
  "link-padding-x": 1em,
  "link-margin" : 0.2em,
  "link-separated-rule-style" : false,
  "link-separated-margin" : false,
  "link-icon-margin" : 0.65em,
  "link-icon-width" : 1em,
  "link-font-weight" : null,
  "link-active-selectors" : (".is-active", '[aria-current="page"]'),
  "compact-link-padding-y": 0.25em,
  "compact-link-padding-x": 0.75em,
  "rule-style" : "default",
  "rule-margin" : 0.5em,
  "label-type-size" : false,
  "label-color" : null,
  "label-margin" : 0.5em,
  "label-text-transform" : uppercase,
  "checkbox-area-width" : 3em,
) !default;


/// Change modules $config
/// @param {Map} $changes Map of changes
///   @include module-name.set(( "property" : value ));

@mixin set($changes) {
  $config: map.merge($config, $changes) !global;
}

/// Get a config option
/// @param {Map} $name Name of property
///   @include module-name.get("property");

@function get($name) {
  $value: utils.require-map-get($config, $name, "menu-stack [config]");
  @return utils.function-fallback($name, $value, $-fallbacks);
}

// Internal fallback helper
@function -fallback($op1, $op2) {
  @return utils.map-fallback($config, $op1, $op2);
}

/// Prints component styles
/// @example scss
///  @include ulu.component-example-styles();
/// @todo Colors stuff
/// @todo Selector prefix

@mixin styles {
  $prefix: selector.class("menu-stack");
  $selector-link: "#{ $prefix }__link";
  $active-selectors: get("link-active-selectors");
  $selector-link-active: sassSelector.append($selector-link, $active-selectors...);

  #{ $prefix }--separated {
    border-top: element.get-rule-style(get("rule-style"));
    padding-top: get("rule-margin");
    margin-top: get("rule-margin");
  }
  #{ $prefix }__label {
    text-transform: get("label-text-transform");
    padding-bottom: get("label-margin");
    color: color.get(get("label-color"));
    @if (get("label-type-size")) {
      @include typography.size(get("label-type-size"), $only-font-size: true);
    }
  }
  #{ $prefix }__item--separator-before {
    border-top: element.get-rule-style(-fallback("link-separated-rule-style", "rule-style"));
    margin-top: -fallback("link-separated-margin", "link-padding-y");
    padding-top: -fallback("link-separated-margin", "link-padding-y");
  }
  #{ $prefix }__item--separator-after {
    border-bottom: element.get-rule-style(-fallback("link-separated-rule-style", "rule-style"));
    margin-bottom: -fallback("link-separated-margin", "link-padding-y");
    padding-bottom: -fallback("link-separated-margin", "link-padding-y");
  }
  // By default the link hangs outside the container so that 
  // the icons/text align to the text (above/below)
  // - Use the modifier "site-menu--contained" to keep the links within 
  //   the parent container (no optical alignment), should be within something that contains it
  #{ $prefix }__link,
  #{ $prefix }__checkbox {
    width: 100%;
    display: flex;
    align-items: center;
    padding: get("link-padding-y") get("link-padding-x");
    margin: get("link-margin") 0;
    border-radius: get("link-border-radius");
    font-weight: get("link-font-weight");
    color: color.get(get("link-color"));
    background-color: color.get(get("link-background-color"));
    &:hover,
    &:focus {
      color: color.get(get("link-color-hover"));
      background-color: color.get(get("link-background-color-hover"));
    }
  }
  #{ $selector-link-active } {
    &,
    &:hover {
      color: color.get(get("link-color-active"));
      background-color: color.get(get("link-background-color-active"));
    }
  }
  #{ $prefix }__checkbox {
    $checkbox-y: (get("link-padding-y") + get("link-margin"));
    padding: 0;
    position: relative;
    [type="checkbox"] {
      position: absolute;
      top: $checkbox-y;
      left: get("link-padding-x");
    }
    label {
      width: 100%;
      padding: $checkbox-y get("link-padding-x") $checkbox-y get("checkbox-area-width");
    }
  }
  #{ $prefix }__link-text {
    display: block;
    flex-grow: 1;
  }
  #{ $prefix }__link-icon {
    margin-right: get("link-icon-margin");
    width: get("link-icon-width");
  }

  // Modifiers
  // Link buttons hang outside in margin so that text optically aligns
  #{ $prefix }--hanging {
    #{ $prefix }__link {
      margin-left: -(get("link-padding-x"));
      margin-right: -(get("link-padding-x"));
      width: calc(100% + (get("link-padding-x") * 2));
    }
  }
  #{ $prefix }--compact {
    #{ $prefix }__link {
      border-radius: 0;
      margin: 0;
      padding: get("compact-link-padding-y") get("compact-link-padding-x");
    }
  }
}