////
/// @group placeholder-block
////

@use "sass:map";
@use "sass:meta";

@use "../selector";
@use "../utils";
@use "../color";
@use "../element";

// Used for function fallback
$-fallbacks: (
  "border-radius" : (
    "function" : meta.get-function("get", false, "element"),
    "property" : "border-radius-large"
  ),
  "color" : (
    "function" : meta.get-function("get", false, "color"),
    "property" : "type-tertiary"
  ),
  "margin-bottom": (
    "function" : meta.get-function("get", false, "element"),
    "property" : "margin"
  ),
);

/// Module Settings
/// @type Map

$config: (
  "color" : true,
  "background-color" : rgba(0,0,0,0.15),
  "border-width" : 2px,
  "border-width-compact" : 1px,
  "border-style" : dashed,
  "border-color" : rgba(0,0,0,0.3),
  "padding" : 2em,
  "padding-compact" : (0.5em 1em),
  "icon-font-size" : 3em,
  "icon-margin" : 0.25em,
  "icon-color" : rgba(0, 0, 0, 0.5),
  "border-radius" : true,
  "margin-bottom" : true,
  "expanded-height" : 15rem
) !default;


/// Change modules $config
/// @param {Map} $changes Map of changes
///   @include module-name.set(( "property" : value ));

@mixin set($changes) {
  $config: map.merge($config, $changes) !global;
}

/// Get a config option
/// @param {Map} $name Name of property
///   @include module-name.get("property");

@function get($name) {
  $value: utils.require-map-get($config, $name, "placeholder [config]");
  @return utils.function-fallback($name, $value, $-fallbacks);
}

/// Prints component styles
/// @example scss
///  @include ulu.component-example-styles();

@mixin styles {
  $prefix: selector.class("placeholder-block");

  #{ $prefix } {
    background-color: get("background-color");
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
    padding: get("padding");
    color: get("color");
    border: get("border-width") get("border-style") get("border-color");
    margin-bottom: get("margin-bottom");
    border-radius: get("border-radius");
  }
  #{ $prefix }__icon {
    color: get("icon-color");
    display: block;
    margin: 0 auto get("icon-margin") auto;
    font-size: get("icon-font-size");
  }
  #{ $prefix }--compact {
    padding: get("padding-compact");
    display: block;
    border-width: get("border-width-compact");
  }
  #{ $prefix }--expanded {
    min-height: get("expanded-height");
  }
}