////
/// @group accordion
////

@use "sass:map";
@use "sass:math";

@use "../selector";
@use "../utils";
@use "../color";
@use "../typography";


// TODO: This was based on site-details (uses accordion), would be nice if this
//       still has the details element styling but also provide selectors. Make 
//       icon optional?

/// Module Settings
/// @type Map

$config: (
  "background-color":              white,
  "background-color-open":          #F7F8F7,
  "padding-x":                      1.5rem,
  "padding-y":                      1.5rem,
  "transparent-padding-y":          0.5rem,
  "transparent-padding-x":          0,
  "margin":                         3rem,
  "margin-between":                 0,
  "border-radius":                  0,
  "box-shadow":                     none,
  "border-color":                   "rule",
  "border":                         1px solid,
  "summary-color":                  inherit,
  "summary-type-size" :             false,
  "summary-color-hover":            inherit,
  "summary-padding-y":              1rem,
  "summary-background-color":     white,
  "summary-line-height":            inherit,
  "icon-color":                     "link",
  "icon-color-hover":               "link:hover",
  "icon-background-color" :         transparent,
  "icon-background-color-hover" :   transparent,
  "icon-border-radius" :            50%,
  "icon-size" :                     auto,
  "icon-font-size" :                1.5rem,
  "icon-stroke-width" :             0.15em,
) !default;


/// Change modules $config
/// @param {Map} $changes Map of changes
///   @include module-name.set(( "property" : value ));

@mixin set($changes) {
  $config: map.merge($config, $changes) !global;
}

/// Get a config option
/// @param {Map} $name Name of property
///   @include module-name.get("property");

@function get($name) {
  @return utils.require-map-get($config, $name, "accordion [config]");
}

/// Prints component styles
/// @example scss
///  @include ulu.component-example-styles();

@mixin styles {
  $prefix: selector.class("accordion");

  // When not one of our custom classed details components
  #{ $prefix } {
    position: relative; // For active border
    border-radius: 0;
    padding-left: get("padding-x");
    padding-right: get("padding-x");
    margin-top: get("margin");
    margin-bottom: get("margin");
    border: get("border") color.get(get("border-color"));
    background-color: get("background-color");
    box-shadow: get("box-shadow");
    &:first-of-type {
      border-top-left-radius: get("border-radius");
      border-top-right-radius: get("border-radius");
      >#{ $prefix }__summary {
        top: get("border-radius");
      }
    }
    &:last-of-type {
      border-bottom-left-radius: get("border-radius");
      border-bottom-right-radius: get("border-radius");
      >#{ $prefix }__summary {
        bottom: get("border-radius");
      }
    }
    & + & {
      $gap: -(get("margin") - get("margin-between"));
      margin-top: $gap;
      margin-top: calc($gap - 1px);
    }
    &[open], 
    &.is-active  {
      background-color: get("background-color-open");
      padding-bottom: get("padding-y");
      z-index: 2; // Above child details
      > #{ $prefix }__summary {
        margin-bottom: get("padding-y");
        border-bottom-left-radius: 0;
        border-bottom-right-radius: 0; 
        border-bottom: get("border");
      }
    }
  }

  #{ $prefix }__summary {
    display: flex; // For icon
    align-items: center;
    justify-content: space-between;
    color: get("summary-color");
    margin-left: -(get("padding-x"));
    margin-right: -(get("padding-x"));
    line-height: get("summary-line-height");
    padding: get("summary-padding-y") get("padding-x");
    vertical-align: top;
    font-weight: bold;
    list-style: none; // Remove the default arrow (old safari?)
    cursor: pointer;
    &::-webkit-details-marker,
    &::marker {
      display: none;
      content: "";
    }
    @if (get("summary-type-size")) {
      @include typography.size(get("summary-type-size"));
    }
    &:hover {
      color: get("summary-color-hover");
      #{ $prefix }__icon {
        background-color: get("icon-background-color-hover");
        color: color.get(get("icon-color-hover"));
      }
    }
  }
  #{ $prefix }__icon {
    flex: 0 0 get("icon-size");
    color: color.get(get("icon-color"));
    margin-left: 0.5em;
    order: 3;
    background-color: get("icon-background-color");
    border-radius: get("icon-border-radius");
    width: get("icon-size");
    height: get("icon-size");
    font-size: get("icon-font-size");
    line-height: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
  }
  // #{ $prefix }__icon-default {
  //   &::before,
  //   &::after {
  //     content: "";
  //     position: absolute;
  //     top: 50%;
  //     left: 50%;
  //     margin-top: -(math.div(get("icon-stroke-width"), 2));
  //   }
  //   // &::before {

  //   // }
  // }
  // #{ $prefix }--rotate-icon {
  //   &[open], 
  //   &.is-active {
  //   }
  // }
  #{ $prefix }--transparent {
    border-left: none;
    border-right: none;
    background-color: transparent;
    padding-left: get("transparent-padding-x");
    padding-right: get("transparent-padding-x");
    > #{ $prefix }__summary {
      margin-left: -(get("transparent-padding-x"));
      margin-right: -(get("transparent-padding-x"));
      padding: get("transparent-padding-y") get("transparent-padding-x");
      background-color: transparent;
      border: none;
    }
    &[open], 
    &.is-active {
      background-color: transparent;
      > #{ $prefix }__summary{
        border-bottom: none;
        margin-bottom: 0;
      }
    }
  }
}
