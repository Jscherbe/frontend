
////
/// @group vignette
////
/// Creates adaptive (changing at breakpoints)n between items (vertical/horizontal layout)

@use 'sass:color';
@use "sass:map";
@use "sass:math";
@use "../element";
@use "../utils";

/// Module Settings
/// @type Map
/// @prop {Color} background-color [rgb(0,0,0)] Color used for the fade-in of the vignette.


$config: (
  "background-color" : rgb(0,0,0),
);

/// Change modules $config
/// @param {Map} $changes Map of changes
///   @include module-name.set(( "property" : value ));

@mixin set($changes) {
  $config: map.merge($config, $changes) !global;
}

/// Set sizes map
/// @param {Map} $changes Map of changes
/// @param {String} $merge-mode Merge mode see utils.map-merge() [null|"deep"|"overwrite"]

@mixin set-sizes($changes, $merge-mode: null) {
  $sizes: utils.map-merge($sizes, $changes, $merge-mode) !global;
}

/// Get a config option
/// @param {Map} $name Name of property
///   @include module-name.get("property");

@function get($name) {
  @return utils.require-map-get($config, $name, "vignette [config]");
}

/// Prints adaptive spacing component styles
/// @example scss
///  @include ulu.component-adaptive-spacing-styles();

@mixin styles {
  .vignette {
    position: relative;
  }
  .vignette:after {
    content: "";
    display: block;
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    background: linear-gradient(0deg,color.change(get("background-color"), $alpha: 0.8),color.change(get("background-color"), $alpha: 0) 45%);
    pointer-events: none
  }
  
  // background: linear-gradient(0deg,rgba(93,23,36,.6),rgba(93,23,36,0) 45%);
  .vignette>img {
    filter: saturate(85%)
  }

  // .vignette--secondary:after {
  //   background: linear-gradient(45deg,rgba(93,23,36,.6),rgba(93,23,36,0) 40%,rgba(48,87,108,0) 60%,rgba(48,87,108,.6))
  // }

  // .vignette--secondary>img {
  //   filter: saturate(60%)
  // }
}