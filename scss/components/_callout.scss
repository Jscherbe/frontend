////
/// @group callout
/// A container for content that highlights important information, provides context, or guides user attention within an interface
////

@use "sass:map";
@use "sass:meta";


@use "../utils";
@use "../selector";
@use "../element";
@use "../color";

// Used for function fallback
$-fallbacks: (
  "border-radius" : (
    "function" : meta.get-function("get", false, "element"),
    "property" : "border-radius"
  )
);

/// Module Settings
/// @type Map
/// @prop {Color} background-color [rgb(240, 240, 240)] The background color of the Callout.
/// @prop {Color} border-color ["rule-light"] The border color of the Callout.
/// @prop {Boolean} border-radius [true] The border radius of the Callout.
/// @prop {Dimension} border-width [1px] The border width of the Callout.
/// @prop {CssValue} box-shadow [none] The box-shadow of the Callout.
/// @prop {Boolean} left-cap [false] Toggles the use of left caps in styled callouts.
/// @prop {Color} left-cap-color [green] Color of the left cap.
/// @prop {Dimension} left-cap-width [0.5rem] Width of the left cap.
/// @prop {Dimension} margin [2rem] Bottom margin of the Callout.
/// @prop {Dimension} padding [1.5rem] Padding of the Callout.

$config: (
  "background-color" : rgb(240, 240, 240),
  "border-color" : "rule-light",
  "border-radius" :  true,
  "border-width" : 1px,
  "box-shadow" : none,
  "left-cap" : true,
  "left-cap-color" : rgb(160, 160, 160),
  "left-cap-width" : 0.5rem,
  "margin" : 2rem,
  "padding" : 1.5rem,
) !default;

$styles: (
  "outline" : (
    "background-color": transparent
  ),
  "info" : (
    "background-color" : "info-background",
    "left-cap-color" : "info",
    "left-cap" : true,
  ),
  "warning" : (
    "background-color" : "info-background",
    "left-cap-color" : "info",
    "left-cap" : true,
  ),
  "success" : (
    "background-color" : "success-background",
    "left-cap-color" : "success",
    "left-cap" : true,
  ),
  "danger" : (
    "background-color" : "danger-background",
    "left-cap-color" : "danger",
    "left-cap" : true,
  ),
) !default;

/// Change modules $config
/// @param {Map} $changes Map of changes
/// @example scss
///   @include ulu.component-callout-set(( "property" : value ));

@mixin set($changes) {
  $config: map.merge($config, $changes) !global;
}

/// Get a config option
/// @param {Map} $name Name of property
/// @example scss
///   @include ulu.component-callout-get("property");

@function get($name) {
  $value: utils.require-map-get($config, $name, "callout [config]");
  @return utils.function-fallback($name, $value, $-fallbacks);
}

/// Set callout style variations
/// @param {Map} $changes Map of changes (options for style include [background-color, color, border, border-radius, border-color, box-shadow, padding, left-cap, left-cap-width, left-cap-color]
/// @param {String} $merge-mode Merge mode see utils.map-merge() [null|"deep"|"overwrite"]

@mixin set-styles($changes, $merge-mode: null) {
  $styles: utils.map-merge($styles, $changes, $merge-mode) !global;
}

@mixin -left-cap($color: get("left-cap-color")) {
  $left-padding: get-spacing-left(get("padding"));
  position: relative; 
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;
  padding-left: get("left-cap-width") + $left-padding;
  &::before {
    content: "";
  }
}

/// Output component stylesheet
/// @example scss
///  @include ulu.component-callout-styles();

@mixin styles {
  $prefix: selector.class("callout");
  
  #{ $prefix } {
    background-color: color.get(get("background-color"));
    padding: get("padding");
    border: get("border-width") solid color.get(get("border-color"));
    margin-bottom: get("margin");
    box-shadow: get("box-shadow");
    border-radius: get("border-radius");
    & >:first-child {
      margin-top: 0;
    }
    &::before {
      position: absolute;
      left: 0 - get("border-width");
      top: 0 - get("border-width");
      bottom: 0 - get("border-width");
      width: get("left-cap-width");
      background-color: color.get(get("left-cap-color"));
    }
    @if get("left-cap") {
      @include -left-cap();
      &::before {
        content: "";
      }
    }
  }
  @each $name, $style in $styles {
    #{ $prefix }--#{ $name } {
      background-color: color.get(map.get($style, "background-color")); 
      color: color.get(map.get($style, "color")); 
      border: map.get($style, "border"); 
      border-radius: map.get($style, "border-radius"); 
      border-color: color.get(map.get($style, "border-color")); 
      box-shadow: map.get($style, "box-shadow"); 
      padding: map.get($style, "padding"); 
      &::before {
        background-color: color.get(map.get($style, "left-cap-color"));
      }
      @if map.get($style, "left-cap") {
        @if not get("left-cap") {
          @include -left-cap();
        }
      }
    }
  }
}