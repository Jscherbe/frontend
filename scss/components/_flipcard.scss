
////
/// @group flipcard
////
/// Creates adaptive (changing at breakpoints)n between items (vertical/horizontal layout)

@use "sass:map";
@use "sass:math";
@use "../element";
@use "../utils";

/// Module Settings
/// @type Map
/// @prop {Color} background-color [white] Background color of the text-only flipcard front.
/// @prop {Color} background-color-image [rgba(96, 255, 255, 0.89)] Background color of the image flipcard front.
/// @prop {Number} image-opacity [0.7] Opacity of the image to allow shading from the background color.
/// @prop {Color} background-color-back [rgb(178, 178, 178)] Background color on the back of the flipcard.
/// @prop {Color} border [1px solid black] Flipcard border.
/// @prop {Dimension} border-radius [6px] Border radius for flipcard.
/// @prop {Color} border-color-hover [black] border color when hovered.
/// @prop {CssValue} control-button-border-focus [2px solid blue] Border that shows when focused.
/// @prop {Time} anim-duration [430ms] Animation duration.
/// @prop {Time} anim-delay [200ms] Animation delay.
/// @prop {Dimension} padding [1.5rem] Padding for the flipcard.
/// @prop {Color} title-color [red] Color of the front page text.
/// @prop {Color} title-color-hover [green] Color of the front page text when hovered or focused.
/// @prop {Color} icon-color [pink] Color of the icon.
/// @prop {Color} icon-color-hover [aqua] Color of the icon when hovered or focused.
/// @prop {Color} icon-color-image [aqua] Color of the icon when using an image.
/// @prop {Color} icon-color-image-hover [pink] Color of the icon when using an image and hovered or focused.
/// @prop {Color} title-color-image [black] Color of the front page text when using an image.
/// @prop {Color} title-color-image-hover [blue] Color of the front page text when using an image and hovered or focused.
/// @prop {Boolean} bottom-shadow [true] Boolean that enables a bottom shadow to the image flipcard.

/// @todo 
/// 

$config: (
  "anim-delay" : 200ms,
  "anim-duration" : 430ms,
  "background-color" : white,
  "background-color-image" : rgba(96, 255, 255, 0.89),
  "background-color-back" : rgb(178, 178, 178),
  "bottom-shadow" : true,
  "border" : 1px solid black,
  "border-color-hover" : black,
  "border-radius" : 6px,
  "control-button-border-focus" : 2px solid blue,
  "icon-color" : pink,
  "icon-color-hover" : aqua,
  "icon-color-image" : aqua,
  "icon-color-image-hover" : pink,
  "image-opacity" : 0.7,
  "padding" : 1.5rem,
  "title-color" : red,
  "title-color-hover" : green,
  "title-color-image" : black,
  "title-color-image-hover" : blue,
);

/// Change modules $config
/// @param {Map} $changes Map of changes
///   @include module-name.set(( "property" : value ));

@mixin set($changes) {
  $config: map.merge($config, $changes) !global;
}

/// Set sizes map
/// @param {Map} $changes Map of changes
/// @param {String} $merge-mode Merge mode see utils.map-merge() [null|"deep"|"overwrite"]

@mixin set-sizes($changes, $merge-mode: null) {
  $sizes: utils.map-merge($sizes, $changes, $merge-mode) !global;
}

/// Get a config option
/// @param {Map} $name Name of property
///   @include module-name.get("property");

@function get($name) {
  @return utils.require-map-get($config, $name, "flipcard [config]");
}

/// Prints adaptive spacing component styles
/// @example scss
///  @include ulu.component-adaptive-spacing-styles();

@mixin styles {
  .flipcard {
    height: 100%;
    background-color: get("background-color");
    line-height: 1.4;
    overflow: hidden;
    position: relative;
    border: get("border");
    border-radius: get("border-radius");
    &.Flipcard:hover {
      border-color: get("border-color-hover");
    }
    .Flipcard__control-button:focus {
      border: get("control-button-border-focus");
    }
  }
  .flipcard__front,
  .flipcard__back {
    display: flex;
    flex-direction: column;
    justify-content: flex-end;
  }
  
  .flipcard__front {
    // To lay the image out on top of the text
    display: grid;
    grid-template-columns: 1fr;
    justify-items: stretch;
    grid-template-areas: "flipcard-front";
    &:hover {
      .flipcard__front-image {
        transition-duration: 8000ms;
        transition-delay: 0;
        transform: scale(1.15);
      }
      .flipcard__front-content {
        color: get("title-color-hover");
      }
      .flipcard__icon {
        color: get("icon-color-hover");
      }
    }
    @media (prefers-reduced-motion: no-preference) {
      [data-flipcard-state="open"] & {
        opacity: 0;
        animation: flipcard-front-close get('anim-duration') ease-out forwards;
      }
      [data-flipcard-state="closed"] & {
        animation: flipcard-front-open get('anim-duration') ease-in-out forwards;
      }
    }
  }
  .flipcard--w-image {
    background-color: get("background-color-image");

    &:hover {
      .flipcard__front-content {
        color: get("title-color-image-hover");
      }
      .flipcard__icon {
        color: get("icon-color-image-hover");
      }
    }
  }
  .flipcard__front-image,
  .flipcard__front-content {
    grid-area: flipcard-front / flipcard-front / flipcard-front / flipcard-front;
  }
  .flipcard__front-image {
    display: block;
    @media (prefers-reduced-motion) {
      transition: transform 1000ms 200ms ease-out;
    }
    img {
      object-fit: cover;
      width: 100%;
      height: 100%;
      opacity: get("image-opacity");
    }
  }
  .flipcard__icon {
    color: get('icon-color');
    display: block;
    margin-top: 0.5rem;
  }
  .flipcard__front-content {
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: flex-end;
    color: get("title-color");
    position: relative;
    z-index: 2;
    padding: get('padding');
    align-self: end;
    transition: transform 350ms ease-in-out;    
  }
  .flipcard--w-image {
    .flipcard__icon {
      color: get("icon-color-image");
    }
    .flipcard__front-content {
      color: get("title-color-image");
      @if(get("bottom-shadow")) {
        // bottom position includes padding so that the shadow 
        &:after {
          content: '';
          display: block;
          position: absolute;
          bottom: calc(0rem - get('padding'));
          top: 0;
          left: 0;
          right: 0;
          background-image: linear-gradient(rgba(0,0,0,0), rgba(0,0,0,0.5));
          z-index: -1;
        }
      }
    }
  }
  .flipcard__back {
    background-color: get("background-color-back");
    padding: get('padding');
    justify-content: flex-end;
    [data-flipcard-state="open"] & {
      animation: flipcard-back-open get('anim-duration') ease-out forwards;
      @media (prefers-reduced-motion) {
        animation: fadeIn 430ms ease-in-out;
      }
    }
  }
  @keyframes flipcard-back-open {
    0% {
      opacity: 0;
      transform: scale(0.7);
      transform: translatey(100%);
    }
    30% {
      opacity: 0;
      transform: translatey(100%);
    }
    100% {
      opacity: 1;
      transform: scale(1);
      transform: translatey(0);
    }
  }
  @keyframes flipcard-front-close {
    0% {
      opacity: 1;
      transform: scale(1);
    }
    80% {
      opacity: 0;
      transform: scale(0.7);
    }
    100% {
      opacity: 0;
    }
  }
  @keyframes flipcard-front-open {
    0% {
      opacity: 0;
      transform: scale(0.7);
    }
    30% {
      opacity: 0;
    }
    100% {
      opacity: 1;
      transform: scale(1);
    }
  }
}

.flipcard--center-title {
  .flipcard__front-content {
    justify-content: center;
    align-items: center;
  }
}
.flipcard--bottom-title {
  .flipcard__front-content {
    justify-content: flex-end;
  }
}
.flipcard:not(.flipcard--bottom-title, .flipcard--center-title) {
  .flipcard__front-content {
    align-items: center;
    justify-content: center;
    position: relative;
  }
  .flipcard__icon-container {
    position: absolute;
    bottom: get("padding");
    right: get("padding");
  }
}
// modifier for animations
.flipcard--animation:hover {
  .flipcard__front-content {
    transform: translatey(-(get('padding') * 0.5));
  }
}