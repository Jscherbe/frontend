////
/// @group units
////

@use "sass:meta";
@use "sass:map";
@use "utils";

/// Module Settings
/// @type Map
/// @prop {Number} $config.small-x 
/// @prop {Number} $config.small 
/// @prop {Number} $config.default Base unit of measurent
/// @prop {Number} $config.large 
/// @prop {Number} $config.large-x 
/// @prop {Number} $config.large-xx 

$config: (
  "small-x" : 1rem * 0.5,
  "small" : 1rem * 0.75,
  "default" : 1rem,
  "large" : 1rem * 2,
  "large-x" : 1rem * 3,
  "large-xx" : 1rem * 4
) !default;

/// Update the units preset map
/// @param {Map} $changes A map to merge into the color palette
/// @example scss Setting the error and type color
///   @include units.set((
///     "margin" : 2.5em
///   ));

@mixin set($changes) {
  $config: map.merge($config, $changes) !global;
}

/// Get a unit by name (preset) or number (multiplier of base)
/// @param {Number|String} $value if a number is passed it is used as a multiplier of the base, if a string is passed it is used to lookup a value from unit presets @see $config
/// @return {Number}

@function get($value: 1) {
  @if (meta.type-of($value) == string) {
    @return utils.require-map-get($config, $value, 'unit [config]');
  }
  @return get("default") * $value;
}