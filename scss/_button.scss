////
/// @group button
////

/// This is the core button module. It handles the styling, sizes and other styling attributes of buttons. You can include the "component" button to print the button styles/sizes or you can use the mixins from the core module.

@use "sass:map";
@use "sass:meta";
@use "sass:string";

@use "color";
@use "element";
@use "typography";
@use "utils";

// Used for function fallback
$-fallbacks: (
  "box-shadow": meta.get-function("get", false, "element")
);

/// Module Settings
/// @type Map

$config: (
  "padding":                 (0.75em 1.5em),
  "font-family":             inherit,
  "white-space":             nowrap,
  "font-weight":             bold,
  "line-height":             1.1,
  "letter-spacing":          0.02em,
  "text-transform":          none,
  "text-shadow":             none,
  "font-size":               "base",
  "box-shadow":              true,
  "border-radius":           2rem,
  "border-width":            1px,
  "color":                   "control",
  "color-hover":             "control:hover",
  "color-active":            "control-active",
  "border-color":            "control-border",
  "border-color-hover":      "control-border:hover",
  "border-color-active":     "control-border-active",
  "background-color":        "control-background",
  "background-color-hover":  "control-background:hover",
  "background-color-active": "control-background-active",
  "margin":                  (0.45em 0.5em 0.45em 0),
  "min-width":               9rem,
  "icon-size":               2.5rem,
  "icon-font-size":          1.38rem,
  "icon-border-radius":      50%,
  "text-decoration":         none,
  "transition-enabled":      true,
  "transition-duration":     200ms,
  "transition-properties":   (border-color, background-color, color, box-shadow),
  "active-selector":         "&.is-active"
) !default;

/// Button sizes
/// @type Map

$sizes: (
  "small" : (
    "padding":        (0.35em 1.5em),
    "min-width":      0,
    "icon-size":      2rem,
    "icon-font-size": 1rem
  ),
  "large" : (
    "padding":   (1em 2em),
    "min-width": 11rem,
    "icon-size": 3.5rem
  )
) !default;

/// Button styles
/// @type Map

$styles: (
  "transparent" : (
    "background-color" : transparent,
    "color" : "type",
    "border-color" : transparent,
    "box-shadow" : none,
    "hover" : (
      "background-color" : "white",
      "color" : inherit,
      "border-color" : transparent,
    )
  ),
  "outline" : (
    "background-color" : transparent,
    "color" : "type",
    "border-color" : "rule-light",
    "box-shadow" : none,
    "hover" : (
      "background-color" : "white",
    )
  ),
) !default;

/// Change modules $config
/// @param {Map} $changes Map of changes
/// @example scss - General example, replace module-name with module's name
///   @include module-name.set(( "property" : value ));

@mixin set($changes) {
  $config: map.merge($config, $changes) !global;
}

/// Get a config option
/// @param {Map} $name Name of property
/// @example scss - General example, replace module-name with module's name
///   @include module-name.get("property");

@function get($name) {
  $value: utils.require-map-get($config, $name, "button [config]");
  @return utils.function-fallback($name, $value, $-fallbacks);
}

/// Set button styles 
/// @param {Map} $changes Map of changes
/// @param {String} $merge-mode Merge mode see utils.map-merge() [null|"deep"|"overwrite"]

@mixin set-styles($changes, $merge-mode: null) {
  $styles: utils.map-merge($styles, $changes, $merge-mode) !global;
}

/// Set Button Sizes
/// @param {Map} $changes Map of changes
/// @param {String} $merge-mode Merge mode see utils.map-merge() [null|"deep"|"overwrite"]

@mixin set-sizes($changes, $merge-mode: null) {
  $sizes: utils.map-merge($sizes, $changes, $merge-mode) !global;
}

/// Print styles to reset browser button style

@mixin reset() {
  text-transform: none;
  text-align: inherit;
  background-color: transparent;
  border: transparent;
  border-radius: 0;
  margin: 0;
  padding: 0;
  appearance: none; 
  color: inherit; 
  cursor: pointer;
}

/// Print default button styles
/// @param {Boolean} $with-reset [false] Include button.reset()

@mixin default($with-reset: false) {
  $font-size: get("font-size");
  @if ($with-reset) {
    @include reset();
  }
  appearance: none; // If used with select for example
  display: inline-block;
  text-transform: get("text-transform");
  text-align: center;
  text-shadow: get("text-shadow");
  vertical-align: middle;
  font-family: get("font-family");
  font-weight: get("font-weight");
  @if ($font-size) {
    @include typography.size($font-size, null, true);
  }
  border-radius: get("border-radius");
  // Removed not sure why it was needed, effects buttons with 
  // borders (rendering between bg and border)
  // background-clip: padding-box; 
  padding: get("padding");
  line-height: get("line-height");
  letter-spacing: get("letter-spacing");
  box-shadow: get("box-shadow");
  margin: get("margin");
  min-width: get("min-width");
  white-space: get("white-space");
  max-width: 100%; // Questionable, not sure if it's needed
  flex-shrink: 0; 
  // Should override link visited coloring
  
  @if get("transition-enabled") {
    transition-duration: get("transition-duration");
    transition-property: get("transition-properties");
  }
  &,
  &:visited {
    color: color.get(get("color"));
    border: get("border-width") solid color.get(get("border-color"));
    background-color: color.get(get("background-color"));
    text-decoration: get("text-decoration");
  }
  &:last-child {
    margin-right: 0;
  }
  &:hover,
  &:focus {
    color: color.get(get("color-hover"));
    background-color: color.get(get("background-color-hover"));
    border-color: color.get(get("border-color-hover"));
    text-decoration: get("text-decoration");
  }
  @include when-active() {
    color: color.get(get("color-active"));
    background-color: color.get(get("background-color-active"));
    border-color: color.get(get("border-color-active"));
  }
}

/// Mixin to wrap in active selectors
@mixin when-active() {
  #{ get("active-selector") } {
    @content;
  }
}

/// Print button size styles for a specific size
/// @param {String} $name Name of size from $sizes
/// @see $sizes
/// @see set-sizes

@mixin size($name) {
  $size: utils.require-map-get($sizes, $name, 'button [size]');
  $font-size: map.get($size, "font-size");
  padding: map.get($size, "padding");
  border-radius: map.get($size, "border-radius");
  border-width: map.get($size, "border-width");
  min-width: map.get($size, "min-width");
  @if $font-size {
    @include typography.size($font-size);
  }
}

/// Get a value from a button style
/// @param {String} $name Name of style from $styles
/// @see {variable} $styles
/// @see set-styles
/// @return {*} The property you were trying to get

@function get-style-value($name, $prop, $state: null) {
  $style: utils.require-map-get($styles, $name, 'button [color value]');
  $state-style: ();
  // If a specific state [hover, active] grab that map
  @if ($state) {
    $state-style: map.get($style, $state);
    $state-style: if($state-style, $state-style, ());
  }
  // From is the map to grab styles from
  $from: if($state, $state-style, $style);
  $value: map.get($from, $prop);

  // Fallback to parent (if hover)
  @if ($state == "hover") {
    $value: if($value, $value, map.get($style, $prop)); 
  }

  @if (meta.type-of($value) == "string" and string.index($prop, "color")) {
    @return color.get($value);
  } @else {
    @return $value;
  }
}

/// Print a button style's base styles (not hover)
/// - In most cases you want the style() mixin
/// - This is used mainly for trying to match a buttons base styles without including the other state (hover, etc) styles
/// @param {String} $name Name of style from $styles
/// @see {variable} $styles
/// @see set-styles

@mixin style-styles($name) {
  background-color: get-style-value($name, "background-color");
  color: get-style-value($name, "color");
  border-color: get-style-value($name, "border-color");
  border-width: get-style-value($name, "border-width");
  box-shadow: get-style-value($name, "box-shadow");
  text-decoration: get-style-value($name, "text-decoration");
  font-weight: get-style-value($name, "font-weight");
  @if get-style-value($name, "transition-duration") {
    transition-duration: get-style-value($name, "transition-duration");
  }
}

/// Print a button style's base styles (hover styles only)
/// - In most cases you want the style() mixin
/// - This is used mainly for trying to match a buttons hover styles without including the base styling
/// @param {String} $name Name of style from $styles
/// @see {variable} $styles
/// @see set-styles

@mixin style-styles-hover($name) {
  background-color: get-style-value($name, "background-color", "hover");
  color: get-style-value($name, "color", "hover");
  border-color: get-style-value($name, "border-color", "hover");
  box-shadow: get-style-value($name, "box-shadow", "hover");
  text-decoration: get-style-value($name, "text-decoration", "hover");
}

@mixin style-styles-active($name) {
  @include when-active() {
    background-color: get-style-value($name, "background-color", "active");
    color: get-style-value($name, "color", "active");
    border-color: get-style-value($name, "border-color", "active");
  }
}

/// Print a button style
/// - Includes base/visited styling, and hover/focus state styles
/// - To print only one of those states, use style-styles or style-styles-hover
/// - By default this mixin prints the buttons base styles along with :visited state. 
///   This is to avoid link visited states effecting the button styles (if used in editor areas 
///   or other areas that apply automatic links styling for example. (param below to override behavior)
/// @param {String} $name Name of style from $styles
/// @param {String} $no-visited [false] Do not include :visited selector for button base styles
/// @see {variable} $styles
/// @see set-styles

@mixin style($name, $no-visited: false) {
  @if ($no-visited) {
    @include style-styles($name);
  } @else {
    &,
    &:visited {
      @include style-styles($name);
    }
  }
  &:hover,
  &:focus {
    @include style-styles-hover($name);
  }
  @include when-active() {
    @include style-styles-active($name);
  }
}