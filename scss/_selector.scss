////
/// @group selector
////

@use "sass:map";
@use "utils";

/// Module Settings
/// - This module can be used for dynamic classnames (used in base and some components). Some components selectors are too complex or coupled for dynamic classnames. 
/// @todo See about documenting when a component doesn't run through the selecotr module to get it's base classname
/// @type Map
/// @prop {String} $config.prefix Global prefix for selectors (would be used for classname prefix for example)

$config: (
  "prefix" : ""
) !default;

// Map to store class overrides ("button" : "site-button") for example
$-class-overrides: ();

/// Change modules $config
/// @param {Map} $changes Map of changes
/// @example scss - General example, replace module-name with module's name
///   @include module-name.set(( "property" : value ));
@mixin set($changes) {
  $config: map.merge($config, $changes) !global;
}

/// Get a config option
/// @param {Map} $name Name of property
/// @example scss - General example, replace module-name with module's name
///   @include module-name.get("property");

@function get($name) {
  @return utils.require-map-get($config, $name, 'typography [option]');
}

/// Set the class selector overrides
/// @param {Map} $changes Changes to merge

@mixin set-class-overrides($changes) {
  $-class-overrides: map.merge($-class-overrides, $changes) !global;
}

/// Used to allow global prefixing of classes, and also the ability to 
/// Change a class used in the system (ie. like a component for example)
/// @param {String} $class The classname to set

@function class($class) {
  $override: map.get($-class-overrides, $class);
  @return ".#{ get("prefix") }#{ if($override, $override, $class) }";
}