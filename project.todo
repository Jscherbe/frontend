JS Updates:
  ☐ 
  ☐ Finish collapsible
    ☐ Consider removing focusoutCloses (not sure this makes sense and if so should be on user side)
      * No patterns focus out when leaving, would encourage bad practices? We don't have anything to 
        focus the content, and I don't think that's recommended anymore. Was asked to add that once 
        during 508 review so it could be helpful to have it as an option disabled and makes focusout 
        more relevant, but if something is obscuring the interface it should be a modal? So it's not
        a priority
  ☐ Refactor all imports back to file based modules with category folders (vs flat dir based modules)
    * 
  ☐ Rename event getName to getEventName? So it's clear where it's used?
  ☐ Breakpoints, etc. - make this SSR safe (no window, document, element access)
    * Have a default for SSR
  ☐ Simplify initializers into a common pattern (they all need the same thing)
    ☐ Would be nice if what ever this is offers consitent api for all
      * IE. How to get instances for example 
      * this might be something that is a class/object structure and then 
        modules will add export functions that tap into this global instance class
        * For example the module can determine how you get the instance by other means (other than passing node, ie. by id for example, unsure)
  ☐ logger system could be better
    ☐ Get rid of class logger, don't want extend or decorators, everything isn't a class
    ☐ Need the ability to make logger instances with titles, each module can do that on their own
    ☐ Simplify logger to just stuff like that and get rid of anything to details (showContext? that's too much I think, each module should determine if showing context is important, unsure)
  ☐ Consoder whether or not the init attributes are still nessary, maybe these shoudld all move to initializers
  ☐ Seperate initializers and classes
    * Like Collapsible, Tooltip (which don't do anything on their own and have to be used by an initializer or by the user directly)
  ☐ Should popover be a class and then make an initializer
    * This pattern could make this clearer and allow for custom usage
      * for example Tooltip may be implemented like useFollow in vue in the future
      * but still relies on the same behaviors
  ☐ Like to unify the tooltip and popover underlying implementation (floating ui stuff)
    * - popover (aria stuff)
    *   - collapsible
    *   - floating
    * - tooltip
    *   - floating
SCSS Updates:
  ☐ Make more things mixins with styles as applied mixins with selectors, that way you can make some of these components youself? Using different selectors?
    * For example the details styling, sometimes it's best to have it restrained to a selector while others it may be global for all details (override browser defaults), or it may be a need to style a details element differently
  ☐ Reconsider that components needs:
    ☐ Should component modules be so simple or should we have more mixins so that the user can decide how styles are used
      * Deciding to steer away from getting too complex, details below. In short adding the ability to be too custom with applying styles makes it hard to maintain and work on. If something should be used that way it should be designed that way and it might not be a component. Allowing the selectors to be changed should be enough
      * -- Discussion of pros and cons below --
      * It makes it easier to output but it also limits the ability to reuse
      * Mixins may be better, more flexible with common mixin pattern to output with selector? (also on the flip side does this just make things harder to reuse with configuration). An advantage of configuring modules is that it's easier to reuse configuration which is major accelerator between projects, vs having to copy arguments to mixins for example and any manual selectors. But, it is useful in certain scenarios, so can it be added under the hood for alternate use cases? One drawback of the mixin approach is that it is very restrictive or too verbose, CSS has a lot of selectors and not everything is easy to breakdown into micro styles, in the end it may be too complicated to maintain easily. Also along maintaining, mixins are tightly coupled to a specific structure, in the future if that structure changes it makes it more complex to introduce change since their are so many ways these public mixins may be used. I think this could be too much, and it probably makes sense to avoid getting to in the weeds with something that could do everything. If something can be setup in multiple ways (ie. different configurations like callouts), the idea is to be able to adapt the underlying CSS without having to update configurations too much. 
  ☐ Refactor (site-details = accordion) component
  ☐ Rule styles should be defined as object so that colors can be keys instead of hardcoded
    * Requires resetting the rule style manually now to update from default color
    ☐ What about transitioning to css variables for everything?
      * Get rid of color modules stuff? just make them variables. Would simplify a lot?
      * Do this once everything is finished
Bring in Vue components as a separate package:
  ☐ Decided that vue stuff should stay seperate as we wouldn't want to udpate this library to make changes to vue components (as vue changes over time)
    ☐ This other module may use peer deps or something to limit which version of ulu it works with
Todos:
  ☐ Do we need some way to go back to older docs?
    - Think this is overkill until there is a major revision
  ☐ SCSS
    ☐ Add line-height-densest typography utility class
    ☐ Remove clearfix, or at least in any outputted styles
  ☐ Need to add guide about how you can use the modules (ie by chaining or individually)
  ☐ Need to add guide about configuration
  ☐ Bring in common components
    * Only what we would want to support in the core library!
      * More specific modules should probably be handled like the vue components 
      * Any module added should likely stay in the library indefinetly, so modules that are more opionated or used as infrequently should probably be made into their own package. Or if they don't seem like they have a future omitted
    ☐ badge
    ☐ tag
    ☐ card
    ☐ card grid
    ☐ spinner
Ideas:
  ☐ Add scaffolding @idea
  ☐ Create something that will compile seperate stylesheets for all components, helpers, etc (to be used by CDN prototyping / quick patches unpkg, etc). 
    ☐ Would allow team to add features without adding to stylesheet (we need modals quick, we need tooltips quick, just a thought)

Long Term:
  Scss:
    General:
      ☐ Should we use array/list for components enabled instead of object with booleans?
        * Could provide full array (from module) to easily populate
        * Could have warnings to say if a component in the list is not exist
        * Could allow the user to load components in the order of the array
          * Don't do this, this should be up to the lib, users can already to this manually
        * Main benifit of array syntax would be simplicity and easily copying this from in config (reduce config visually too)
  Popovers:
    ☐ Use HTML Popover?
      * Keep an eye on this API may be able to remove some scripting
      * Not sure if this is fully accessible yet, can probably be added (toggling attrs needed for a11y)
      * https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/popover