JS Updates:
  ☐ Simplify initializers into a common pattern (they all need the same thing)
    ☐ Would be nice if what ever this is offers consitent api for all
      * IE. How to get instances for example 
      * this might be something that is a class/object structure and then 
        modules will add export functions that tap into this global instance class
        * For example the module can determine how you get the instance by other means (other than passing node, ie. by id for example, unsure)
  ☐ logger system could be better
    ☐ Get rid of class logger, don't want extend or decorators, everything isn't a class
    ☐ Need the ability to make logger instances with titles, each module can do that on their own
    ☐ Simplify logger to just stuff like that and get rid of anything to details (showContext? that's too much I think, each module should determine if showing context is important, unsure)
  ☐ Consoder whether or not the init attributes are still nessary, maybe these shoudld all move to initializers
  ☐ Seperate initializers and classes
    * Like Collapsible, Tooltip (which don't do anything on their own and have to be used by an initializer or by the user directly)
  ☐ Should popover be a class and then make an initializer
    * This pattern could make this clearer and allow for custom usage
      * for example Tooltip may be implemented like useFollow in vue in the future
      * but still relies on the same behaviors
  ☐ Like to unify the tooltip and popover underlying implementation (floating ui stuff)
    * - popover (aria stuff)
    *   - collapsible
    *   - floating
    * - tooltip
    *   - floating
SCSS Updates:
  ☐ Refactor (site-details = accordion) component
  ☐ Rule styles should be defined as object so that colors can be keys instead of hardcoded
    * Requires resetting the rule style manually now to update from default color
    ☐ What about transitioning to css variables for everything?
      * Get rid of color modules stuff? just make them variables. Would simplify a lot?
      * Do this once everything is finished
Bring in Vue components as a separate package:
  ☐ Decided that vue stuff should stay seperate as we wouldn't want to udpate this library to make changes to vue components (as vue changes over time)
    ☐ This other module may use peer deps or something to limit which version of ulu it works with
Todos:
  ☐ Do we need some way to go back to older docs?
    - Think this is overkill until there is a major revision
  ☐ SCSS
    ☐ Add line-height-densest typography utility class
    ☐ Remove clearfix, or at least in any outputted styles
  ☐ Need to add guide about how you can use the modules (ie by chaining or individually)
  ☐ Need to add guide about configuration
  ☐ Bring in common components
    * Only what we would want to support in the core library!
      * More specific modules should probably be handled like the vue components 
      * Any module added should likely stay in the library indefinetly, so modules that are more opionated or used as infrequently should probably be made into their own package. Or if they don't seem like they have a future omitted
    ☐ badge
    ☐ tag
    ☐ card
    ☐ card grid
    ☐ spinner
Ideas:
  ☐ Add scaffolding @idea
  ☐ Create something that will compile seperate stylesheets for all components, helpers, etc (to be used by CDN prototyping / quick patches unpkg, etc). 
    ☐ Would allow team to add features without adding to stylesheet (we need modals quick, we need tooltips quick, just a thought)

Long Term:
  Scss:
    General:
      ☐ Should we use array/list for components enabled instead of object with booleans?
        * Could provide full array (from module) to easily populate
        * Could have warnings to say if a component in the list is not exist
        * Could allow the user to load components in the order of the array
          * Don't do this, this should be up to the lib, users can already to this manually
        * Main benifit of array syntax would be simplicity and easily copying this from in config (reduce config visually too)
  Popovers:
    ☐ Use HTML Popover?
      * Keep an eye on this API may be able to remove some scripting
      * Not sure if this is fully accessible yet, can probably be added (toggling attrs needed for a11y)
      * https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/popover